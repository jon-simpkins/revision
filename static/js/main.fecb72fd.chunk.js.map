{"version":3,"sources":["features/revision-header/RevisionHeader.tsx","features/storyList/StoryCard.tsx","features/storyList/storyListPersistence.ts","features/storyList/storyListSlice.ts","app/hooks.ts","pages/homepage/Homepage.tsx","features/storyDetails/StoryDetails.tsx","pages/story-details/StoryDetailsPage.tsx","pages/import-export/DataManagementPage.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","protos_v2.js"],"names":["RevisionHeader","Menu","to","Item","header","Icon","name","Component","StoryCard","this","props","story","id","getCardUrl","Card","style","margin","Content","description","split","map","line","idx","allStoryIdsKey","storyKey","readAllStoriesFromStorage","readStoryIds","storyString","localStorage","getItem","Error","Story","create","JSON","parse","readStory","storyIdString","writeStoryIds","storyIds","setItem","stringify","writeStory","addStoryToStorage","allStoryIds","push","initialState","storyMap","forEach","toJSON","fetchInitialStateFromStorage","actionPrefix","storyListSlice","createSlice","reducers","createStory","state","action","payload","updateStory","removeStory","storyListPersistenceMiddleware","storeAPI","next","result","type","startsWith","handleStoryListPersistence","idToRemove","filter","removeItem","selectStoryMap","compiledStoryMap","Object","entries","storyList","key","value","fromObject","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","getStorySection","values","length","Segment","display","flexWrap","Homepage","dispatch","history","useHistory","Group","Header","size","Subheader","flex","textAlign","Button","icon","color","onClick","newStory","uuid","StoryDetails","durationErrorString","newName","onStoryChange","newDescription","durationSec","duration","seconds","durationStr","hours","Math","floor","toString","padStart","minutes","newDuration","RegExp","test","setDurationErrorString","splitDurationStr","Boolean","i","parseInt","Duration","hasError","setState","onStoryDelete","Form","widths","Input","label","defaultValue","onChange","e","onNameChange","target","getDurationString","error","onDurationChange","Field","TextArea","onDescriptionChange","fontFamily","height","StoryDetailsPage","match","params","fetchedStory","downloadWorkspace","filename","Date","now","fileDownload","workspace","WritingWorkspace","stories","encode","finish","loadDataFromStorage","files","a","arrayBuffer","fileData","loadDataToStorage","Uint8Array","window","location","reload","data","decode","clear","DataManagementPage","keys","accept","event","uploadWorkspace","App","path","component","store","configureStore","reducer","storyListReducer","middleware","getDefaultMiddleware","concat","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","define","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Timestamp","properties","prototype","nanos","writer","hasOwnProperty","call","uint32","int32","encodeDelimited","ldelim","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","object","toObject","options","defaults","constructor","toJSONOptions","relatedStoryIds","emptyArray","string","fork","isString","Array","isArray","String","TypeError","arrays","j"],"mappings":"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","file":"static/js/main.fecb72fd.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {\n  Link\n} from 'react-router-dom';\nimport {Icon, Menu} from 'semantic-ui-react';\n\nexport default class RevisionHeader extends Component {\n\n  render() {\n    return (\n        <Menu>\n          <Link to={'/'}>\n            <Menu.Item header>Revision</Menu.Item>\n          </Link>\n          <Link to={'/data'}>\n            <Menu.Item>\n              <Icon name=\"save\" />\n            </Menu.Item>\n          </Link>\n        </Menu>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {\n  Link\n} from 'react-router-dom';\nimport { Card } from 'semantic-ui-react';\nimport {Story} from '../../protos_v2';\n\ninterface StoryCardProps {\n  story: Story;\n}\n\nexport default class StoryCard extends Component<StoryCardProps> {\n  getCardUrl(): string {\n    return '/story/' + this.props.story.id;\n  }\n\n  render() {\n    return (\n      <Link to={this.getCardUrl()}>\n        <Card style={{margin: '8px'}}>\n          <Card.Content header={this.props.story.name} />\n          <Card.Content>\n            {/* For each line of the description, print it in a paragraph */}\n            {this.props.story.description.split('\\n').map((line, idx) => {\n              return (<p key={idx}>{line}</p>);\n            })}\n          </Card.Content>\n        </Card>\n      </Link>\n    );\n  }\n}\n","import {IStory, Story} from '../../protos_v2';\nimport {StoryMapInState} from './storyListSlice';\n\nconst allStoryIdsKey = 'story-ids';\n\nfunction storyKey(id: string): string {\n  return `story-${id}`;\n}\n\nexport function readAllStoriesFromStorage(): Story[] {\n  return readStoryIds().map((id) => {\n    return readStory(id);\n  });\n}\n\nfunction readStoryIds(): string[] {\n  let storyIdString = localStorage.getItem(allStoryIdsKey) || '[]';\n  return JSON.parse(storyIdString) as string[];\n}\n\nfunction writeStoryIds(storyIds: string[]): void {\n  localStorage.setItem(allStoryIdsKey, JSON.stringify(storyIds));\n}\n\nfunction readStory(id: string): Story {\n  let storyString = localStorage.getItem(storyKey(id));\n  if (!storyString) {\n    throw Error(`Unable to read story ${id} from local storage`);\n  }\n\n  return Story.create(JSON.parse(storyString));\n}\n\nexport function writeStory(story: IStory) {\n  localStorage.setItem(storyKey(story.id as string), JSON.stringify(story));\n}\n\nexport function addStoryToStorage(story: IStory): void {\n  writeStory(story);\n\n  const allStoryIds = readStoryIds();\n  allStoryIds.push(story.id as string);\n  writeStoryIds(allStoryIds);\n}\n\nexport function clearStoryFromStorage(idToRemove: string): void {\n  let allStoryIds = readStoryIds();\n\n  writeStoryIds(allStoryIds.filter((id) => {\n    return id !== idToRemove;\n  }));\n\n  localStorage.removeItem(storyKey(idToRemove));\n}\n\nexport function fetchInitialStateFromStorage() {\n  const initialState = {\n    storyMap: {} as StoryMapInState\n  };\n  readAllStoriesFromStorage().forEach((story) => {\n    initialState.storyMap[story.id] = story.toJSON();\n  });\n\n  return initialState;\n}\n\n","import {createSlice, Middleware, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../../app/store';\nimport {IStory, Story} from '../../protos_v2';\nimport {addStoryToStorage, clearStoryFromStorage, fetchInitialStateFromStorage, writeStory} from './storyListPersistence';\n\nexport interface StoryMap {\n  [key: string]: Story;\n}\n\nexport interface StoryMapInState {\n  [key: string]: IStory\n}\n\ninterface storyListInState {\n  storyList: {\n    storyMap: StoryMapInState\n  }\n}\n\nconst initialState = fetchInitialStateFromStorage();\n\nconst actionPrefix = 'storyList';\n\nconst storyListSlice = createSlice({\n  name: actionPrefix,\n  initialState,\n  reducers: {\n    createStory(state, action: PayloadAction<IStory>) {\n      state.storyMap[action.payload.id as string] = action.payload;\n    },\n    updateStory(state, action: PayloadAction<IStory>) {\n      state.storyMap[action.payload.id as string] = action.payload;\n    },\n    removeStory(state, action: PayloadAction<string>) {\n      delete state.storyMap[action.payload];\n    }\n  }\n});\n\nexport const storyListPersistenceMiddleware: Middleware<{}, storyListInState>\n    = storeAPI => next => action => {\n  let result = next(action);\n\n  if (action.type.startsWith(actionPrefix + '/')) {\n    handleStoryListPersistence(action);\n  }\n\n  return result;\n}\n\nexport const handleStoryListPersistence = (action: PayloadAction<string|Story>) => {\n  switch (action.type) {\n    case `${actionPrefix}/createStory`:\n      addStoryToStorage(action.payload as Story);\n      break;\n    case `${actionPrefix}/updateStory`:\n      writeStory(action.payload as Story);\n      break;\n    case `${actionPrefix}/removeStory`:\n      clearStoryFromStorage(action.payload as string);\n      break;\n  }\n}\n\n// Selector for fetching full map of stories\nexport const selectStoryMap = (state: storyListInState|RootState): StoryMap => {\n  const compiledStoryMap: StoryMap = {};\n\n  for (const [key, value] of Object.entries(state.storyList.storyMap)) {\n    compiledStoryMap[key] = Story.fromObject(value);\n  }\n\n  return compiledStoryMap;\n}\n\n// Creates selector for particular story\nexport const selectSpecificStory = (id: string) => (state: storyListInState|RootState): Story|null => {\n  const fetchedStory = state.storyList.storyMap[id];\n\n  if (!fetchedStory) {\n    return null;\n  }\n\n  return Story.create(fetchedStory);\n}\n\nexport const { createStory, updateStory, removeStory } = storyListSlice.actions;\nexport default storyListSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import StoryCard from '../../features/storyList/StoryCard';\nimport {Button, Header, Icon, Segment} from 'semantic-ui-react';\nimport { useHistory } from 'react-router-dom';\nimport {createStory, selectStoryMap, StoryMap} from '../../features/storyList/storyListSlice';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {IStory, Story} from '../../protos_v2';\nimport { v4 as uuid } from 'uuid';\n\nfunction createNewStory(): IStory {\n  return Story.create({\n    id: uuid(),\n    name: 'New Story',\n    description: 'A story about something'\n  }).toJSON();\n}\n\nfunction getStorySection(storyMap: StoryMap): JSX.Element {\n  const storyList = Object.values(storyMap);\n\n  if (!storyList.length) {\n    return (\n        <Segment>Whoops, no stories yet</Segment>\n    );\n  }\n\n  return <Segment style={{display: 'flex', flexWrap: 'wrap'}}>\n    {storyList.map((story, idx) => {\n      return (\n          <StoryCard key={idx} story={story} />\n      );\n    })}\n  </Segment>\n}\n\nexport default function Homepage() {\n  const storyMap = useAppSelector(selectStoryMap);\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  return (\n      <div style={{margin: '24px'}}>\n        <Segment.Group >\n          <Segment style={{display: 'flex'}}>\n            <Header size='medium'>Story List\n              <Header.Subheader>\n                All your stories\n              </Header.Subheader>\n            </Header>\n            <div style={{flex: 1, textAlign: 'right'}}>\n              <Button icon color='green'\n                onClick={() => {\n                  const newStory = createNewStory();\n                  dispatch(createStory(newStory));\n                  history.push(`/story/${newStory.id}`);\n                }}\n              >\n                <Icon name='add' />\n              </Button>\n            </div>\n          </Segment>\n          {getStorySection(storyMap)}\n        </Segment.Group>\n      </div>\n  );\n}\n","import React, {Component} from 'react';\nimport {Button, Form, Header, Icon, Segment, TextArea} from 'semantic-ui-react';\nimport {Duration, Story} from '../../protos_v2';\n\ninterface StoryDetailsProps {\n  story: Story|null;\n  onStoryChange: (story: Story) => void;\n  onStoryDelete: () => void;\n}\n\ninterface StoryDetailsState {\n  durationErrorString: string|null;\n}\n\nexport default class StoryDetails extends Component<StoryDetailsProps, StoryDetailsState> {\n  state: StoryDetailsState = {\n    durationErrorString: null\n  };\n\n  onNameChange(newName: string) {\n    const story = this.props.story as Story;\n\n    story.name = newName;\n    this.props.onStoryChange(story);\n  }\n\n  onDescriptionChange(newDescription: string) {\n    const story = this.props.story as Story;\n\n    story.description = newDescription;\n    this.props.onStoryChange(story);\n  }\n\n  getDurationString(): string {\n    let durationSec = (this.props.story?.duration?.seconds || 0) as number;\n\n    let durationStr = '';\n\n    const hours = Math.floor(durationSec / 3600);\n    durationSec -= 3600 * hours;\n    durationStr += hours.toString().padStart(2, '0') + ':';\n\n    const minutes = Math.floor(durationSec / 60);\n    durationSec -= 60 * minutes;\n    durationStr += minutes.toString().padStart(2, '0') + ':';\n\n    durationStr += durationSec.toString().padStart(2, '0');\n\n    return durationStr;\n  }\n\n  onDurationChange(newDuration: string) {\n    const expectedRegex = new RegExp('^[0-9:]+$');\n    if (!expectedRegex.test(newDuration)) {\n      return this.setDurationErrorString(true);\n    }\n\n    const splitDurationStr = newDuration.split(':').filter(Boolean);\n\n    if (splitDurationStr.length > 3) {\n      return this.setDurationErrorString(true);\n    }\n\n    let durationSec = 0;\n    for (let i = 0; i < splitDurationStr.length; i++) {\n      durationSec = (60 * durationSec) + parseInt(splitDurationStr[i], 10);\n    }\n\n    const story = this.props.story as Story;\n    story.duration = Duration.create({\n      seconds: durationSec\n    });\n\n    this.props.onStoryChange(story);\n    this.setDurationErrorString(false);\n  }\n\n  setDurationErrorString(hasError: boolean) {\n    this.setState((state) => ({\n      ...state,\n      durationErrorString: hasError ? 'Please enter a duration of format HH:MM:SS' : null\n    }));\n  }\n\n  render() {\n    if (!this.props.story) {\n      return (\n          <div>Whoops, could not find story</div>\n      );\n    }\n\n    return (\n      <Segment.Group style={{margin: '24px'}}>\n        <Segment style={{display: 'flex'}}>\n          <Header>\n            Story Details\n            <Header.Subheader>\n              Set the title, top-level description here\n            </Header.Subheader>\n          </Header>\n\n          <div style={{flex: 1, textAlign: 'right'}}>\n            <Button icon color='red'\n              onClick={() => this.props.onStoryDelete()}\n            >\n              <Icon name='delete' />\n            </Button>\n          </div>\n        </Segment>\n        <Segment>\n          <Form>\n            <Form.Group widths='equal'>\n              <Form.Input\n                  label='Story Name'\n                  defaultValue={this.props.story.name}\n                  onChange={(e) => this.onNameChange(e.target.value)}\n              />\n              <Form.Input\n                label='Intended Duration (HH:MM:SS)'\n                defaultValue={this.getDurationString()}\n                error={this.state.durationErrorString}\n                onChange={(e) => this.onDurationChange(e.target.value)}\n              />\n            </Form.Group>\n            <Form.Field>\n              <label>Story Description</label>\n              <TextArea\n                  defaultValue={this.props.story.description}\n                  onChange={(e) => this.onDescriptionChange(e.target.value)}\n                style={{fontFamily: 'CourierPrime', height: '125px'}}\n              />\n            </Form.Field>\n          </Form>\n        </Segment>\n\n      </Segment.Group>\n    );\n  }\n}\n","import { RouteComponentProps } from 'react-router';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {removeStory, selectSpecificStory, updateStory} from '../../features/storyList/storyListSlice';\nimport StoryDetails from '../../features/storyDetails/StoryDetails';\nimport {Story} from '../../protos_v2';\nimport {useHistory} from 'react-router-dom';\n\ninterface MatchParams {\n  id: string\n}\n\ninterface StoryDetailsProps extends RouteComponentProps<MatchParams> {}\n\nexport default function StoryDetailsPage (props: StoryDetailsProps) {\n  const story = useAppSelector(selectSpecificStory(props.match.params?.id));\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  return (\n    <StoryDetails\n      story={story}\n      onStoryChange={(story) => dispatch(updateStory(story.toJSON()))}\n      onStoryDelete={() => {\n        dispatch(removeStory((story as Story).id));\n        history.push('/');\n      }}\n    />\n  )\n}\n","import {useAppSelector} from '../../app/hooks';\nimport {Button, Header, Segment} from 'semantic-ui-react';\nimport {selectStoryMap} from '../../features/storyList/storyListSlice';\n\nimport fileDownload from 'js-file-download';\nimport {WritingWorkspace} from '../../protos_v2';\nimport {addStoryToStorage, readAllStoriesFromStorage} from '../../features/storyList/storyListPersistence';\n\nfunction clearWorkspace() {\n  localStorage.clear();\n  window.location.reload();\n}\n\nfunction downloadWorkspace() {\n  const filename = 'writing_workspace_' + Date.now() + '.write';\n\n  fileDownload(loadDataFromStorage(), filename);\n}\n\nasync function uploadWorkspace(files: FileList|null) {\n  if (!files) {\n    return;\n  }\n\n  const fileData = await files[0].arrayBuffer();\n  const parsedData = new Uint8Array(fileData);\n  loadDataToStorage(parsedData);\n\n  window.location.reload();\n}\n\nexport function loadDataFromStorage(): Uint8Array {\n  const workspace = WritingWorkspace.create({\n    stories: readAllStoriesFromStorage()\n  });\n\n  return WritingWorkspace.encode(workspace).finish();\n}\n\nexport function loadDataToStorage(data: Uint8Array): void {\n  const workspace = WritingWorkspace.decode(data);\n\n  localStorage.clear();\n\n  workspace.stories.forEach((story) => {\n    addStoryToStorage(story);\n  });\n}\n\n\nexport default function DataManagementPage() {\n  const storyMap = useAppSelector(selectStoryMap);\n\n  return (\n      <div style={{margin: '24px'}}>\n        <Segment.Group >\n          <Segment style={{display: 'flex'}}>\n            <Header size='medium'>Data Management\n              <Header.Subheader>\n                Load, Save, or Clear your Workspace\n              </Header.Subheader>\n            </Header>\n          </Segment>\n          <Segment>\n            {Object.keys(storyMap).length} Stories\n          </Segment>\n          <Segment>\n            <Button color='green'\n                    onClick={() => {downloadWorkspace()}}>\n              Download Workspace\n            </Button>\n            <Button color='red'\n                    onClick={() => {clearWorkspace()}}>\n              Clear Workspace\n            </Button>\n          </Segment>\n          <Segment>\n            <Header size='small'>Upload Workspace</Header>\n            <input type=\"file\" accept=\".write\" onChange={(event) => uploadWorkspace(event.target.files)} />\n          </Segment>\n        </Segment.Group>\n      </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport RevisionHeader from './features/revision-header/RevisionHeader';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport Homepage from './pages/homepage/Homepage';\nimport StoryDetailsPage from './pages/story-details/StoryDetailsPage';\nimport DataManagementPage from './pages/import-export/DataManagementPage';\n\nfunction App() {\n  return (\n    <Router>\n      <RevisionHeader />\n      <Switch>\n        <Route path=\"/data\" component={DataManagementPage} />\n        <Route path=\"/story/:id\" component={StoryDetailsPage} />\n        <Route path=\"/\" component={Homepage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import {configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\nimport storyListReducer, {storyListPersistenceMiddleware} from '../features/storyList/storyListSlice';\n\nexport const store = configureStore({\n  reducer: {\n    storyList: storyListReducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat([\n      storyListPersistenceMiddleware,\n  ])\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define([\"protobufjs/minimal\"], factory);\n\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require(\"protobufjs/minimal\"));\n\n})(this, function($protobuf) {\n    \"use strict\";\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Timestamp = (function() {\n    \n        /**\n         * Properties of a Timestamp.\n         * @exports ITimestamp\n         * @interface ITimestamp\n         * @property {number|null} [seconds] Timestamp seconds\n         * @property {number|null} [nanos] Timestamp nanos\n         */\n    \n        /**\n         * Constructs a new Timestamp.\n         * @exports Timestamp\n         * @classdesc Represents a Timestamp.\n         * @implements ITimestamp\n         * @constructor\n         * @param {ITimestamp=} [properties] Properties to set\n         */\n        function Timestamp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Timestamp seconds.\n         * @member {number} seconds\n         * @memberof Timestamp\n         * @instance\n         */\n        Timestamp.prototype.seconds = 0;\n    \n        /**\n         * Timestamp nanos.\n         * @member {number} nanos\n         * @memberof Timestamp\n         * @instance\n         */\n        Timestamp.prototype.nanos = 0;\n    \n        /**\n         * Creates a new Timestamp instance using the specified properties.\n         * @function create\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp=} [properties] Properties to set\n         * @returns {Timestamp} Timestamp instance\n         */\n        Timestamp.create = function create(properties) {\n            return new Timestamp(properties);\n        };\n    \n        /**\n         * Encodes the specified Timestamp message. Does not implicitly {@link Timestamp.verify|verify} messages.\n         * @function encode\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp} message Timestamp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Timestamp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seconds);\n            if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link Timestamp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp} message Timestamp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Timestamp message from the specified reader or buffer.\n         * @function decode\n         * @memberof Timestamp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Timestamp} Timestamp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Timestamp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Timestamp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.seconds = reader.int32();\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Timestamp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Timestamp} Timestamp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Timestamp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Timestamp message.\n         * @function verify\n         * @memberof Timestamp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Timestamp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                if (!$util.isInteger(message.seconds))\n                    return \"seconds: integer expected\";\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                if (!$util.isInteger(message.nanos))\n                    return \"nanos: integer expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Timestamp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Timestamp} Timestamp\n         */\n        Timestamp.fromObject = function fromObject(object) {\n            if (object instanceof $root.Timestamp)\n                return object;\n            var message = new $root.Timestamp();\n            if (object.seconds != null)\n                message.seconds = object.seconds | 0;\n            if (object.nanos != null)\n                message.nanos = object.nanos | 0;\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Timestamp\n         * @static\n         * @param {Timestamp} message Timestamp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Timestamp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.seconds = 0;\n                object.nanos = 0;\n            }\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                object.seconds = message.seconds;\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                object.nanos = message.nanos;\n            return object;\n        };\n    \n        /**\n         * Converts this Timestamp to JSON.\n         * @function toJSON\n         * @memberof Timestamp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Timestamp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Timestamp;\n    })();\n    \n    $root.Duration = (function() {\n    \n        /**\n         * Properties of a Duration.\n         * @exports IDuration\n         * @interface IDuration\n         * @property {number|null} [seconds] Duration seconds\n         * @property {number|null} [nanos] Duration nanos\n         */\n    \n        /**\n         * Constructs a new Duration.\n         * @exports Duration\n         * @classdesc Represents a Duration.\n         * @implements IDuration\n         * @constructor\n         * @param {IDuration=} [properties] Properties to set\n         */\n        function Duration(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Duration seconds.\n         * @member {number} seconds\n         * @memberof Duration\n         * @instance\n         */\n        Duration.prototype.seconds = 0;\n    \n        /**\n         * Duration nanos.\n         * @member {number} nanos\n         * @memberof Duration\n         * @instance\n         */\n        Duration.prototype.nanos = 0;\n    \n        /**\n         * Creates a new Duration instance using the specified properties.\n         * @function create\n         * @memberof Duration\n         * @static\n         * @param {IDuration=} [properties] Properties to set\n         * @returns {Duration} Duration instance\n         */\n        Duration.create = function create(properties) {\n            return new Duration(properties);\n        };\n    \n        /**\n         * Encodes the specified Duration message. Does not implicitly {@link Duration.verify|verify} messages.\n         * @function encode\n         * @memberof Duration\n         * @static\n         * @param {IDuration} message Duration message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Duration.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seconds);\n            if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Duration message, length delimited. Does not implicitly {@link Duration.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Duration\n         * @static\n         * @param {IDuration} message Duration message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Duration.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Duration message from the specified reader or buffer.\n         * @function decode\n         * @memberof Duration\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Duration} Duration\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Duration.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Duration();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.seconds = reader.int32();\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Duration message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Duration\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Duration} Duration\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Duration.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Duration message.\n         * @function verify\n         * @memberof Duration\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Duration.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                if (!$util.isInteger(message.seconds))\n                    return \"seconds: integer expected\";\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                if (!$util.isInteger(message.nanos))\n                    return \"nanos: integer expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Duration message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Duration\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Duration} Duration\n         */\n        Duration.fromObject = function fromObject(object) {\n            if (object instanceof $root.Duration)\n                return object;\n            var message = new $root.Duration();\n            if (object.seconds != null)\n                message.seconds = object.seconds | 0;\n            if (object.nanos != null)\n                message.nanos = object.nanos | 0;\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Duration message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Duration\n         * @static\n         * @param {Duration} message Duration\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Duration.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.seconds = 0;\n                object.nanos = 0;\n            }\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                object.seconds = message.seconds;\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                object.nanos = message.nanos;\n            return object;\n        };\n    \n        /**\n         * Converts this Duration to JSON.\n         * @function toJSON\n         * @memberof Duration\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Duration.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Duration;\n    })();\n    \n    $root.Story = (function() {\n    \n        /**\n         * Properties of a Story.\n         * @exports IStory\n         * @interface IStory\n         * @property {string|null} [id] Story id\n         * @property {string|null} [name] Story name\n         * @property {string|null} [description] Story description\n         * @property {IDuration|null} [duration] Story duration\n         * @property {Array.<string>|null} [relatedStoryIds] Story relatedStoryIds\n         */\n    \n        /**\n         * Constructs a new Story.\n         * @exports Story\n         * @classdesc Represents a Story.\n         * @implements IStory\n         * @constructor\n         * @param {IStory=} [properties] Properties to set\n         */\n        function Story(properties) {\n            this.relatedStoryIds = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Story id.\n         * @member {string} id\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.id = \"\";\n    \n        /**\n         * Story name.\n         * @member {string} name\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.name = \"\";\n    \n        /**\n         * Story description.\n         * @member {string} description\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.description = \"\";\n    \n        /**\n         * Story duration.\n         * @member {IDuration|null|undefined} duration\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.duration = null;\n    \n        /**\n         * Story relatedStoryIds.\n         * @member {Array.<string>} relatedStoryIds\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.relatedStoryIds = $util.emptyArray;\n    \n        /**\n         * Creates a new Story instance using the specified properties.\n         * @function create\n         * @memberof Story\n         * @static\n         * @param {IStory=} [properties] Properties to set\n         * @returns {Story} Story instance\n         */\n        Story.create = function create(properties) {\n            return new Story(properties);\n        };\n    \n        /**\n         * Encodes the specified Story message. Does not implicitly {@link Story.verify|verify} messages.\n         * @function encode\n         * @memberof Story\n         * @static\n         * @param {IStory} message Story message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Story.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.duration != null && Object.hasOwnProperty.call(message, \"duration\"))\n                $root.Duration.encode(message.duration, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.relatedStoryIds != null && message.relatedStoryIds.length)\n                for (var i = 0; i < message.relatedStoryIds.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.relatedStoryIds[i]);\n            if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Story message, length delimited. Does not implicitly {@link Story.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Story\n         * @static\n         * @param {IStory} message Story message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Story.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Story message from the specified reader or buffer.\n         * @function decode\n         * @memberof Story\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Story} Story\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Story.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Story();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.duration = $root.Duration.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.relatedStoryIds && message.relatedStoryIds.length))\n                        message.relatedStoryIds = [];\n                    message.relatedStoryIds.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Story message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Story\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Story} Story\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Story.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Story message.\n         * @function verify\n         * @memberof Story\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Story.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.description != null && message.hasOwnProperty(\"description\"))\n                if (!$util.isString(message.description))\n                    return \"description: string expected\";\n            if (message.duration != null && message.hasOwnProperty(\"duration\")) {\n                var error = $root.Duration.verify(message.duration);\n                if (error)\n                    return \"duration.\" + error;\n            }\n            if (message.relatedStoryIds != null && message.hasOwnProperty(\"relatedStoryIds\")) {\n                if (!Array.isArray(message.relatedStoryIds))\n                    return \"relatedStoryIds: array expected\";\n                for (var i = 0; i < message.relatedStoryIds.length; ++i)\n                    if (!$util.isString(message.relatedStoryIds[i]))\n                        return \"relatedStoryIds: string[] expected\";\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a Story message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Story\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Story} Story\n         */\n        Story.fromObject = function fromObject(object) {\n            if (object instanceof $root.Story)\n                return object;\n            var message = new $root.Story();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.description != null)\n                message.description = String(object.description);\n            if (object.duration != null) {\n                if (typeof object.duration !== \"object\")\n                    throw TypeError(\".Story.duration: object expected\");\n                message.duration = $root.Duration.fromObject(object.duration);\n            }\n            if (object.relatedStoryIds) {\n                if (!Array.isArray(object.relatedStoryIds))\n                    throw TypeError(\".Story.relatedStoryIds: array expected\");\n                message.relatedStoryIds = [];\n                for (var i = 0; i < object.relatedStoryIds.length; ++i)\n                    message.relatedStoryIds[i] = String(object.relatedStoryIds[i]);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Story message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Story\n         * @static\n         * @param {Story} message Story\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Story.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.relatedStoryIds = [];\n            if (options.defaults) {\n                object.id = \"\";\n                object.name = \"\";\n                object.duration = null;\n                object.description = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.duration != null && message.hasOwnProperty(\"duration\"))\n                object.duration = $root.Duration.toObject(message.duration, options);\n            if (message.relatedStoryIds && message.relatedStoryIds.length) {\n                object.relatedStoryIds = [];\n                for (var j = 0; j < message.relatedStoryIds.length; ++j)\n                    object.relatedStoryIds[j] = message.relatedStoryIds[j];\n            }\n            if (message.description != null && message.hasOwnProperty(\"description\"))\n                object.description = message.description;\n            return object;\n        };\n    \n        /**\n         * Converts this Story to JSON.\n         * @function toJSON\n         * @memberof Story\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Story.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Story;\n    })();\n    \n    $root.WritingWorkspace = (function() {\n    \n        /**\n         * Properties of a WritingWorkspace.\n         * @exports IWritingWorkspace\n         * @interface IWritingWorkspace\n         * @property {Array.<IStory>|null} [stories] WritingWorkspace stories\n         */\n    \n        /**\n         * Constructs a new WritingWorkspace.\n         * @exports WritingWorkspace\n         * @classdesc Represents a WritingWorkspace.\n         * @implements IWritingWorkspace\n         * @constructor\n         * @param {IWritingWorkspace=} [properties] Properties to set\n         */\n        function WritingWorkspace(properties) {\n            this.stories = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * WritingWorkspace stories.\n         * @member {Array.<IStory>} stories\n         * @memberof WritingWorkspace\n         * @instance\n         */\n        WritingWorkspace.prototype.stories = $util.emptyArray;\n    \n        /**\n         * Creates a new WritingWorkspace instance using the specified properties.\n         * @function create\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace=} [properties] Properties to set\n         * @returns {WritingWorkspace} WritingWorkspace instance\n         */\n        WritingWorkspace.create = function create(properties) {\n            return new WritingWorkspace(properties);\n        };\n    \n        /**\n         * Encodes the specified WritingWorkspace message. Does not implicitly {@link WritingWorkspace.verify|verify} messages.\n         * @function encode\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace} message WritingWorkspace message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WritingWorkspace.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.stories != null && message.stories.length)\n                for (var i = 0; i < message.stories.length; ++i)\n                    $root.Story.encode(message.stories[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified WritingWorkspace message, length delimited. Does not implicitly {@link WritingWorkspace.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace} message WritingWorkspace message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WritingWorkspace.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a WritingWorkspace message from the specified reader or buffer.\n         * @function decode\n         * @memberof WritingWorkspace\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {WritingWorkspace} WritingWorkspace\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WritingWorkspace.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WritingWorkspace();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.stories && message.stories.length))\n                        message.stories = [];\n                    message.stories.push($root.Story.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a WritingWorkspace message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof WritingWorkspace\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {WritingWorkspace} WritingWorkspace\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WritingWorkspace.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a WritingWorkspace message.\n         * @function verify\n         * @memberof WritingWorkspace\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WritingWorkspace.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.stories != null && message.hasOwnProperty(\"stories\")) {\n                if (!Array.isArray(message.stories))\n                    return \"stories: array expected\";\n                for (var i = 0; i < message.stories.length; ++i) {\n                    var error = $root.Story.verify(message.stories[i]);\n                    if (error)\n                        return \"stories.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a WritingWorkspace message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof WritingWorkspace\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {WritingWorkspace} WritingWorkspace\n         */\n        WritingWorkspace.fromObject = function fromObject(object) {\n            if (object instanceof $root.WritingWorkspace)\n                return object;\n            var message = new $root.WritingWorkspace();\n            if (object.stories) {\n                if (!Array.isArray(object.stories))\n                    throw TypeError(\".WritingWorkspace.stories: array expected\");\n                message.stories = [];\n                for (var i = 0; i < object.stories.length; ++i) {\n                    if (typeof object.stories[i] !== \"object\")\n                        throw TypeError(\".WritingWorkspace.stories: object expected\");\n                    message.stories[i] = $root.Story.fromObject(object.stories[i]);\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a WritingWorkspace message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof WritingWorkspace\n         * @static\n         * @param {WritingWorkspace} message WritingWorkspace\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WritingWorkspace.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.stories = [];\n            if (message.stories && message.stories.length) {\n                object.stories = [];\n                for (var j = 0; j < message.stories.length; ++j)\n                    object.stories[j] = $root.Story.toObject(message.stories[j], options);\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this WritingWorkspace to JSON.\n         * @function toJSON\n         * @memberof WritingWorkspace\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WritingWorkspace.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return WritingWorkspace;\n    })();\n\n    return $root;\n});\n"],"sourceRoot":""}