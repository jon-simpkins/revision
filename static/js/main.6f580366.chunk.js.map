{"version":3,"sources":["features/revision-header/RevisionHeader.tsx","features/storyList/StoryCard.tsx","features/storyList/storyListPersistence.ts","features/storyList/storyListSlice.ts","app/hooks.ts","pages/homepage/Homepage.tsx","features/storyDetails/StoryDetails.tsx","pages/story-details/StoryDetailsPage.tsx","pages/import-export/DataManagementPage.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx","protos_v2.js"],"names":["RevisionHeader","Menu","to","Item","header","Icon","name","Component","StoryCard","this","props","story","id","getCardUrl","Card","style","margin","Content","description","split","map","line","idx","allStoryIdsKey","storyKey","readAllStoriesFromStorage","readStoryIds","storyString","localStorage","getItem","Error","Story","create","JSON","parse","readStory","storyIdString","writeStoryIds","storyIds","setItem","stringify","writeStory","addStoryToStorage","allStoryIds","push","initialState","storyMap","forEach","toJSON","fetchInitialStateFromStorage","actionPrefix","storyListSlice","createSlice","reducers","createStory","state","action","payload","updateStory","removeStory","storyListPersistenceMiddleware","storeAPI","next","result","type","startsWith","handleStoryListPersistence","idToRemove","filter","removeItem","selectStoryMap","compiledStoryMap","Object","entries","storyList","key","value","fromObject","actions","useAppDispatch","useDispatch","useAppSelector","useSelector","getStorySection","values","length","Segment","display","flexWrap","Homepage","dispatch","history","useHistory","Group","Header","size","Subheader","flex","textAlign","Button","icon","color","onClick","newStory","uuid","StoryDetails","newName","onStoryChange","newDescription","onStoryDelete","Form","Field","Input","defaultValue","onChange","e","onNameChange","target","TextArea","rows","onDescriptionChange","StoryDetailsPage","match","params","fetchedStory","downloadWorkspace","filename","Date","now","fileDownload","workspace","WritingWorkspace","stories","encode","finish","loadDataFromStorage","files","a","text","fileData","loadDataToStorage","TextEncoder","window","location","reload","data","decode","clear","DataManagementPage","keys","accept","event","uploadWorkspace","App","path","component","store","configureStore","reducer","storyListReducer","middleware","getDefaultMiddleware","concat","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","define","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Timestamp","properties","i","prototype","seconds","Long","fromBits","nanos","writer","hasOwnProperty","call","uint32","int64","int32","encodeDelimited","ldelim","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","low","high","object","fromValue","unsigned","parseInt","LongBits","toNumber","toObject","options","defaults","long","longs","String","toString","Number","constructor","toJSONOptions","Duration","relatedStoryIds","duration","emptyArray","string","fork","isString","Array","isArray","TypeError","arrays","j"],"mappings":"8QAMqBA,E,4JAEnB,WACE,OACI,eAACC,EAAA,EAAD,WACE,cAAC,IAAD,CAAMC,GAAI,IAAV,SACE,cAACD,EAAA,EAAKE,KAAN,CAAWC,QAAM,EAAjB,wBAEF,cAAC,IAAD,CAAMF,GAAI,QAAV,SACE,cAACD,EAAA,EAAKE,KAAN,UACE,cAACE,EAAA,EAAD,CAAMC,KAAK,oB,GAVmBC,a,iBCKvBC,E,gKACnB,WACE,MAAO,UAAYC,KAAKC,MAAMC,MAAMC,K,oBAGtC,WACE,OACE,cAAC,IAAD,CAAMV,GAAIO,KAAKI,aAAf,SACE,eAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,OAAQ,OAAtB,UACE,cAACF,EAAA,EAAKG,QAAN,CAAcb,OAAQK,KAAKC,MAAMC,MAAML,OACvC,cAACQ,EAAA,EAAKG,QAAN,UAEGR,KAAKC,MAAMC,MAAMO,YAAYC,MAAM,MAAMC,KAAI,SAACC,EAAMC,GACnD,OAAQ,4BAAcD,GAANC,iB,GAbSf,a,qDCRjCgB,EAAiB,YAEvB,SAASC,EAASZ,GAChB,MAAM,SAAN,OAAgBA,GAGX,SAASa,IACd,OAAOC,IAAeN,KAAI,SAACR,GACzB,OAaJ,SAAmBA,GACjB,IAAIe,EAAcC,aAAaC,QAAQL,EAASZ,IAChD,IAAKe,EACH,MAAMG,MAAM,wBAAD,OAAyBlB,EAAzB,wBAGb,OAAOmB,QAAMC,OAAOC,KAAKC,MAAMP,IAnBtBQ,CAAUvB,MAIrB,SAASc,IACP,IAAIU,EAAgBR,aAAaC,QAAQN,IAAmB,KAC5D,OAAOU,KAAKC,MAAME,GAGpB,SAASC,EAAcC,GACrBV,aAAaW,QAAQhB,EAAgBU,KAAKO,UAAUF,IAY/C,SAASG,EAAW9B,GACzBiB,aAAaW,QAAQf,EAASb,EAAMC,IAAeqB,KAAKO,UAAU7B,IAG7D,SAAS+B,EAAkB/B,GAChC8B,EAAW9B,GAEX,IAAMgC,EAAcjB,IACpBiB,EAAYC,KAAKjC,EAAMC,IACvByB,EAAcM,GCvBhB,IAAME,EDoCC,WACL,IAAMA,EAAe,CACnBC,SAAU,IAMZ,OAJArB,IAA4BsB,SAAQ,SAACpC,GACnCkC,EAAaC,SAASnC,EAAMC,IAAMD,EAAMqC,YAGnCH,EC5CYI,GAEfC,EAAe,YAEfC,EAAiBC,YAAY,CACjC9C,KAAM4C,EACNL,eACAQ,SAAU,CACRC,YADQ,SACIC,EAAOC,GACjBD,EAAMT,SAASU,EAAOC,QAAQ7C,IAAgB4C,EAAOC,SAEvDC,YAJQ,SAIIH,EAAOC,GACjBD,EAAMT,SAASU,EAAOC,QAAQ7C,IAAgB4C,EAAOC,SAEvDE,YAPQ,SAOIJ,EAAOC,UACVD,EAAMT,SAASU,EAAOC,aAKtBG,EACP,SAAAC,GAAQ,OAAI,SAAAC,GAAI,OAAI,SAAAN,GACxB,IAAIO,EAASD,EAAKN,GAMlB,OAJIA,EAAOQ,KAAKC,WAAWf,eACzBgB,EAA2BV,GAGtBO,KAGIG,EAA6B,SAACV,GACzC,OAAQA,EAAOQ,MACb,IAAI,GAAJ,OAAQd,EAAR,gBACER,EAAkBc,EAAOC,SACzB,MACF,IAAI,GAAJ,OAAQP,EAAR,gBACET,EAAWe,EAAOC,SAClB,MACF,IAAI,GAAJ,OAAQP,EAAR,gBDbkCiB,ECcVX,EAAOC,QDXjCpB,EAFkBX,IAEQ0C,QAAO,SAACxD,GAChC,OAAOA,IAAOuD,MAGhBvC,aAAayC,WAAW7C,EAAS2C,IAP5B,IAA+BA,GCoBzBG,EAAiB,SAACf,GAG7B,IAFA,IAAMgB,EAA6B,GAEnC,MAA2BC,OAAOC,QAAQlB,EAAMmB,UAAU5B,UAA1D,eAAqE,CAAhE,0BAAO6B,EAAP,KAAYC,EAAZ,KACHL,EAAiBI,GAAO5C,QAAM8C,WAAWD,GAG3C,OAAOL,GAcF,EAAkDpB,EAAe2B,QAAzDxB,EAAR,EAAQA,YAAaI,EAArB,EAAqBA,YAAaC,EAAlC,EAAkCA,YAC1BR,IAAf,Q,QCnFa4B,EAAiB,kBAAMC,eACvBC,EAAkDC,I,SCW/D,SAASC,EAAgBrC,GACvB,IAAM4B,EAAYF,OAAOY,OAAOtC,GAEhC,OAAK4B,EAAUW,OAMR,cAACC,EAAA,EAAD,CAASvE,MAAO,CAACwE,QAAS,OAAQC,SAAU,QAA5C,SACJd,EAAUtD,KAAI,SAACT,EAAOW,GACrB,OACI,cAAC,EAAD,CAAqBX,MAAOA,GAAZW,QAPlB,cAACgE,EAAA,EAAD,qCAaO,SAASG,IACtB,IAAM3C,EAAWmC,EAAeX,GAC1BoB,EAAWX,IACXY,EAAUC,cAEhB,OACI,qBAAK7E,MAAO,CAACC,OAAQ,QAArB,SACE,eAACsE,EAAA,EAAQO,MAAT,WACE,eAACP,EAAA,EAAD,CAASvE,MAAO,CAACwE,QAAS,QAA1B,UACE,eAACO,EAAA,EAAD,CAAQC,KAAK,SAAb,uBACE,cAACD,EAAA,EAAOE,UAAR,kCAIF,qBAAKjF,MAAO,CAACkF,KAAM,EAAGC,UAAW,SAAjC,SACE,cAACC,EAAA,EAAD,CAAQC,MAAI,EAACC,MAAM,QACjBC,QAAS,WACP,IAAMC,EA1CfxE,QAAMC,OAAO,CAClBpB,GAAI4F,cACJlG,KAAM,YACNY,YAAa,4BACZ8B,SAuCa0C,EAASpC,EAAYiD,IACrBZ,EAAQ/C,KAAR,iBAAuB2D,EAAS3F,MAJpC,SAOE,cAACP,EAAA,EAAD,CAAMC,KAAK,eAIhB6E,EAAgBrC,Q,+BClDN2D,E,kKACnB,SAAaC,GACX,IAAM/F,EAAQF,KAAKC,MAAMC,MAEzBA,EAAML,KAAOoG,EACbjG,KAAKC,MAAMiG,cAAchG,K,iCAG3B,SAAoBiG,GAClB,IAAMjG,EAAQF,KAAKC,MAAMC,MAEzBA,EAAMO,YAAc0F,EACpBnG,KAAKC,MAAMiG,cAAchG,K,oBAG3B,WAAU,IAAD,OACP,OAAKF,KAAKC,MAAMC,MAOd,eAAC2E,EAAA,EAAQO,MAAT,CAAe9E,MAAO,CAACC,OAAQ,QAA/B,UACE,eAACsE,EAAA,EAAD,CAASvE,MAAO,CAACwE,QAAS,QAA1B,UACE,eAACO,EAAA,EAAD,2BAEE,cAACA,EAAA,EAAOE,UAAR,2DAKF,qBAAKjF,MAAO,CAACkF,KAAM,EAAGC,UAAW,SAAjC,SACE,cAACC,EAAA,EAAD,CAAQC,MAAI,EAACC,MAAM,MACjBC,QAAS,kBAAM,EAAK5F,MAAMmG,iBAD5B,SAGE,cAACxG,EAAA,EAAD,CAAMC,KAAK,kBAIjB,cAACgF,EAAA,EAAD,UACE,eAACwB,EAAA,EAAD,WACE,eAACA,EAAA,EAAKC,MAAN,WACE,+CACA,cAACC,EAAA,EAAD,CACIC,aAAcxG,KAAKC,MAAMC,MAAML,KAC/B4G,SAAU,SAACC,GAAD,OAAO,EAAKC,aAAaD,EAAEE,OAAOzC,aAGlD,eAACkC,EAAA,EAAKC,MAAN,WACE,sDACA,cAACO,EAAA,EAAD,CACIC,KAAM,EACNN,aAAcxG,KAAKC,MAAMC,MAAMO,YAC/BgG,SAAU,SAACC,GAAD,OAAO,EAAKK,oBAAoBL,EAAEE,OAAOzC,qBApC3D,mE,GAlBgCrE,aCG3B,SAASkH,EAAkB/G,GAA2B,IAAD,EJ+DhCE,EI9D5BD,EAAQsE,GJ8DoBrE,EI9Dc,UAACF,EAAMgH,MAAMC,cAAb,aAAC,EAAoB/G,GJ8DpB,SAAC2C,GAClD,IAAMqE,EAAerE,EAAMmB,UAAU5B,SAASlC,GAE9C,OAAKgH,EAIE7F,QAAMC,OAAO4F,GAHX,QIjEHlC,EAAWX,IACXY,EAAUC,cAEhB,OACE,cAAC,EAAD,CACEjF,MAAOA,EACPgG,cAAe,SAAChG,GAAD,OAAW+E,EAAShC,EAAY/C,EAAMqC,YACrD6D,cAAe,WACbnB,EAAS/B,EAAahD,EAAgBC,KACtC+E,EAAQ/C,KAAK,Q,wDCXrB,SAASiF,KACP,IAAMC,EAAW,qBAAuBC,KAAKC,MAAQ,SAErDC,KAeK,WACL,IAAMC,EAAYC,mBAAiBnG,OAAO,CACxCoG,QAAS3G,MAGX,OAAO0G,mBAAiBE,OAAOH,GAAWI,SApB7BC,GAAuBT,G,gDAGtC,WAA+BU,GAA/B,gBAAAC,EAAA,yDACOD,EADP,iEAKyBA,EAAM,GAAGE,OALlC,OAKQC,EALR,OAOEC,IADmB,IAAIC,aAAcR,OAAOM,IAG5CG,OAAOC,SAASC,SATlB,4C,sBAoBO,SAASJ,GAAkBK,GAChC,IAAMf,EAAYC,mBAAiBe,OAAOD,GAE1CrH,aAAauH,QAEbjB,EAAUE,QAAQrF,SAAQ,SAACpC,GACzB+B,EAAkB/B,MAKP,SAASyI,KACtB,IAAMtG,EAAWmC,EAAeX,GAEhC,OACI,qBAAKvD,MAAO,CAACC,OAAQ,QAArB,SACE,eAACsE,EAAA,EAAQO,MAAT,WACE,cAACP,EAAA,EAAD,CAASvE,MAAO,CAACwE,QAAS,QAA1B,SACE,eAACO,EAAA,EAAD,CAAQC,KAAK,SAAb,4BACE,cAACD,EAAA,EAAOE,UAAR,uDAKJ,eAACV,EAAA,EAAD,WACGd,OAAO6E,KAAKvG,GAAUuC,OADzB,cAGA,eAACC,EAAA,EAAD,WACE,cAACa,EAAA,EAAD,CAAQE,MAAM,QACNC,QAAS,WAAOuB,MADxB,gCAIA,cAAC1B,EAAA,EAAD,CAAQE,MAAM,MACNC,QAAS,WA/D3B1E,aAAauH,QACbL,OAAOC,SAASC,UA6DN,gCAKF,eAAC1D,EAAA,EAAD,WACE,cAACQ,EAAA,EAAD,CAAQC,KAAK,QAAb,8BACA,uBAAO/B,KAAK,OAAOsF,OAAO,SAASpC,SAAU,SAACqC,GAAD,O,4CAAWC,CAAgBD,EAAMlC,OAAOmB,kBCpDlFiB,OAbf,WACE,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWP,KAC/B,cAAC,IAAD,CAAOM,KAAK,aAAaC,UAAWlC,IACpC,cAAC,IAAD,CAAOiC,KAAK,IAAIC,UAAWlE,WCjBtBmE,GAAQC,YAAe,CAClCC,QAAS,CACPpF,UAAWqF,GAEbC,WAAY,SAACC,GAAD,OAA0BA,IAAuBC,OAAO,CAChEtG,OCIcuG,QACW,cAA7BrB,OAAOC,SAASqB,UAEe,UAA7BtB,OAAOC,SAASqB,UAEhBtB,OAAOC,SAASqB,SAAS1C,MACvB,2D,OCTN2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUX,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJY,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC,GACNC,QAAQD,MAAMA,EAAME,a,mBE9I5B,UAIQC,EAAO,CAAC,aAAF,6BAKL,SAASC,GACd,aAGA,IAAIC,EAAUD,EAAUE,OAAQC,EAAUH,EAAUI,OAAQC,EAAQL,EAAUM,KAG1EC,EAAQP,EAAUQ,MAAV,UAA+BR,EAAUQ,MAAV,QAA6B,IA47BxE,OA17BAD,EAAME,UAAa,WAkBf,SAASA,EAAUC,GACf,GAAIA,EACA,IAAK,IAAI1C,EAAO7E,OAAO6E,KAAK0C,GAAaC,EAAI,EAAGA,EAAI3C,EAAKhE,SAAU2G,EACpC,MAAvBD,EAAW1C,EAAK2C,MAChBvL,KAAK4I,EAAK2C,IAAMD,EAAW1C,EAAK2C,KAuMhD,OA9LAF,EAAUG,UAAUC,QAAUR,EAAMS,KAAOT,EAAMS,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ5EN,EAAUG,UAAUI,MAAQ,EAU5BP,EAAU9J,OAAS,SAAgB+J,GAC/B,OAAO,IAAID,EAAUC,IAYzBD,EAAUzD,OAAS,SAAgB8C,EAASmB,GAOxC,OANKA,IACDA,EAASd,EAAQxJ,UACE,MAAnBmJ,EAAQe,SAAmB1H,OAAO+H,eAAeC,KAAKrB,EAAS,YAC/DmB,EAAOG,OAA8B,GAAGC,MAAMvB,EAAQe,SACrC,MAAjBf,EAAQkB,OAAiB7H,OAAO+H,eAAeC,KAAKrB,EAAS,UAC7DmB,EAAOG,OAA8B,IAAIE,MAAMxB,EAAQkB,OACpDC,GAYXR,EAAUc,gBAAkB,SAAyBzB,EAASmB,GAC1D,OAAO7L,KAAK4H,OAAO8C,EAASmB,GAAQO,UAcxCf,EAAU5C,OAAS,SAAgB4D,EAAQzH,GACjCyH,aAAkBxB,IACpBwB,EAASxB,EAAQtJ,OAAO8K,IAE5B,IADA,IAAIC,OAAiBC,IAAX3H,EAAuByH,EAAOG,IAAMH,EAAOI,IAAM7H,EAAQ8F,EAAU,IAAIS,EAAME,UAChFgB,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDhC,EAAQe,QAAUY,EAAOJ,QACzB,MACJ,KAAK,EACDvB,EAAQkB,MAAQS,EAAOH,QACvB,MACJ,QACIG,EAAOM,SAAe,EAAND,IAIxB,OAAOhC,GAaXW,EAAUuB,gBAAkB,SAAyBP,GAGjD,OAFMA,aAAkBxB,IACpBwB,EAAS,IAAIxB,EAAQwB,IAClBrM,KAAKyI,OAAO4D,EAAQA,EAAOL,WAWtCX,EAAUwB,OAAS,SAAgBnC,GAC/B,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACY,MAAnBA,EAAQe,UAAmBf,EAAQoB,eAAe,YAC7Cb,EAAM6B,UAAUpC,EAAQe,UAAcf,EAAQe,SAAWR,EAAM6B,UAAUpC,EAAQe,QAAQsB,MAAQ9B,EAAM6B,UAAUpC,EAAQe,QAAQuB,MAErH,MAAjBtC,EAAQkB,OAAiBlB,EAAQoB,eAAe,WAC3Cb,EAAM6B,UAAUpC,EAAQkB,OAClB,0BACR,KAJQ,kCAenBP,EAAUjH,WAAa,SAAoB6I,GACvC,GAAIA,aAAkB9B,EAAME,UACxB,OAAO4B,EACX,IAAIvC,EAAU,IAAIS,EAAME,UAYxB,OAXsB,MAAlB4B,EAAOxB,UACHR,EAAMS,MACLhB,EAAQe,QAAUR,EAAMS,KAAKwB,UAAUD,EAAOxB,UAAU0B,UAAW,EACrC,kBAAnBF,EAAOxB,QACnBf,EAAQe,QAAU2B,SAASH,EAAOxB,QAAS,IACZ,kBAAnBwB,EAAOxB,QACnBf,EAAQe,QAAUwB,EAAOxB,QACM,kBAAnBwB,EAAOxB,UACnBf,EAAQe,QAAU,IAAIR,EAAMoC,SAASJ,EAAOxB,QAAQsB,MAAQ,EAAGE,EAAOxB,QAAQuB,OAAS,GAAGM,aAC9E,MAAhBL,EAAOrB,QACPlB,EAAQkB,MAAuB,EAAfqB,EAAOrB,OACpBlB,GAYXW,EAAUkC,SAAW,SAAkB7C,EAAS8C,GACvCA,IACDA,EAAU,IACd,IAAIP,EAAS,GACb,GAAIO,EAAQC,SAAU,CAClB,GAAIxC,EAAMS,KAAM,CACZ,IAAIgC,EAAO,IAAIzC,EAAMS,KAAK,EAAG,GAAG,GAChCuB,EAAOxB,QAAU+B,EAAQG,QAAUC,OAASF,EAAKG,WAAaL,EAAQG,QAAUG,OAASJ,EAAKJ,WAAaI,OAE3GT,EAAOxB,QAAU+B,EAAQG,QAAUC,OAAS,IAAM,EACtDX,EAAOrB,MAAQ,EASnB,OAPuB,MAAnBlB,EAAQe,SAAmBf,EAAQoB,eAAe,aACnB,kBAApBpB,EAAQe,QACfwB,EAAOxB,QAAU+B,EAAQG,QAAUC,OAASA,OAAOlD,EAAQe,SAAWf,EAAQe,QAE9EwB,EAAOxB,QAAU+B,EAAQG,QAAUC,OAAS3C,EAAMS,KAAKF,UAAUqC,SAAS9B,KAAKrB,EAAQe,SAAW+B,EAAQG,QAAUG,OAAS,IAAI7C,EAAMoC,SAAS3C,EAAQe,QAAQsB,MAAQ,EAAGrC,EAAQe,QAAQuB,OAAS,GAAGM,WAAa5C,EAAQe,SAC/M,MAAjBf,EAAQkB,OAAiBlB,EAAQoB,eAAe,WAChDmB,EAAOrB,MAAQlB,EAAQkB,OACpBqB,GAUX5B,EAAUG,UAAUjJ,OAAS,WACzB,OAAOvC,KAAK+N,YAAYR,SAASvN,KAAM4K,EAAUM,KAAK8C,gBAGnD3C,EA7NQ,GAgOnBF,EAAM8C,SAAY,WAkBd,SAASA,EAAS3C,GACd,GAAIA,EACA,IAAK,IAAI1C,EAAO7E,OAAO6E,KAAK0C,GAAaC,EAAI,EAAGA,EAAI3C,EAAKhE,SAAU2G,EACpC,MAAvBD,EAAW1C,EAAK2C,MAChBvL,KAAK4I,EAAK2C,IAAMD,EAAW1C,EAAK2C,KAuMhD,OA9LA0C,EAASzC,UAAUC,QAAUR,EAAMS,KAAOT,EAAMS,KAAKC,SAAS,EAAE,GAAE,GAAS,EAQ3EsC,EAASzC,UAAUI,MAAQ,EAU3BqC,EAAS1M,OAAS,SAAgB+J,GAC9B,OAAO,IAAI2C,EAAS3C,IAYxB2C,EAASrG,OAAS,SAAgB8C,EAASmB,GAOvC,OANKA,IACDA,EAASd,EAAQxJ,UACE,MAAnBmJ,EAAQe,SAAmB1H,OAAO+H,eAAeC,KAAKrB,EAAS,YAC/DmB,EAAOG,OAA8B,GAAGC,MAAMvB,EAAQe,SACrC,MAAjBf,EAAQkB,OAAiB7H,OAAO+H,eAAeC,KAAKrB,EAAS,UAC7DmB,EAAOG,OAA8B,IAAIE,MAAMxB,EAAQkB,OACpDC,GAYXoC,EAAS9B,gBAAkB,SAAyBzB,EAASmB,GACzD,OAAO7L,KAAK4H,OAAO8C,EAASmB,GAAQO,UAcxC6B,EAASxF,OAAS,SAAgB4D,EAAQzH,GAChCyH,aAAkBxB,IACpBwB,EAASxB,EAAQtJ,OAAO8K,IAE5B,IADA,IAAIC,OAAiBC,IAAX3H,EAAuByH,EAAOG,IAAMH,EAAOI,IAAM7H,EAAQ8F,EAAU,IAAIS,EAAM8C,SAChF5B,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDhC,EAAQe,QAAUY,EAAOJ,QACzB,MACJ,KAAK,EACDvB,EAAQkB,MAAQS,EAAOH,QACvB,MACJ,QACIG,EAAOM,SAAe,EAAND,IAIxB,OAAOhC,GAaXuD,EAASrB,gBAAkB,SAAyBP,GAGhD,OAFMA,aAAkBxB,IACpBwB,EAAS,IAAIxB,EAAQwB,IAClBrM,KAAKyI,OAAO4D,EAAQA,EAAOL,WAWtCiC,EAASpB,OAAS,SAAgBnC,GAC9B,MAAuB,kBAAZA,GAAoC,OAAZA,EACxB,kBACY,MAAnBA,EAAQe,UAAmBf,EAAQoB,eAAe,YAC7Cb,EAAM6B,UAAUpC,EAAQe,UAAcf,EAAQe,SAAWR,EAAM6B,UAAUpC,EAAQe,QAAQsB,MAAQ9B,EAAM6B,UAAUpC,EAAQe,QAAQuB,MAErH,MAAjBtC,EAAQkB,OAAiBlB,EAAQoB,eAAe,WAC3Cb,EAAM6B,UAAUpC,EAAQkB,OAClB,0BACR,KAJQ,kCAenBqC,EAAS7J,WAAa,SAAoB6I,GACtC,GAAIA,aAAkB9B,EAAM8C,SACxB,OAAOhB,EACX,IAAIvC,EAAU,IAAIS,EAAM8C,SAYxB,OAXsB,MAAlBhB,EAAOxB,UACHR,EAAMS,MACLhB,EAAQe,QAAUR,EAAMS,KAAKwB,UAAUD,EAAOxB,UAAU0B,UAAW,EACrC,kBAAnBF,EAAOxB,QACnBf,EAAQe,QAAU2B,SAASH,EAAOxB,QAAS,IACZ,kBAAnBwB,EAAOxB,QACnBf,EAAQe,QAAUwB,EAAOxB,QACM,kBAAnBwB,EAAOxB,UACnBf,EAAQe,QAAU,IAAIR,EAAMoC,SAASJ,EAAOxB,QAAQsB,MAAQ,EAAGE,EAAOxB,QAAQuB,OAAS,GAAGM,aAC9E,MAAhBL,EAAOrB,QACPlB,EAAQkB,MAAuB,EAAfqB,EAAOrB,OACpBlB,GAYXuD,EAASV,SAAW,SAAkB7C,EAAS8C,GACtCA,IACDA,EAAU,IACd,IAAIP,EAAS,GACb,GAAIO,EAAQC,SAAU,CAClB,GAAIxC,EAAMS,KAAM,CACZ,IAAIgC,EAAO,IAAIzC,EAAMS,KAAK,EAAG,GAAG,GAChCuB,EAAOxB,QAAU+B,EAAQG,QAAUC,OAASF,EAAKG,WAAaL,EAAQG,QAAUG,OAASJ,EAAKJ,WAAaI,OAE3GT,EAAOxB,QAAU+B,EAAQG,QAAUC,OAAS,IAAM,EACtDX,EAAOrB,MAAQ,EASnB,OAPuB,MAAnBlB,EAAQe,SAAmBf,EAAQoB,eAAe,aACnB,kBAApBpB,EAAQe,QACfwB,EAAOxB,QAAU+B,EAAQG,QAAUC,OAASA,OAAOlD,EAAQe,SAAWf,EAAQe,QAE9EwB,EAAOxB,QAAU+B,EAAQG,QAAUC,OAAS3C,EAAMS,KAAKF,UAAUqC,SAAS9B,KAAKrB,EAAQe,SAAW+B,EAAQG,QAAUG,OAAS,IAAI7C,EAAMoC,SAAS3C,EAAQe,QAAQsB,MAAQ,EAAGrC,EAAQe,QAAQuB,OAAS,GAAGM,WAAa5C,EAAQe,SAC/M,MAAjBf,EAAQkB,OAAiBlB,EAAQoB,eAAe,WAChDmB,EAAOrB,MAAQlB,EAAQkB,OACpBqB,GAUXgB,EAASzC,UAAUjJ,OAAS,WACxB,OAAOvC,KAAK+N,YAAYR,SAASvN,KAAM4K,EAAUM,KAAK8C,gBAGnDC,EA7NO,GAgOlB9C,EAAM7J,MAAS,WAqBX,SAASA,EAAMgK,GAEX,GADAtL,KAAKkO,gBAAkB,GACnB5C,EACA,IAAK,IAAI1C,EAAO7E,OAAO6E,KAAK0C,GAAaC,EAAI,EAAGA,EAAI3C,EAAKhE,SAAU2G,EACpC,MAAvBD,EAAW1C,EAAK2C,MAChBvL,KAAK4I,EAAK2C,IAAMD,EAAW1C,EAAK2C,KA6QhD,OApQAjK,EAAMkK,UAAUrL,GAAK,GAQrBmB,EAAMkK,UAAU3L,KAAO,GAQvByB,EAAMkK,UAAU/K,YAAc,GAQ9Ba,EAAMkK,UAAU2C,SAAW,KAQ3B7M,EAAMkK,UAAU0C,gBAAkBjD,EAAMmD,WAUxC9M,EAAMC,OAAS,SAAgB+J,GAC3B,OAAO,IAAIhK,EAAMgK,IAYrBhK,EAAMsG,OAAS,SAAgB8C,EAASmB,GASpC,GARKA,IACDA,EAASd,EAAQxJ,UACH,MAAdmJ,EAAQvK,IAAc4D,OAAO+H,eAAeC,KAAKrB,EAAS,OAC1DmB,EAAOG,OAA8B,IAAIqC,OAAO3D,EAAQvK,IACxC,MAAhBuK,EAAQ7K,MAAgBkE,OAAO+H,eAAeC,KAAKrB,EAAS,SAC5DmB,EAAOG,OAA8B,IAAIqC,OAAO3D,EAAQ7K,MACpC,MAApB6K,EAAQyD,UAAoBpK,OAAO+H,eAAeC,KAAKrB,EAAS,aAChES,EAAM8C,SAASrG,OAAO8C,EAAQyD,SAAUtC,EAAOG,OAA8B,IAAIsC,QAAQlC,SAC9D,MAA3B1B,EAAQwD,iBAA2BxD,EAAQwD,gBAAgBtJ,OAC3D,IAAK,IAAI2G,EAAI,EAAGA,EAAIb,EAAQwD,gBAAgBtJ,SAAU2G,EAClDM,EAAOG,OAA8B,IAAIqC,OAAO3D,EAAQwD,gBAAgB3C,IAGhF,OAF2B,MAAvBb,EAAQjK,aAAuBsD,OAAO+H,eAAeC,KAAKrB,EAAS,gBACnEmB,EAAOG,OAA8B,IAAIqC,OAAO3D,EAAQjK,aACrDoL,GAYXvK,EAAM6K,gBAAkB,SAAyBzB,EAASmB,GACtD,OAAO7L,KAAK4H,OAAO8C,EAASmB,GAAQO,UAcxC9K,EAAMmH,OAAS,SAAgB4D,EAAQzH,GAC7ByH,aAAkBxB,IACpBwB,EAASxB,EAAQtJ,OAAO8K,IAE5B,IADA,IAAIC,OAAiBC,IAAX3H,EAAuByH,EAAOG,IAAMH,EAAOI,IAAM7H,EAAQ8F,EAAU,IAAIS,EAAM7J,MAChF+K,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACDhC,EAAQvK,GAAKkM,EAAOgC,SACpB,MACJ,KAAK,EACD3D,EAAQ7K,KAAOwM,EAAOgC,SACtB,MACJ,KAAK,EACD3D,EAAQjK,YAAc4L,EAAOgC,SAC7B,MACJ,KAAK,EACD3D,EAAQyD,SAAWhD,EAAM8C,SAASxF,OAAO4D,EAAQA,EAAOL,UACxD,MACJ,KAAK,EACKtB,EAAQwD,iBAAmBxD,EAAQwD,gBAAgBtJ,SACrD8F,EAAQwD,gBAAkB,IAC9BxD,EAAQwD,gBAAgB/L,KAAKkK,EAAOgC,UACpC,MACJ,QACIhC,EAAOM,SAAe,EAAND,IAIxB,OAAOhC,GAaXpJ,EAAMsL,gBAAkB,SAAyBP,GAG7C,OAFMA,aAAkBxB,IACpBwB,EAAS,IAAIxB,EAAQwB,IAClBrM,KAAKyI,OAAO4D,EAAQA,EAAOL,WAWtC1K,EAAMuL,OAAS,SAAgBnC,GAC3B,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAkB,MAAdA,EAAQvK,IAAcuK,EAAQoB,eAAe,QACxCb,EAAMsD,SAAS7D,EAAQvK,IACxB,MAAO,sBACf,GAAoB,MAAhBuK,EAAQ7K,MAAgB6K,EAAQoB,eAAe,UAC1Cb,EAAMsD,SAAS7D,EAAQ7K,MACxB,MAAO,wBACf,GAA2B,MAAvB6K,EAAQjK,aAAuBiK,EAAQoB,eAAe,iBACjDb,EAAMsD,SAAS7D,EAAQjK,aACxB,MAAO,+BACf,GAAwB,MAApBiK,EAAQyD,UAAoBzD,EAAQoB,eAAe,YAAa,CAChE,IAAItB,EAAQW,EAAM8C,SAASpB,OAAOnC,EAAQyD,UAC1C,GAAI3D,EACA,MAAO,YAAcA,EAE7B,GAA+B,MAA3BE,EAAQwD,iBAA2BxD,EAAQoB,eAAe,mBAAoB,CAC9E,IAAK0C,MAAMC,QAAQ/D,EAAQwD,iBACvB,MAAO,kCACX,IAAK,IAAI3C,EAAI,EAAGA,EAAIb,EAAQwD,gBAAgBtJ,SAAU2G,EAClD,IAAKN,EAAMsD,SAAS7D,EAAQwD,gBAAgB3C,IACxC,MAAO,qCAEnB,OAAO,MAWXjK,EAAM8C,WAAa,SAAoB6I,GACnC,GAAIA,aAAkB9B,EAAM7J,MACxB,OAAO2L,EACX,IAAIvC,EAAU,IAAIS,EAAM7J,MAOxB,GANiB,MAAb2L,EAAO9M,KACPuK,EAAQvK,GAAKyN,OAAOX,EAAO9M,KACZ,MAAf8M,EAAOpN,OACP6K,EAAQ7K,KAAO+N,OAAOX,EAAOpN,OACP,MAAtBoN,EAAOxM,cACPiK,EAAQjK,YAAcmN,OAAOX,EAAOxM,cACjB,MAAnBwM,EAAOkB,SAAkB,CACzB,GAA+B,kBAApBlB,EAAOkB,SACd,MAAMO,UAAU,oCACpBhE,EAAQyD,SAAWhD,EAAM8C,SAAS7J,WAAW6I,EAAOkB,UAExD,GAAIlB,EAAOiB,gBAAiB,CACxB,IAAKM,MAAMC,QAAQxB,EAAOiB,iBACtB,MAAMQ,UAAU,0CACpBhE,EAAQwD,gBAAkB,GAC1B,IAAK,IAAI3C,EAAI,EAAGA,EAAI0B,EAAOiB,gBAAgBtJ,SAAU2G,EACjDb,EAAQwD,gBAAgB3C,GAAKqC,OAAOX,EAAOiB,gBAAgB3C,IAEnE,OAAOb,GAYXpJ,EAAMiM,SAAW,SAAkB7C,EAAS8C,GACnCA,IACDA,EAAU,IACd,IAAIP,EAAS,GAeb,IAdIO,EAAQmB,QAAUnB,EAAQC,YAC1BR,EAAOiB,gBAAkB,IACzBV,EAAQC,WACRR,EAAO9M,GAAK,GACZ8M,EAAOpN,KAAO,GACdoN,EAAOkB,SAAW,KAClBlB,EAAOxM,YAAc,IAEP,MAAdiK,EAAQvK,IAAcuK,EAAQoB,eAAe,QAC7CmB,EAAO9M,GAAKuK,EAAQvK,IACJ,MAAhBuK,EAAQ7K,MAAgB6K,EAAQoB,eAAe,UAC/CmB,EAAOpN,KAAO6K,EAAQ7K,MACF,MAApB6K,EAAQyD,UAAoBzD,EAAQoB,eAAe,cACnDmB,EAAOkB,SAAWhD,EAAM8C,SAASV,SAAS7C,EAAQyD,SAAUX,IAC5D9C,EAAQwD,iBAAmBxD,EAAQwD,gBAAgBtJ,OAAQ,CAC3DqI,EAAOiB,gBAAkB,GACzB,IAAK,IAAIU,EAAI,EAAGA,EAAIlE,EAAQwD,gBAAgBtJ,SAAUgK,EAClD3B,EAAOiB,gBAAgBU,GAAKlE,EAAQwD,gBAAgBU,GAI5D,OAF2B,MAAvBlE,EAAQjK,aAAuBiK,EAAQoB,eAAe,iBACtDmB,EAAOxM,YAAciK,EAAQjK,aAC1BwM,GAUX3L,EAAMkK,UAAUjJ,OAAS,WACrB,OAAOvC,KAAK+N,YAAYR,SAASvN,KAAM4K,EAAUM,KAAK8C,gBAGnD1M,EAvSI,GA0Sf6J,EAAMzD,iBAAoB,WAiBtB,SAASA,EAAiB4D,GAEtB,GADAtL,KAAK2H,QAAU,GACX2D,EACA,IAAK,IAAI1C,EAAO7E,OAAO6E,KAAK0C,GAAaC,EAAI,EAAGA,EAAI3C,EAAKhE,SAAU2G,EACpC,MAAvBD,EAAW1C,EAAK2C,MAChBvL,KAAK4I,EAAK2C,IAAMD,EAAW1C,EAAK2C,KAuLhD,OA9KA7D,EAAiB8D,UAAU7D,QAAUsD,EAAMmD,WAU3C1G,EAAiBnG,OAAS,SAAgB+J,GACtC,OAAO,IAAI5D,EAAiB4D,IAYhC5D,EAAiBE,OAAS,SAAgB8C,EAASmB,GAG/C,GAFKA,IACDA,EAASd,EAAQxJ,UACE,MAAnBmJ,EAAQ/C,SAAmB+C,EAAQ/C,QAAQ/C,OAC3C,IAAK,IAAI2G,EAAI,EAAGA,EAAIb,EAAQ/C,QAAQ/C,SAAU2G,EAC1CJ,EAAM7J,MAAMsG,OAAO8C,EAAQ/C,QAAQ4D,GAAIM,EAAOG,OAA8B,IAAIsC,QAAQlC,SAChG,OAAOP,GAYXnE,EAAiByE,gBAAkB,SAAyBzB,EAASmB,GACjE,OAAO7L,KAAK4H,OAAO8C,EAASmB,GAAQO,UAcxC1E,EAAiBe,OAAS,SAAgB4D,EAAQzH,GACxCyH,aAAkBxB,IACpBwB,EAASxB,EAAQtJ,OAAO8K,IAE5B,IADA,IAAIC,OAAiBC,IAAX3H,EAAuByH,EAAOG,IAAMH,EAAOI,IAAM7H,EAAQ8F,EAAU,IAAIS,EAAMzD,iBAChF2E,EAAOI,IAAMH,GAAK,CACrB,IAAII,EAAML,EAAOL,SACjB,OAAQU,IAAQ,GAChB,KAAK,EACKhC,EAAQ/C,SAAW+C,EAAQ/C,QAAQ/C,SACrC8F,EAAQ/C,QAAU,IACtB+C,EAAQ/C,QAAQxF,KAAKgJ,EAAM7J,MAAMmH,OAAO4D,EAAQA,EAAOL,WACvD,MACJ,QACIK,EAAOM,SAAe,EAAND,IAIxB,OAAOhC,GAaXhD,EAAiBkF,gBAAkB,SAAyBP,GAGxD,OAFMA,aAAkBxB,IACpBwB,EAAS,IAAIxB,EAAQwB,IAClBrM,KAAKyI,OAAO4D,EAAQA,EAAOL,WAWtCtE,EAAiBmF,OAAS,SAAgBnC,GACtC,GAAuB,kBAAZA,GAAoC,OAAZA,EAC/B,MAAO,kBACX,GAAuB,MAAnBA,EAAQ/C,SAAmB+C,EAAQoB,eAAe,WAAY,CAC9D,IAAK0C,MAAMC,QAAQ/D,EAAQ/C,SACvB,MAAO,0BACX,IAAK,IAAI4D,EAAI,EAAGA,EAAIb,EAAQ/C,QAAQ/C,SAAU2G,EAAG,CAC7C,IAAIf,EAAQW,EAAM7J,MAAMuL,OAAOnC,EAAQ/C,QAAQ4D,IAC/C,GAAIf,EACA,MAAO,WAAaA,GAGhC,OAAO,MAWX9C,EAAiBtD,WAAa,SAAoB6I,GAC9C,GAAIA,aAAkB9B,EAAMzD,iBACxB,OAAOuF,EACX,IAAIvC,EAAU,IAAIS,EAAMzD,iBACxB,GAAIuF,EAAOtF,QAAS,CAChB,IAAK6G,MAAMC,QAAQxB,EAAOtF,SACtB,MAAM+G,UAAU,6CACpBhE,EAAQ/C,QAAU,GAClB,IAAK,IAAI4D,EAAI,EAAGA,EAAI0B,EAAOtF,QAAQ/C,SAAU2G,EAAG,CAC5C,GAAiC,kBAAtB0B,EAAOtF,QAAQ4D,GACtB,MAAMmD,UAAU,8CACpBhE,EAAQ/C,QAAQ4D,GAAKJ,EAAM7J,MAAM8C,WAAW6I,EAAOtF,QAAQ4D,KAGnE,OAAOb,GAYXhD,EAAiB6F,SAAW,SAAkB7C,EAAS8C,GAC9CA,IACDA,EAAU,IACd,IAAIP,EAAS,GAGb,IAFIO,EAAQmB,QAAUnB,EAAQC,YAC1BR,EAAOtF,QAAU,IACjB+C,EAAQ/C,SAAW+C,EAAQ/C,QAAQ/C,OAAQ,CAC3CqI,EAAOtF,QAAU,GACjB,IAAK,IAAIiH,EAAI,EAAGA,EAAIlE,EAAQ/C,QAAQ/C,SAAUgK,EAC1C3B,EAAOtF,QAAQiH,GAAKzD,EAAM7J,MAAMiM,SAAS7C,EAAQ/C,QAAQiH,GAAIpB,GAErE,OAAOP,GAUXvF,EAAiB8D,UAAUjJ,OAAS,WAChC,OAAOvC,KAAK+N,YAAYR,SAASvN,KAAM4K,EAAUM,KAAK8C,gBAGnDtG,EA7Me,GAgNnByD,IAx8BG,iC","file":"static/js/main.6f580366.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {\n  Link\n} from 'react-router-dom';\nimport {Icon, Menu} from 'semantic-ui-react';\n\nexport default class RevisionHeader extends Component {\n\n  render() {\n    return (\n        <Menu>\n          <Link to={'/'}>\n            <Menu.Item header>Revision</Menu.Item>\n          </Link>\n          <Link to={'/data'}>\n            <Menu.Item>\n              <Icon name=\"save\" />\n            </Menu.Item>\n          </Link>\n        </Menu>\n    );\n  }\n}\n","import React, {Component} from 'react';\nimport {\n  Link\n} from 'react-router-dom';\nimport { Card } from 'semantic-ui-react';\nimport {Story} from '../../protos_v2';\n\ninterface StoryCardProps {\n  story: Story;\n}\n\nexport default class StoryCard extends Component<StoryCardProps> {\n  getCardUrl(): string {\n    return '/story/' + this.props.story.id;\n  }\n\n  render() {\n    return (\n      <Link to={this.getCardUrl()}>\n        <Card style={{margin: '8px'}}>\n          <Card.Content header={this.props.story.name} />\n          <Card.Content>\n            {/* For each line of the description, print it in a paragraph */}\n            {this.props.story.description.split('\\n').map((line, idx) => {\n              return (<p key={idx}>{line}</p>);\n            })}\n          </Card.Content>\n        </Card>\n      </Link>\n    );\n  }\n}\n","import {IStory, Story} from '../../protos_v2';\nimport {StoryMapInState} from './storyListSlice';\n\nconst allStoryIdsKey = 'story-ids';\n\nfunction storyKey(id: string): string {\n  return `story-${id}`;\n}\n\nexport function readAllStoriesFromStorage(): Story[] {\n  return readStoryIds().map((id) => {\n    return readStory(id);\n  });\n}\n\nfunction readStoryIds(): string[] {\n  let storyIdString = localStorage.getItem(allStoryIdsKey) || '[]';\n  return JSON.parse(storyIdString) as string[];\n}\n\nfunction writeStoryIds(storyIds: string[]): void {\n  localStorage.setItem(allStoryIdsKey, JSON.stringify(storyIds));\n}\n\nfunction readStory(id: string): Story {\n  let storyString = localStorage.getItem(storyKey(id));\n  if (!storyString) {\n    throw Error(`Unable to read story ${id} from local storage`);\n  }\n\n  return Story.create(JSON.parse(storyString));\n}\n\nexport function writeStory(story: IStory) {\n  localStorage.setItem(storyKey(story.id as string), JSON.stringify(story));\n}\n\nexport function addStoryToStorage(story: IStory): void {\n  writeStory(story);\n\n  const allStoryIds = readStoryIds();\n  allStoryIds.push(story.id as string);\n  writeStoryIds(allStoryIds);\n}\n\nexport function clearStoryFromStorage(idToRemove: string): void {\n  let allStoryIds = readStoryIds();\n\n  writeStoryIds(allStoryIds.filter((id) => {\n    return id !== idToRemove;\n  }));\n\n  localStorage.removeItem(storyKey(idToRemove));\n}\n\nexport function fetchInitialStateFromStorage() {\n  const initialState = {\n    storyMap: {} as StoryMapInState\n  };\n  readAllStoriesFromStorage().forEach((story) => {\n    initialState.storyMap[story.id] = story.toJSON();\n  });\n\n  return initialState;\n}\n\n","import {createSlice, Middleware, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../../app/store';\nimport {IStory, Story} from '../../protos_v2';\nimport {addStoryToStorage, clearStoryFromStorage, fetchInitialStateFromStorage, writeStory} from './storyListPersistence';\n\nexport interface StoryMap {\n  [key: string]: Story;\n}\n\nexport interface StoryMapInState {\n  [key: string]: IStory\n}\n\ninterface storyListInState {\n  storyList: {\n    storyMap: StoryMapInState\n  }\n}\n\nconst initialState = fetchInitialStateFromStorage();\n\nconst actionPrefix = 'storyList';\n\nconst storyListSlice = createSlice({\n  name: actionPrefix,\n  initialState,\n  reducers: {\n    createStory(state, action: PayloadAction<IStory>) {\n      state.storyMap[action.payload.id as string] = action.payload;\n    },\n    updateStory(state, action: PayloadAction<IStory>) {\n      state.storyMap[action.payload.id as string] = action.payload;\n    },\n    removeStory(state, action: PayloadAction<string>) {\n      delete state.storyMap[action.payload];\n    }\n  }\n});\n\nexport const storyListPersistenceMiddleware: Middleware<{}, storyListInState>\n    = storeAPI => next => action => {\n  let result = next(action);\n\n  if (action.type.startsWith(actionPrefix + '/')) {\n    handleStoryListPersistence(action);\n  }\n\n  return result;\n}\n\nexport const handleStoryListPersistence = (action: PayloadAction<string|Story>) => {\n  switch (action.type) {\n    case `${actionPrefix}/createStory`:\n      addStoryToStorage(action.payload as Story);\n      break;\n    case `${actionPrefix}/updateStory`:\n      writeStory(action.payload as Story);\n      break;\n    case `${actionPrefix}/removeStory`:\n      clearStoryFromStorage(action.payload as string);\n      break;\n  }\n}\n\n// Selector for fetching full map of stories\nexport const selectStoryMap = (state: storyListInState|RootState): StoryMap => {\n  const compiledStoryMap: StoryMap = {};\n\n  for (const [key, value] of Object.entries(state.storyList.storyMap)) {\n    compiledStoryMap[key] = Story.fromObject(value);\n  }\n\n  return compiledStoryMap;\n}\n\n// Creates selector for particular story\nexport const selectSpecificStory = (id: string) => (state: storyListInState|RootState): Story|null => {\n  const fetchedStory = state.storyList.storyMap[id];\n\n  if (!fetchedStory) {\n    return null;\n  }\n\n  return Story.create(fetchedStory);\n}\n\nexport const { createStory, updateStory, removeStory } = storyListSlice.actions;\nexport default storyListSlice.reducer;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import StoryCard from '../../features/storyList/StoryCard';\nimport {Button, Header, Icon, Segment} from 'semantic-ui-react';\nimport { useHistory } from 'react-router-dom';\nimport {createStory, selectStoryMap, StoryMap} from '../../features/storyList/storyListSlice';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {IStory, Story} from '../../protos_v2';\nimport { v4 as uuid } from 'uuid';\n\nfunction createNewStory(): IStory {\n  return Story.create({\n    id: uuid(),\n    name: 'New Story',\n    description: 'A story about something'\n  }).toJSON();\n}\n\nfunction getStorySection(storyMap: StoryMap): JSX.Element {\n  const storyList = Object.values(storyMap);\n\n  if (!storyList.length) {\n    return (\n        <Segment>Whoops, no stories yet</Segment>\n    );\n  }\n\n  return <Segment style={{display: 'flex', flexWrap: 'wrap'}}>\n    {storyList.map((story, idx) => {\n      return (\n          <StoryCard key={idx} story={story} />\n      );\n    })}\n  </Segment>\n}\n\nexport default function Homepage() {\n  const storyMap = useAppSelector(selectStoryMap);\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  return (\n      <div style={{margin: '24px'}}>\n        <Segment.Group >\n          <Segment style={{display: 'flex'}}>\n            <Header size='medium'>Story List\n              <Header.Subheader>\n                All your stories\n              </Header.Subheader>\n            </Header>\n            <div style={{flex: 1, textAlign: 'right'}}>\n              <Button icon color='green'\n                onClick={() => {\n                  const newStory = createNewStory();\n                  dispatch(createStory(newStory));\n                  history.push(`/story/${newStory.id}`);\n                }}\n              >\n                <Icon name='add' />\n              </Button>\n            </div>\n          </Segment>\n          {getStorySection(storyMap)}\n        </Segment.Group>\n      </div>\n  );\n}\n","import React, {Component} from 'react';\nimport {Button, Form, Header, Icon, Input, Segment, TextArea} from 'semantic-ui-react';\nimport {Story} from '../../protos_v2';\n\ninterface StoryCardProps {\n  story: Story|null;\n  onStoryChange: (story: Story) => void;\n  onStoryDelete: () => void;\n}\n\nexport default class StoryDetails extends Component<StoryCardProps> {\n  onNameChange(newName: string) {\n    const story = this.props.story as Story;\n\n    story.name = newName;\n    this.props.onStoryChange(story);\n  }\n\n  onDescriptionChange(newDescription: string) {\n    const story = this.props.story as Story;\n\n    story.description = newDescription;\n    this.props.onStoryChange(story);\n  }\n\n  render() {\n    if (!this.props.story) {\n      return (\n          <div>Whoops, could not find story</div>\n      );\n    }\n\n    return (\n      <Segment.Group style={{margin: '24px'}}>\n        <Segment style={{display: 'flex'}}>\n          <Header>\n            Story Details\n            <Header.Subheader>\n              Set the title, top-level description here\n            </Header.Subheader>\n          </Header>\n\n          <div style={{flex: 1, textAlign: 'right'}}>\n            <Button icon color='red'\n              onClick={() => this.props.onStoryDelete()}\n            >\n              <Icon name='delete' />\n            </Button>\n          </div>\n        </Segment>\n        <Segment>\n          <Form>\n            <Form.Field>\n              <label>Story Name</label>\n              <Input\n                  defaultValue={this.props.story.name}\n                  onChange={(e) => this.onNameChange(e.target.value)}\n              />\n            </Form.Field>\n            <Form.Field>\n              <label>Story Description</label>\n              <TextArea\n                  rows={2}\n                  defaultValue={this.props.story.description}\n                  onChange={(e) => this.onDescriptionChange(e.target.value)}\n              />\n            </Form.Field>\n          </Form>\n        </Segment>\n\n      </Segment.Group>\n    );\n  }\n}\n","import { RouteComponentProps } from 'react-router';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {removeStory, selectSpecificStory, updateStory} from '../../features/storyList/storyListSlice';\nimport StoryDetails from '../../features/storyDetails/StoryDetails';\nimport {Story} from '../../protos_v2';\nimport {useHistory} from 'react-router-dom';\n\ninterface MatchParams {\n  id: string\n}\n\ninterface StoryDetailsProps extends RouteComponentProps<MatchParams> {}\n\nexport default function StoryDetailsPage (props: StoryDetailsProps) {\n  const story = useAppSelector(selectSpecificStory(props.match.params?.id));\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  return (\n    <StoryDetails\n      story={story}\n      onStoryChange={(story) => dispatch(updateStory(story.toJSON()))}\n      onStoryDelete={() => {\n        dispatch(removeStory((story as Story).id));\n        history.push('/');\n      }}\n    />\n  )\n}\n","import {useAppSelector} from '../../app/hooks';\nimport {Button, Header, Segment} from 'semantic-ui-react';\nimport {selectStoryMap} from '../../features/storyList/storyListSlice';\n\nimport fileDownload from 'js-file-download';\nimport {WritingWorkspace} from '../../protos_v2';\nimport {addStoryToStorage, readAllStoriesFromStorage} from '../../features/storyList/storyListPersistence';\n\nfunction clearWorkspace() {\n  localStorage.clear();\n  window.location.reload();\n}\n\nfunction downloadWorkspace() {\n  const filename = 'writing_workspace_' + Date.now() + '.write';\n\n  fileDownload(loadDataFromStorage(), filename);\n}\n\nasync function uploadWorkspace(files: FileList|null) {\n  if (!files) {\n    return;\n  }\n\n  const fileData = await files[0].text();\n  const uint8Array = new TextEncoder().encode(fileData);\n  loadDataToStorage(uint8Array);\n\n  window.location.reload();\n}\n\nexport function loadDataFromStorage(): Uint8Array {\n  const workspace = WritingWorkspace.create({\n    stories: readAllStoriesFromStorage()\n  });\n\n  return WritingWorkspace.encode(workspace).finish();\n}\n\nexport function loadDataToStorage(data: Uint8Array): void {\n  const workspace = WritingWorkspace.decode(data);\n\n  localStorage.clear();\n\n  workspace.stories.forEach((story) => {\n    addStoryToStorage(story);\n  });\n}\n\n\nexport default function DataManagementPage() {\n  const storyMap = useAppSelector(selectStoryMap);\n\n  return (\n      <div style={{margin: '24px'}}>\n        <Segment.Group >\n          <Segment style={{display: 'flex'}}>\n            <Header size='medium'>Data Management\n              <Header.Subheader>\n                Load, Save, or Clear your Workspace\n              </Header.Subheader>\n            </Header>\n          </Segment>\n          <Segment>\n            {Object.keys(storyMap).length} Stories\n          </Segment>\n          <Segment>\n            <Button color='green'\n                    onClick={() => {downloadWorkspace()}}>\n              Download Workspace\n            </Button>\n            <Button color='red'\n                    onClick={() => {clearWorkspace()}}>\n              Clear Workspace\n            </Button>\n          </Segment>\n          <Segment>\n            <Header size='small'>Upload Workspace</Header>\n            <input type=\"file\" accept=\".write\" onChange={(event) => uploadWorkspace(event.target.files)} />\n          </Segment>\n        </Segment.Group>\n      </div>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport RevisionHeader from './features/revision-header/RevisionHeader';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport Homepage from './pages/homepage/Homepage';\nimport StoryDetailsPage from './pages/story-details/StoryDetailsPage';\nimport DataManagementPage from './pages/import-export/DataManagementPage';\n\nfunction App() {\n  return (\n    <Router>\n      <RevisionHeader />\n      <Switch>\n        <Route path=\"/data\" component={DataManagementPage} />\n        <Route path=\"/story/:id\" component={StoryDetailsPage} />\n        <Route path=\"/\" component={Homepage} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import {configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\nimport storyListReducer, {storyListPersistenceMiddleware} from '../features/storyList/storyListSlice';\n\nexport const store = configureStore({\n  reducer: {\n    storyList: storyListReducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat([\n      storyListPersistenceMiddleware,\n  ])\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define([\"protobufjs/minimal\"], factory);\n\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require(\"protobufjs/minimal\"));\n\n})(this, function($protobuf) {\n    \"use strict\";\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Timestamp = (function() {\n    \n        /**\n         * Properties of a Timestamp.\n         * @exports ITimestamp\n         * @interface ITimestamp\n         * @property {number|Long|null} [seconds] Timestamp seconds\n         * @property {number|null} [nanos] Timestamp nanos\n         */\n    \n        /**\n         * Constructs a new Timestamp.\n         * @exports Timestamp\n         * @classdesc Represents a Timestamp.\n         * @implements ITimestamp\n         * @constructor\n         * @param {ITimestamp=} [properties] Properties to set\n         */\n        function Timestamp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Timestamp seconds.\n         * @member {number|Long} seconds\n         * @memberof Timestamp\n         * @instance\n         */\n        Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n    \n        /**\n         * Timestamp nanos.\n         * @member {number} nanos\n         * @memberof Timestamp\n         * @instance\n         */\n        Timestamp.prototype.nanos = 0;\n    \n        /**\n         * Creates a new Timestamp instance using the specified properties.\n         * @function create\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp=} [properties] Properties to set\n         * @returns {Timestamp} Timestamp instance\n         */\n        Timestamp.create = function create(properties) {\n            return new Timestamp(properties);\n        };\n    \n        /**\n         * Encodes the specified Timestamp message. Does not implicitly {@link Timestamp.verify|verify} messages.\n         * @function encode\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp} message Timestamp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Timestamp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n            if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link Timestamp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp} message Timestamp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Timestamp message from the specified reader or buffer.\n         * @function decode\n         * @memberof Timestamp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Timestamp} Timestamp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Timestamp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Timestamp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.seconds = reader.int64();\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Timestamp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Timestamp} Timestamp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Timestamp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Timestamp message.\n         * @function verify\n         * @memberof Timestamp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Timestamp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                    return \"seconds: integer|Long expected\";\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                if (!$util.isInteger(message.nanos))\n                    return \"nanos: integer expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Timestamp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Timestamp} Timestamp\n         */\n        Timestamp.fromObject = function fromObject(object) {\n            if (object instanceof $root.Timestamp)\n                return object;\n            var message = new $root.Timestamp();\n            if (object.seconds != null)\n                if ($util.Long)\n                    (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;\n                else if (typeof object.seconds === \"string\")\n                    message.seconds = parseInt(object.seconds, 10);\n                else if (typeof object.seconds === \"number\")\n                    message.seconds = object.seconds;\n                else if (typeof object.seconds === \"object\")\n                    message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n            if (object.nanos != null)\n                message.nanos = object.nanos | 0;\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Timestamp\n         * @static\n         * @param {Timestamp} message Timestamp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Timestamp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.seconds = options.longs === String ? \"0\" : 0;\n                object.nanos = 0;\n            }\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                if (typeof message.seconds === \"number\")\n                    object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                else\n                    object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                object.nanos = message.nanos;\n            return object;\n        };\n    \n        /**\n         * Converts this Timestamp to JSON.\n         * @function toJSON\n         * @memberof Timestamp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Timestamp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Timestamp;\n    })();\n    \n    $root.Duration = (function() {\n    \n        /**\n         * Properties of a Duration.\n         * @exports IDuration\n         * @interface IDuration\n         * @property {number|Long|null} [seconds] Duration seconds\n         * @property {number|null} [nanos] Duration nanos\n         */\n    \n        /**\n         * Constructs a new Duration.\n         * @exports Duration\n         * @classdesc Represents a Duration.\n         * @implements IDuration\n         * @constructor\n         * @param {IDuration=} [properties] Properties to set\n         */\n        function Duration(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Duration seconds.\n         * @member {number|Long} seconds\n         * @memberof Duration\n         * @instance\n         */\n        Duration.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n    \n        /**\n         * Duration nanos.\n         * @member {number} nanos\n         * @memberof Duration\n         * @instance\n         */\n        Duration.prototype.nanos = 0;\n    \n        /**\n         * Creates a new Duration instance using the specified properties.\n         * @function create\n         * @memberof Duration\n         * @static\n         * @param {IDuration=} [properties] Properties to set\n         * @returns {Duration} Duration instance\n         */\n        Duration.create = function create(properties) {\n            return new Duration(properties);\n        };\n    \n        /**\n         * Encodes the specified Duration message. Does not implicitly {@link Duration.verify|verify} messages.\n         * @function encode\n         * @memberof Duration\n         * @static\n         * @param {IDuration} message Duration message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Duration.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n            if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Duration message, length delimited. Does not implicitly {@link Duration.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Duration\n         * @static\n         * @param {IDuration} message Duration message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Duration.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Duration message from the specified reader or buffer.\n         * @function decode\n         * @memberof Duration\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Duration} Duration\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Duration.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Duration();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.seconds = reader.int64();\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Duration message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Duration\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Duration} Duration\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Duration.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Duration message.\n         * @function verify\n         * @memberof Duration\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Duration.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                    return \"seconds: integer|Long expected\";\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                if (!$util.isInteger(message.nanos))\n                    return \"nanos: integer expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Duration message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Duration\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Duration} Duration\n         */\n        Duration.fromObject = function fromObject(object) {\n            if (object instanceof $root.Duration)\n                return object;\n            var message = new $root.Duration();\n            if (object.seconds != null)\n                if ($util.Long)\n                    (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;\n                else if (typeof object.seconds === \"string\")\n                    message.seconds = parseInt(object.seconds, 10);\n                else if (typeof object.seconds === \"number\")\n                    message.seconds = object.seconds;\n                else if (typeof object.seconds === \"object\")\n                    message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n            if (object.nanos != null)\n                message.nanos = object.nanos | 0;\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Duration message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Duration\n         * @static\n         * @param {Duration} message Duration\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Duration.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.seconds = options.longs === String ? \"0\" : 0;\n                object.nanos = 0;\n            }\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                if (typeof message.seconds === \"number\")\n                    object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                else\n                    object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                object.nanos = message.nanos;\n            return object;\n        };\n    \n        /**\n         * Converts this Duration to JSON.\n         * @function toJSON\n         * @memberof Duration\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Duration.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Duration;\n    })();\n    \n    $root.Story = (function() {\n    \n        /**\n         * Properties of a Story.\n         * @exports IStory\n         * @interface IStory\n         * @property {string|null} [id] Story id\n         * @property {string|null} [name] Story name\n         * @property {string|null} [description] Story description\n         * @property {IDuration|null} [duration] Story duration\n         * @property {Array.<string>|null} [relatedStoryIds] Story relatedStoryIds\n         */\n    \n        /**\n         * Constructs a new Story.\n         * @exports Story\n         * @classdesc Represents a Story.\n         * @implements IStory\n         * @constructor\n         * @param {IStory=} [properties] Properties to set\n         */\n        function Story(properties) {\n            this.relatedStoryIds = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Story id.\n         * @member {string} id\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.id = \"\";\n    \n        /**\n         * Story name.\n         * @member {string} name\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.name = \"\";\n    \n        /**\n         * Story description.\n         * @member {string} description\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.description = \"\";\n    \n        /**\n         * Story duration.\n         * @member {IDuration|null|undefined} duration\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.duration = null;\n    \n        /**\n         * Story relatedStoryIds.\n         * @member {Array.<string>} relatedStoryIds\n         * @memberof Story\n         * @instance\n         */\n        Story.prototype.relatedStoryIds = $util.emptyArray;\n    \n        /**\n         * Creates a new Story instance using the specified properties.\n         * @function create\n         * @memberof Story\n         * @static\n         * @param {IStory=} [properties] Properties to set\n         * @returns {Story} Story instance\n         */\n        Story.create = function create(properties) {\n            return new Story(properties);\n        };\n    \n        /**\n         * Encodes the specified Story message. Does not implicitly {@link Story.verify|verify} messages.\n         * @function encode\n         * @memberof Story\n         * @static\n         * @param {IStory} message Story message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Story.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.duration != null && Object.hasOwnProperty.call(message, \"duration\"))\n                $root.Duration.encode(message.duration, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.relatedStoryIds != null && message.relatedStoryIds.length)\n                for (var i = 0; i < message.relatedStoryIds.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.relatedStoryIds[i]);\n            if (message.description != null && Object.hasOwnProperty.call(message, \"description\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.description);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Story message, length delimited. Does not implicitly {@link Story.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Story\n         * @static\n         * @param {IStory} message Story message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Story.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Story message from the specified reader or buffer.\n         * @function decode\n         * @memberof Story\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Story} Story\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Story.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Story();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.name = reader.string();\n                    break;\n                case 5:\n                    message.description = reader.string();\n                    break;\n                case 3:\n                    message.duration = $root.Duration.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    if (!(message.relatedStoryIds && message.relatedStoryIds.length))\n                        message.relatedStoryIds = [];\n                    message.relatedStoryIds.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Story message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Story\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Story} Story\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Story.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Story message.\n         * @function verify\n         * @memberof Story\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Story.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.description != null && message.hasOwnProperty(\"description\"))\n                if (!$util.isString(message.description))\n                    return \"description: string expected\";\n            if (message.duration != null && message.hasOwnProperty(\"duration\")) {\n                var error = $root.Duration.verify(message.duration);\n                if (error)\n                    return \"duration.\" + error;\n            }\n            if (message.relatedStoryIds != null && message.hasOwnProperty(\"relatedStoryIds\")) {\n                if (!Array.isArray(message.relatedStoryIds))\n                    return \"relatedStoryIds: array expected\";\n                for (var i = 0; i < message.relatedStoryIds.length; ++i)\n                    if (!$util.isString(message.relatedStoryIds[i]))\n                        return \"relatedStoryIds: string[] expected\";\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a Story message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Story\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Story} Story\n         */\n        Story.fromObject = function fromObject(object) {\n            if (object instanceof $root.Story)\n                return object;\n            var message = new $root.Story();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.description != null)\n                message.description = String(object.description);\n            if (object.duration != null) {\n                if (typeof object.duration !== \"object\")\n                    throw TypeError(\".Story.duration: object expected\");\n                message.duration = $root.Duration.fromObject(object.duration);\n            }\n            if (object.relatedStoryIds) {\n                if (!Array.isArray(object.relatedStoryIds))\n                    throw TypeError(\".Story.relatedStoryIds: array expected\");\n                message.relatedStoryIds = [];\n                for (var i = 0; i < object.relatedStoryIds.length; ++i)\n                    message.relatedStoryIds[i] = String(object.relatedStoryIds[i]);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Story message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Story\n         * @static\n         * @param {Story} message Story\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Story.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.relatedStoryIds = [];\n            if (options.defaults) {\n                object.id = \"\";\n                object.name = \"\";\n                object.duration = null;\n                object.description = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.duration != null && message.hasOwnProperty(\"duration\"))\n                object.duration = $root.Duration.toObject(message.duration, options);\n            if (message.relatedStoryIds && message.relatedStoryIds.length) {\n                object.relatedStoryIds = [];\n                for (var j = 0; j < message.relatedStoryIds.length; ++j)\n                    object.relatedStoryIds[j] = message.relatedStoryIds[j];\n            }\n            if (message.description != null && message.hasOwnProperty(\"description\"))\n                object.description = message.description;\n            return object;\n        };\n    \n        /**\n         * Converts this Story to JSON.\n         * @function toJSON\n         * @memberof Story\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Story.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Story;\n    })();\n    \n    $root.WritingWorkspace = (function() {\n    \n        /**\n         * Properties of a WritingWorkspace.\n         * @exports IWritingWorkspace\n         * @interface IWritingWorkspace\n         * @property {Array.<IStory>|null} [stories] WritingWorkspace stories\n         */\n    \n        /**\n         * Constructs a new WritingWorkspace.\n         * @exports WritingWorkspace\n         * @classdesc Represents a WritingWorkspace.\n         * @implements IWritingWorkspace\n         * @constructor\n         * @param {IWritingWorkspace=} [properties] Properties to set\n         */\n        function WritingWorkspace(properties) {\n            this.stories = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * WritingWorkspace stories.\n         * @member {Array.<IStory>} stories\n         * @memberof WritingWorkspace\n         * @instance\n         */\n        WritingWorkspace.prototype.stories = $util.emptyArray;\n    \n        /**\n         * Creates a new WritingWorkspace instance using the specified properties.\n         * @function create\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace=} [properties] Properties to set\n         * @returns {WritingWorkspace} WritingWorkspace instance\n         */\n        WritingWorkspace.create = function create(properties) {\n            return new WritingWorkspace(properties);\n        };\n    \n        /**\n         * Encodes the specified WritingWorkspace message. Does not implicitly {@link WritingWorkspace.verify|verify} messages.\n         * @function encode\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace} message WritingWorkspace message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WritingWorkspace.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.stories != null && message.stories.length)\n                for (var i = 0; i < message.stories.length; ++i)\n                    $root.Story.encode(message.stories[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified WritingWorkspace message, length delimited. Does not implicitly {@link WritingWorkspace.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace} message WritingWorkspace message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WritingWorkspace.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a WritingWorkspace message from the specified reader or buffer.\n         * @function decode\n         * @memberof WritingWorkspace\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {WritingWorkspace} WritingWorkspace\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WritingWorkspace.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WritingWorkspace();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    if (!(message.stories && message.stories.length))\n                        message.stories = [];\n                    message.stories.push($root.Story.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a WritingWorkspace message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof WritingWorkspace\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {WritingWorkspace} WritingWorkspace\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WritingWorkspace.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a WritingWorkspace message.\n         * @function verify\n         * @memberof WritingWorkspace\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WritingWorkspace.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.stories != null && message.hasOwnProperty(\"stories\")) {\n                if (!Array.isArray(message.stories))\n                    return \"stories: array expected\";\n                for (var i = 0; i < message.stories.length; ++i) {\n                    var error = $root.Story.verify(message.stories[i]);\n                    if (error)\n                        return \"stories.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a WritingWorkspace message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof WritingWorkspace\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {WritingWorkspace} WritingWorkspace\n         */\n        WritingWorkspace.fromObject = function fromObject(object) {\n            if (object instanceof $root.WritingWorkspace)\n                return object;\n            var message = new $root.WritingWorkspace();\n            if (object.stories) {\n                if (!Array.isArray(object.stories))\n                    throw TypeError(\".WritingWorkspace.stories: array expected\");\n                message.stories = [];\n                for (var i = 0; i < object.stories.length; ++i) {\n                    if (typeof object.stories[i] !== \"object\")\n                        throw TypeError(\".WritingWorkspace.stories: object expected\");\n                    message.stories[i] = $root.Story.fromObject(object.stories[i]);\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a WritingWorkspace message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof WritingWorkspace\n         * @static\n         * @param {WritingWorkspace} message WritingWorkspace\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WritingWorkspace.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.stories = [];\n            if (message.stories && message.stories.length) {\n                object.stories = [];\n                for (var j = 0; j < message.stories.length; ++j)\n                    object.stories[j] = $root.Story.toObject(message.stories[j], options);\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this WritingWorkspace to JSON.\n         * @function toJSON\n         * @memberof WritingWorkspace\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WritingWorkspace.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return WritingWorkspace;\n    })();\n\n    return $root;\n});\n"],"sourceRoot":""}