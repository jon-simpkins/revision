{"version":3,"sources":["protos_v2.js","app/hooks.ts","features/revision-header/headerOptionsSlice.ts","features/utils/durationUtils.ts","features/revision-header/RevisionHeader.tsx","features/scrapList/scrapListPersistence.ts","features/scrapList/scrapListSlice.ts","pages/homepage/Homepage.tsx","pages/import-export/DataManagementPage.tsx","features/scrapDetails/usefulConstants.ts","features/scrapDetails/BaseReadOnlyComponent.tsx","features/scrapDetails/FountainHeaderComponent.tsx","features/scrapDetails/ScrapEmbedComponent.tsx","features/scrapDetails/FountainTransitionComponent.tsx","features/scrapDetails/FountainCenteredComponent.tsx","features/scrapDetails/FountainCharacterComponent.tsx","features/scrapDetails/FountainDialogueComponent.tsx","features/scrapDetails/FountainParentheticalComponent.tsx","features/scrapDetails/FountainActionComponent.tsx","features/scrapDetails/ScrapPlaceholderComponent.tsx","features/scrapDetails/ScrapTraitComponent.tsx","features/scrapDetails/parseProse.ts","features/scrapDetails/CommentComponent.tsx","features/scrapDetails/foutainDecorators.ts","features/scrapDetails/editorInteractionUtils.ts","features/scrapDetails/ScrapDetailsHelperComponents.tsx","features/scrapDetails/ScrapDetails.tsx","pages/scrap-details/ScrapDetailsPage.tsx","pages/decisions/DecisionPage.tsx","features/utils/fetchParsedContentBlocksForScrap.ts","features/timeline/timelineParsing.ts","features/timeline/Timeline.tsx","features/scrapDetails/ReadOnlyViewer.tsx","pages/read-scrap/ReadScrapPage.tsx","features/utils/fetchCharacters.ts","features/utils/fetchTraits.ts","pages/print-scrap/savePDF.tsx","pages/print-scrap/PrintScrapPage.tsx","App.tsx","app/store.ts","serviceWorker.ts","index.tsx"],"names":["define","$protobuf","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Timestamp","properties","keys","Object","i","length","this","prototype","seconds","nanos","create","encode","message","writer","hasOwnProperty","call","uint32","int32","encodeDelimited","ldelim","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","isInteger","fromObject","object","toObject","options","defaults","toJSON","constructor","toJSONOptions","Duration","Scrap","childScraps","id","intendedDurationSec","synopsis","prose","emptyArray","string","push","isString","Array","isArray","String","TypeError","arrays","j","WritingWorkspace","scraps","fork","error","useAppDispatch","useDispatch","useAppSelector","useSelector","headerOptionsSlice","createSlice","name","initialState","currentScrapId","showEditLink","showReadLink","showPrintLink","characterFilters","currentCharacterFilter","currentCompletionFilter","traitFilters","currentTraitFilter","isCurrentlyInSession","currentWritingSessionStartEpoch","lastCheckedWritingSessionEpoch","reducers","updateHeaderOptions","state","action","payload","readHeaderOptions","headerOptions","actions","durationSecondsToString","durationSeconds","durationStr","hours","Math","floor","toString","padStart","minutes","round","durationStringToSeconds","durationString","RegExp","test","Error","splitDurationStr","split","filter","Boolean","durationSec","parseInt","RevisionHeader","completionFilters","editEntry","readEntry","printEntry","timerEntry","dispatch","dispatchPartialOptionsUpdate","partialUpdate","characterOptions","map","characterFilter","key","character","text","percentDurationSec","value","unshift","Dropdown","floating","labeled","scrolling","item","className","onChange","e","data","traitOptions","traitFilter","trait","numberOfAppearances","to","Menu","Item","Icon","Date","now","Button","onClick","setInterval","header","position","allScrapIdsKey","scrapKey","readAllScrapsFromStorage","readScrapIds","scrapString","localStorage","getItem","JSON","parse","readScrap","storyIdString","writeScrapIds","scrapIds","setItem","stringify","writeScrap","scrap","addScrapToStorage","allScrapIds","scrapMap","forEach","fetchInitialStateFromStorage","actionPrefix","ScrapListSlice","createScrap","updateScrap","removeScrap","scrapListPersistenceMiddleware","storeAPI","next","result","type","startsWith","handleScrapListPersistence","idToRemove","removeItem","selectScrapMap","compiledScrapMap","entries","scrapList","getScrapSection","values","hasParentMap","childId","Segment","preparedScrapList","sort","a","b","style","display","flexWrap","idx","Card","margin","Content","Homepage","history","useHistory","Group","Header","size","Subheader","flex","textAlign","icon","color","newScrap","uuid","downloadWorkspace","filename","fileDownload","workspace","finish","loadDataFromStorage","files","arrayBuffer","fileData","loadDataToStorage","Uint8Array","window","location","reload","clear","DataManagementPage","accept","event","uploadWorkspace","target","ONE_LINE_DURATION_SEC","PAGE_WIDTH_EM","scrapIdField","ancestorField","pendingDurationSecContribution","durationSecContribution","isScrapTrait","scrapTraitText","isScrapPlaceholder","scrapPlaceholderText","scrapPlaceholderDurationSecField","isScrapEmbedding","scrapLink","isFountainHeader","isFountainCentered","isFountainTransition","isBlank","isComment","isFountainCharacter","isFountainDialogue","isFountainParenthetical","isFountainAction","FOUNTAIN_EDITOR_STYLE","border","padding","width","overflowY","fontSize","fontFamily","mergeDataObject","dataObject","newData","parseScrapIdFromProps","props","contentState","getBlockMap","get","blockKey","getData","BaseReadOnlyComponent","isHover","scrapId","cursor","top","right","circular","setState","paddingRight","isFilterSelected","backgroundColor","children","getParentStyle","onMouseEnter","onMouseLeave","renderSpecific","buildScrapLinkButton","Component","fountainHeaderStrategy","contentBlock","callback","getText","sceneHeaderDurationSec","blockText","FountainHeaderComponent","fontWeight","FountainHeaderReadOnlyComponent","checkIsScrapEmbed","endsWith","includes","ScrapEmbedSummary","parentScrapId","onGotoScrap","marginLeft","fountainTransitionStrategy","sceneTransitionDurationSec","FountainTransitionComponent","FountainTransitionReadOnlyComponent","fountainCenteredStrategy","sceneCenteredDurationSec","FountainCenteredComponent","FountainCenteredReadOnlyComponent","fountainCharacterStrategy","characterDurationSec","ceil","FountainCharacterComponent","FountainCharacterReadOnlyClassComponent","fountainDialogueStrategy","dialogueDurationSec","FountainDialogueComponent","FountainDialogueReadOnlyClassComponent","fountainParentheticalStrategy","parentheticalDurationSec","FountainParentheticalComponent","FountainParentheticalReadOnlyClassComponent","fountainActionStrategy","actionDurationSec","FountainActionComponent","FountainActionReadOnlyComponent","scrapPlaceholderStrategy","scrapPlaceholderDurationSec","content","replace","trim","ScrapPlaceholderReadOnlyComponent","placeholderText","displayText","linesOfText","numberOfLines","heightStyle","numberOfInstances","height","background","overflow","fill","bottom","zIndex","scrapTraitStrategy","preProcessProseBlock","blockData","checkIsCommentStart","checkIsCommentEnd","set","Immutable","fromJS","processProseBlock","blockBefore","blockAfter","processProgress","toJS","blankBefore","blankAfter","characterBefore","currentDurationSec","checkIsSceneHeader","toUpperCase","checkIsSceneTransition","checkIsCentered","checkIsCharacter","checkIsDialogue","checkIsParenthetical","checkIsScrapPlaceholder","checkIsScrapTrait","actionData","scrapTraitData","scrapPlaceholderData","parentheticalData","dialogueData","parsedCharacter","characterData","sceneCenteredData","sceneTransitionData","sceneHeaderData","scrapEmbedData","add","childScrap","updatedBlock","updatedCharacterList","getCharacterList","c","parseAllProse","warnParsingThreshold","errorParsingThreshold","newParseErrorState","processStartEpoch","OrderedSet","currentBlockMap","blockKeys","nextKey","timeSoFar","currentlyInComment","currentBlock","updatedData","update","newContent","durationMs","console","log","totalDurationSec","showTimeoutWarning","editorDecorator","CompositeDecorator","strategy","component","inComment","currentLocation","useLocation","pathname","fontStyle","viewerDecorator","getSelectedText","editorState","selected","getFragmentFromSelection","x","join","onCut","editor","removeWhenDone","preventDefault","selectedText","clipboard","then","newContentState","Modifier","replaceText","getCurrentContent","getSelection","EditorState","currentContent","initializeState","buildInitialEditorState","lastEmittedStr","durationErrorString","actualDurationSec","parentScrapIds","buildParentScrapIds","parseErrorState","durationInputKey","focusMode","thisScrap","createWithContent","ContentState","createFromText","createEmpty","parentScraps","getBreadcrumbs","scrapContribution","parentScrapLinks","parentScrap","BreadcrumbSection","link","Breadcrumb","reduce","prev","curr","BreadcrumbDivider","getProseEditorToolbar","remapEditorContent","parseWarning","focusLabel","durationPercentLabel","onScrapCreate","currentSelection","currentlySelectedText","newScrapId","thingToInsert","isCollapsed","insertText","getPlainText","addChildScrap","newState","match","textToSwap","re","exec","textToReplace","splitText","replacePlaceholderScraps","getPrimaryForm","Form","Input","label","defaultValue","onScrapUpdate","newDuration","setDurationErrorString","onDurationChange","Field","updateExpectedDurationSec","disabled","hasError","styleMap","ScrapDetails","domEditor","debounce","newStrToEmit","persistProse","parseResult","array","isArrayEqualToImmutableSet","toArray","onUpdateHeaderOptions","setHeaderOptions","prevProps","prevState","snapshot","ref","focus","newProseStr","noFocusSection","flexDirection","customStyleMap","stripPastedStyles","onCopy","setDomEditorRef","onProseChange","ScrapDetailsPage","params","DecisionPage","showListInput","showCurrentScores","nextCandidateLabel","nextCandidateDesc","candidates","winMatrix","candidateIndexA","candidateIndexB","newCandidates","description","currentScore","wins","losses","indexAWeights","ignore","getTotalComparisons","indexA","randomSelectWeighted","indexBWeights","indexB","weights","sumWeight","previousValue","currentValue","randomCutoff","random","sum","index","totalComparisons","candidateA","candidateB","marginTop","marginBottom","updateWin","line","winIndex","loseIndex","iteration","W_i","denominator","averageValue","setupNewComparison","sortedCandidates","candidate","newValue","mainContent","updateNextCandidateLabel","updateNextCandidateDesc","addCandidate","renderCandidates","renderComparison","toggleShowCurrentScores","renderWinMatrix","fetchParsedContentBlocksForScrap","scrapAncestors","newAncestors","allNewContentBlocks","getBlocksAsArray","block","embeddedScrapId","subBlocks","getScrapSynopsis","formatPercentString","percent","TimelineBlock","headerText","startSec","characters","pendingCompletion","traits","Set","highlightPendingCompletion","has","Popup","mouseEnterDelay","mouseLeaveDelay","trigger","boxShadow","left","TimelineRow","blocks","zoomLevel","borderBottom","render","Timeline","parsedContentBlocks","isValid","percentComplete","rows","parsedBlocks","totalPendingSec","durationContribution","incompleteContribution","characterContribution","parsedTraits","untrimmed","ancestors","lastBlockId","parseTimeline","numLevels","stepLevel","startingPoint","steps","nextContribution","secondMarkers","getSecondMarkers","markerTopPadding","overflowX","row","markerStyle","paddingTop","borderRight","paddingLeft","borderLeft","TimelineViewer","timeline","minimized","max","zoomOptions","zoomOut","zoomIn","flipMinimization","ReadOnlyViewer","createFromBlockArray","readOnly","ReadScrapPage","newHeaderOptions","ReadScrap","hasLoaded","characterMap","thisCharacter","thisDurationSecContribution","characterEntry","fetchCharacters","traitMap","untrimmedTrait","fetchTraits","Font","registerHyphenationCallback","word","ElementType","styles","StyleSheet","page","paddingBottom","characterLine","dialogueLine","parentheticalLine","transitionLine","centeredLine","sceneHeaderLine","parsePDFBlocks","pdfBlocks","nextPDFBlock","elements","ACTION","CHARACTER","DIALOGUE","PARENTHETICAL","TRANSITION","CENTERED","SCENE_HEADING","nextElement","lastElementType","nextElementType","shouldCreateNewBlock","renderDocument","parsedPDFBlocks","title","author","creator","producer","wrap","pdfBlock","element","renderExamplePDF","printPageProps","PrintScrapPage","PrintScrap","App","path","store","configureStore","reducer","scrapListReducer","headerOptionsReducer","middleware","getDefaultMiddleware","concat","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6e758cf7.chunk.js","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n(function(global, factory) { /* global define, require, module */\n\n    /* AMD */ if (typeof define === 'function' && define.amd)\n        define([\"protobufjs/minimal\"], factory);\n\n    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)\n        module.exports = factory(require(\"protobufjs/minimal\"));\n\n})(this, function($protobuf) {\n    \"use strict\";\n\n    // Common aliases\n    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n    \n    // Exported root namespace\n    var $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n    \n    $root.Timestamp = (function() {\n    \n        /**\n         * Properties of a Timestamp.\n         * @exports ITimestamp\n         * @interface ITimestamp\n         * @property {number|null} [seconds] Timestamp seconds\n         * @property {number|null} [nanos] Timestamp nanos\n         */\n    \n        /**\n         * Constructs a new Timestamp.\n         * @exports Timestamp\n         * @classdesc Represents a Timestamp.\n         * @implements ITimestamp\n         * @constructor\n         * @param {ITimestamp=} [properties] Properties to set\n         */\n        function Timestamp(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Timestamp seconds.\n         * @member {number} seconds\n         * @memberof Timestamp\n         * @instance\n         */\n        Timestamp.prototype.seconds = 0;\n    \n        /**\n         * Timestamp nanos.\n         * @member {number} nanos\n         * @memberof Timestamp\n         * @instance\n         */\n        Timestamp.prototype.nanos = 0;\n    \n        /**\n         * Creates a new Timestamp instance using the specified properties.\n         * @function create\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp=} [properties] Properties to set\n         * @returns {Timestamp} Timestamp instance\n         */\n        Timestamp.create = function create(properties) {\n            return new Timestamp(properties);\n        };\n    \n        /**\n         * Encodes the specified Timestamp message. Does not implicitly {@link Timestamp.verify|verify} messages.\n         * @function encode\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp} message Timestamp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Timestamp.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seconds);\n            if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link Timestamp.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Timestamp\n         * @static\n         * @param {ITimestamp} message Timestamp message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Timestamp message from the specified reader or buffer.\n         * @function decode\n         * @memberof Timestamp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Timestamp} Timestamp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Timestamp.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Timestamp();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.seconds = reader.int32();\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Timestamp\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Timestamp} Timestamp\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Timestamp.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Timestamp message.\n         * @function verify\n         * @memberof Timestamp\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Timestamp.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                if (!$util.isInteger(message.seconds))\n                    return \"seconds: integer expected\";\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                if (!$util.isInteger(message.nanos))\n                    return \"nanos: integer expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Timestamp\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Timestamp} Timestamp\n         */\n        Timestamp.fromObject = function fromObject(object) {\n            if (object instanceof $root.Timestamp)\n                return object;\n            var message = new $root.Timestamp();\n            if (object.seconds != null)\n                message.seconds = object.seconds | 0;\n            if (object.nanos != null)\n                message.nanos = object.nanos | 0;\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Timestamp\n         * @static\n         * @param {Timestamp} message Timestamp\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Timestamp.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.seconds = 0;\n                object.nanos = 0;\n            }\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                object.seconds = message.seconds;\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                object.nanos = message.nanos;\n            return object;\n        };\n    \n        /**\n         * Converts this Timestamp to JSON.\n         * @function toJSON\n         * @memberof Timestamp\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Timestamp.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Timestamp;\n    })();\n    \n    $root.Duration = (function() {\n    \n        /**\n         * Properties of a Duration.\n         * @exports IDuration\n         * @interface IDuration\n         * @property {number|null} [seconds] Duration seconds\n         * @property {number|null} [nanos] Duration nanos\n         */\n    \n        /**\n         * Constructs a new Duration.\n         * @exports Duration\n         * @classdesc Represents a Duration.\n         * @implements IDuration\n         * @constructor\n         * @param {IDuration=} [properties] Properties to set\n         */\n        function Duration(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Duration seconds.\n         * @member {number} seconds\n         * @memberof Duration\n         * @instance\n         */\n        Duration.prototype.seconds = 0;\n    \n        /**\n         * Duration nanos.\n         * @member {number} nanos\n         * @memberof Duration\n         * @instance\n         */\n        Duration.prototype.nanos = 0;\n    \n        /**\n         * Creates a new Duration instance using the specified properties.\n         * @function create\n         * @memberof Duration\n         * @static\n         * @param {IDuration=} [properties] Properties to set\n         * @returns {Duration} Duration instance\n         */\n        Duration.create = function create(properties) {\n            return new Duration(properties);\n        };\n    \n        /**\n         * Encodes the specified Duration message. Does not implicitly {@link Duration.verify|verify} messages.\n         * @function encode\n         * @memberof Duration\n         * @static\n         * @param {IDuration} message Duration message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Duration.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.seconds);\n            if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Duration message, length delimited. Does not implicitly {@link Duration.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Duration\n         * @static\n         * @param {IDuration} message Duration message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Duration.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Duration message from the specified reader or buffer.\n         * @function decode\n         * @memberof Duration\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Duration} Duration\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Duration.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Duration();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.seconds = reader.int32();\n                    break;\n                case 2:\n                    message.nanos = reader.int32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Duration message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Duration\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Duration} Duration\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Duration.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Duration message.\n         * @function verify\n         * @memberof Duration\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Duration.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                if (!$util.isInteger(message.seconds))\n                    return \"seconds: integer expected\";\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                if (!$util.isInteger(message.nanos))\n                    return \"nanos: integer expected\";\n            return null;\n        };\n    \n        /**\n         * Creates a Duration message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Duration\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Duration} Duration\n         */\n        Duration.fromObject = function fromObject(object) {\n            if (object instanceof $root.Duration)\n                return object;\n            var message = new $root.Duration();\n            if (object.seconds != null)\n                message.seconds = object.seconds | 0;\n            if (object.nanos != null)\n                message.nanos = object.nanos | 0;\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Duration message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Duration\n         * @static\n         * @param {Duration} message Duration\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Duration.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.seconds = 0;\n                object.nanos = 0;\n            }\n            if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                object.seconds = message.seconds;\n            if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                object.nanos = message.nanos;\n            return object;\n        };\n    \n        /**\n         * Converts this Duration to JSON.\n         * @function toJSON\n         * @memberof Duration\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Duration.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Duration;\n    })();\n    \n    $root.Scrap = (function() {\n    \n        /**\n         * Properties of a Scrap.\n         * @exports IScrap\n         * @interface IScrap\n         * @property {string|null} [id] Scrap id\n         * @property {number|null} [intendedDurationSec] Scrap intendedDurationSec\n         * @property {string|null} [synopsis] Scrap synopsis\n         * @property {string|null} [prose] Scrap prose\n         * @property {Array.<string>|null} [childScraps] Scrap childScraps\n         */\n    \n        /**\n         * Constructs a new Scrap.\n         * @exports Scrap\n         * @classdesc Represents a Scrap.\n         * @implements IScrap\n         * @constructor\n         * @param {IScrap=} [properties] Properties to set\n         */\n        function Scrap(properties) {\n            this.childScraps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * Scrap id.\n         * @member {string} id\n         * @memberof Scrap\n         * @instance\n         */\n        Scrap.prototype.id = \"\";\n    \n        /**\n         * Scrap intendedDurationSec.\n         * @member {number} intendedDurationSec\n         * @memberof Scrap\n         * @instance\n         */\n        Scrap.prototype.intendedDurationSec = 0;\n    \n        /**\n         * Scrap synopsis.\n         * @member {string} synopsis\n         * @memberof Scrap\n         * @instance\n         */\n        Scrap.prototype.synopsis = \"\";\n    \n        /**\n         * Scrap prose.\n         * @member {string} prose\n         * @memberof Scrap\n         * @instance\n         */\n        Scrap.prototype.prose = \"\";\n    \n        /**\n         * Scrap childScraps.\n         * @member {Array.<string>} childScraps\n         * @memberof Scrap\n         * @instance\n         */\n        Scrap.prototype.childScraps = $util.emptyArray;\n    \n        /**\n         * Creates a new Scrap instance using the specified properties.\n         * @function create\n         * @memberof Scrap\n         * @static\n         * @param {IScrap=} [properties] Properties to set\n         * @returns {Scrap} Scrap instance\n         */\n        Scrap.create = function create(properties) {\n            return new Scrap(properties);\n        };\n    \n        /**\n         * Encodes the specified Scrap message. Does not implicitly {@link Scrap.verify|verify} messages.\n         * @function encode\n         * @memberof Scrap\n         * @static\n         * @param {IScrap} message Scrap message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Scrap.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.intendedDurationSec != null && Object.hasOwnProperty.call(message, \"intendedDurationSec\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.intendedDurationSec);\n            if (message.synopsis != null && Object.hasOwnProperty.call(message, \"synopsis\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.synopsis);\n            if (message.prose != null && Object.hasOwnProperty.call(message, \"prose\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.prose);\n            if (message.childScraps != null && message.childScraps.length)\n                for (var i = 0; i < message.childScraps.length; ++i)\n                    writer.uint32(/* id 9, wireType 2 =*/74).string(message.childScraps[i]);\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified Scrap message, length delimited. Does not implicitly {@link Scrap.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Scrap\n         * @static\n         * @param {IScrap} message Scrap message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Scrap.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a Scrap message from the specified reader or buffer.\n         * @function decode\n         * @memberof Scrap\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Scrap} Scrap\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Scrap.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Scrap();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.id = reader.string();\n                    break;\n                case 2:\n                    message.intendedDurationSec = reader.uint32();\n                    break;\n                case 3:\n                    message.synopsis = reader.string();\n                    break;\n                case 4:\n                    message.prose = reader.string();\n                    break;\n                case 9:\n                    if (!(message.childScraps && message.childScraps.length))\n                        message.childScraps = [];\n                    message.childScraps.push(reader.string());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a Scrap message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Scrap\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Scrap} Scrap\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Scrap.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a Scrap message.\n         * @function verify\n         * @memberof Scrap\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Scrap.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.intendedDurationSec != null && message.hasOwnProperty(\"intendedDurationSec\"))\n                if (!$util.isInteger(message.intendedDurationSec))\n                    return \"intendedDurationSec: integer expected\";\n            if (message.synopsis != null && message.hasOwnProperty(\"synopsis\"))\n                if (!$util.isString(message.synopsis))\n                    return \"synopsis: string expected\";\n            if (message.prose != null && message.hasOwnProperty(\"prose\"))\n                if (!$util.isString(message.prose))\n                    return \"prose: string expected\";\n            if (message.childScraps != null && message.hasOwnProperty(\"childScraps\")) {\n                if (!Array.isArray(message.childScraps))\n                    return \"childScraps: array expected\";\n                for (var i = 0; i < message.childScraps.length; ++i)\n                    if (!$util.isString(message.childScraps[i]))\n                        return \"childScraps: string[] expected\";\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a Scrap message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Scrap\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Scrap} Scrap\n         */\n        Scrap.fromObject = function fromObject(object) {\n            if (object instanceof $root.Scrap)\n                return object;\n            var message = new $root.Scrap();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.intendedDurationSec != null)\n                message.intendedDurationSec = object.intendedDurationSec >>> 0;\n            if (object.synopsis != null)\n                message.synopsis = String(object.synopsis);\n            if (object.prose != null)\n                message.prose = String(object.prose);\n            if (object.childScraps) {\n                if (!Array.isArray(object.childScraps))\n                    throw TypeError(\".Scrap.childScraps: array expected\");\n                message.childScraps = [];\n                for (var i = 0; i < object.childScraps.length; ++i)\n                    message.childScraps[i] = String(object.childScraps[i]);\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a Scrap message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Scrap\n         * @static\n         * @param {Scrap} message Scrap\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Scrap.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.childScraps = [];\n            if (options.defaults) {\n                object.id = \"\";\n                object.intendedDurationSec = 0;\n                object.synopsis = \"\";\n                object.prose = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.intendedDurationSec != null && message.hasOwnProperty(\"intendedDurationSec\"))\n                object.intendedDurationSec = message.intendedDurationSec;\n            if (message.synopsis != null && message.hasOwnProperty(\"synopsis\"))\n                object.synopsis = message.synopsis;\n            if (message.prose != null && message.hasOwnProperty(\"prose\"))\n                object.prose = message.prose;\n            if (message.childScraps && message.childScraps.length) {\n                object.childScraps = [];\n                for (var j = 0; j < message.childScraps.length; ++j)\n                    object.childScraps[j] = message.childScraps[j];\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this Scrap to JSON.\n         * @function toJSON\n         * @memberof Scrap\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Scrap.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return Scrap;\n    })();\n    \n    $root.WritingWorkspace = (function() {\n    \n        /**\n         * Properties of a WritingWorkspace.\n         * @exports IWritingWorkspace\n         * @interface IWritingWorkspace\n         * @property {Array.<IScrap>|null} [scraps] WritingWorkspace scraps\n         */\n    \n        /**\n         * Constructs a new WritingWorkspace.\n         * @exports WritingWorkspace\n         * @classdesc Represents a WritingWorkspace.\n         * @implements IWritingWorkspace\n         * @constructor\n         * @param {IWritingWorkspace=} [properties] Properties to set\n         */\n        function WritingWorkspace(properties) {\n            this.scraps = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n    \n        /**\n         * WritingWorkspace scraps.\n         * @member {Array.<IScrap>} scraps\n         * @memberof WritingWorkspace\n         * @instance\n         */\n        WritingWorkspace.prototype.scraps = $util.emptyArray;\n    \n        /**\n         * Creates a new WritingWorkspace instance using the specified properties.\n         * @function create\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace=} [properties] Properties to set\n         * @returns {WritingWorkspace} WritingWorkspace instance\n         */\n        WritingWorkspace.create = function create(properties) {\n            return new WritingWorkspace(properties);\n        };\n    \n        /**\n         * Encodes the specified WritingWorkspace message. Does not implicitly {@link WritingWorkspace.verify|verify} messages.\n         * @function encode\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace} message WritingWorkspace message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WritingWorkspace.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scraps != null && message.scraps.length)\n                for (var i = 0; i < message.scraps.length; ++i)\n                    $root.Scrap.encode(message.scraps[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n    \n        /**\n         * Encodes the specified WritingWorkspace message, length delimited. Does not implicitly {@link WritingWorkspace.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof WritingWorkspace\n         * @static\n         * @param {IWritingWorkspace} message WritingWorkspace message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        WritingWorkspace.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n    \n        /**\n         * Decodes a WritingWorkspace message from the specified reader or buffer.\n         * @function decode\n         * @memberof WritingWorkspace\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {WritingWorkspace} WritingWorkspace\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WritingWorkspace.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.WritingWorkspace();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 2:\n                    if (!(message.scraps && message.scraps.length))\n                        message.scraps = [];\n                    message.scraps.push($root.Scrap.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Decodes a WritingWorkspace message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof WritingWorkspace\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {WritingWorkspace} WritingWorkspace\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        WritingWorkspace.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n    \n        /**\n         * Verifies a WritingWorkspace message.\n         * @function verify\n         * @memberof WritingWorkspace\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        WritingWorkspace.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scraps != null && message.hasOwnProperty(\"scraps\")) {\n                if (!Array.isArray(message.scraps))\n                    return \"scraps: array expected\";\n                for (var i = 0; i < message.scraps.length; ++i) {\n                    var error = $root.Scrap.verify(message.scraps[i]);\n                    if (error)\n                        return \"scraps.\" + error;\n                }\n            }\n            return null;\n        };\n    \n        /**\n         * Creates a WritingWorkspace message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof WritingWorkspace\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {WritingWorkspace} WritingWorkspace\n         */\n        WritingWorkspace.fromObject = function fromObject(object) {\n            if (object instanceof $root.WritingWorkspace)\n                return object;\n            var message = new $root.WritingWorkspace();\n            if (object.scraps) {\n                if (!Array.isArray(object.scraps))\n                    throw TypeError(\".WritingWorkspace.scraps: array expected\");\n                message.scraps = [];\n                for (var i = 0; i < object.scraps.length; ++i) {\n                    if (typeof object.scraps[i] !== \"object\")\n                        throw TypeError(\".WritingWorkspace.scraps: object expected\");\n                    message.scraps[i] = $root.Scrap.fromObject(object.scraps[i]);\n                }\n            }\n            return message;\n        };\n    \n        /**\n         * Creates a plain object from a WritingWorkspace message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof WritingWorkspace\n         * @static\n         * @param {WritingWorkspace} message WritingWorkspace\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        WritingWorkspace.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.scraps = [];\n            if (message.scraps && message.scraps.length) {\n                object.scraps = [];\n                for (var j = 0; j < message.scraps.length; ++j)\n                    object.scraps[j] = $root.Scrap.toObject(message.scraps[j], options);\n            }\n            return object;\n        };\n    \n        /**\n         * Converts this WritingWorkspace to JSON.\n         * @function toJSON\n         * @memberof WritingWorkspace\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        WritingWorkspace.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n    \n        return WritingWorkspace;\n    })();\n\n    return $root;\n});\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../../app/store';\nimport {CharacterAppearance} from '../utils/fetchCharacters';\nimport {TraitAppearance} from '../utils/fetchTraits';\n\nexport interface HeaderOptions {\n  currentScrapId: string;\n  showEditLink: boolean;\n  showReadLink: boolean;\n  showPrintLink: boolean;\n  characterFilters: CharacterAppearance[];\n  currentCharacterFilter?: string;\n  currentCompletionFilter?: string;\n  traitFilters: TraitAppearance[];\n  currentTraitFilter?: string;\n  isCurrentlyInSession: boolean; // In a timed writing session\n  currentWritingSessionStartEpoch: number;\n  lastCheckedWritingSessionEpoch: number;\n}\n\ninterface headerOptionsInState {\n  headerOptions: {\n    options: HeaderOptions\n  }\n}\n\nconst initialState = {\n  options: {\n    currentScrapId: '',\n    showEditLink: false,\n    showReadLink: false,\n    showPrintLink: false,\n    characterFilters: [],\n    currentCharacterFilter: '',\n    currentCompletionFilter: '',\n    traitFilters: [],\n    currentTraitFilter: '',\n    isCurrentlyInSession: false,\n    currentWritingSessionStartEpoch: 0,\n    lastCheckedWritingSessionEpoch: 0,\n  } as HeaderOptions\n};\n\n\nconst actionPrefix = 'headerOptions';\n\nconst headerOptionsSlice = createSlice({\n  name: actionPrefix,\n  initialState,\n  reducers: {\n    updateHeaderOptions(state, action: PayloadAction<object>) {\n      state.options = {\n        ...state.options,\n        ...action.payload\n      } as HeaderOptions;\n    },\n  }\n});\n\nexport const readHeaderOptions = (state: headerOptionsInState|RootState): HeaderOptions => {\n  return state.headerOptions.options;\n}\n\nexport const { updateHeaderOptions } = headerOptionsSlice.actions;\nexport default headerOptionsSlice.reducer;\n","\n\nexport function durationSecondsToString(durationSeconds: number): string {\n  let durationStr = '';\n\n  const hours = Math.floor(durationSeconds / 3600);\n  durationSeconds -= 3600 * hours;\n  durationStr += hours.toString().padStart(2, '0') + ':';\n\n  const minutes = Math.floor(durationSeconds / 60);\n  durationSeconds -= 60 * minutes;\n  durationStr += minutes.toString().padStart(2, '0') + ':';\n\n  durationStr += Math.round(durationSeconds).toString().padStart(2, '0');\n\n  return durationStr;\n}\n\nexport function durationStringToSeconds(durationString: string): number {\n  const expectedRegex = new RegExp('^[0-9:]+$');\n  if (!expectedRegex.test(durationString)) {\n    throw Error('Invalid duration string');\n  }\n\n  const splitDurationStr = durationString.split(':').filter(Boolean);\n\n  if (splitDurationStr.length > 3) {\n    throw Error('Invalid duration string');\n  }\n\n  let durationSec = 0;\n  for (let i = 0; i < splitDurationStr.length; i++) {\n    durationSec = (60 * durationSec) + parseInt(splitDurationStr[i], 10);\n  }\n\n  return durationSec;\n}\n","import React from 'react';\nimport {\n  Link\n} from 'react-router-dom';\nimport {Button, Dropdown, DropdownItemProps, Icon, Menu} from 'semantic-ui-react';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {readHeaderOptions, updateHeaderOptions} from './headerOptionsSlice';\nimport {durationSecondsToString} from '../utils/durationUtils';\n\nexport default function RevisionHeader() {\n  const dispatch = useAppDispatch();\n  const options = useAppSelector(readHeaderOptions);\n\n  const dispatchPartialOptionsUpdate = (partialUpdate: object) => {\n    dispatch(updateHeaderOptions(partialUpdate));\n  }\n\n  let characterFilters;\n  if (options.characterFilters.length && !options.showReadLink) {\n    const characterOptions = options.characterFilters.map((characterFilter) => {\n      return {\n        key: characterFilter.character,\n        text: `${characterFilter.character} (${Math.round(characterFilter.percentDurationSec * 1000) / 10}%)`,\n        value: characterFilter.character,\n      } as DropdownItemProps;\n    });\n\n    characterOptions.unshift({\n      key: 'none',\n      value: 'No Character Filter',\n      text: 'No Character Filter'\n    });\n\n    characterFilters = <Dropdown\n        text={options.currentCharacterFilter || 'Filter by character'}\n        floating\n        labeled\n        scrolling\n        item\n        className='icon'\n        value={options.currentCharacterFilter}\n        options={characterOptions}\n        onChange={(e, data) => {\n          dispatchPartialOptionsUpdate({\n            currentCharacterFilter: data.value as string,\n            currentCompletionFilter: '',\n            currentTraitFilter: '',\n          });\n        }}\n    />\n  }\n\n  let completionFilters;\n  if (!options.showReadLink) {\n    // Only show on the read page\n    completionFilters = <Dropdown\n        text={options.currentCompletionFilter || 'Filter by completion'}\n        floating\n        labeled\n        scrolling\n        item\n        className='icon'\n        value={options.currentCompletionFilter}\n        options={[\n          {\n            key: 'none',\n            value: '',\n            text: 'No Completion Filter'\n          },\n          {\n            key: 'pending',\n            value: 'Pending Completion',\n            text: 'Pending Completion'\n          }\n        ]}\n        onChange={(e, data) => {\n          dispatchPartialOptionsUpdate({\n            currentCharacterFilter: '',\n            currentTraitFilter: '',\n            currentCompletionFilter: data.value as string,\n          });\n        }}\n    />\n  }\n\n  let traitFilters;\n  if (options.traitFilters.length && !options.showReadLink) {\n    const traitOptions = options.traitFilters.map((traitFilter) => {\n      return {\n        key: traitFilter.trait,\n        text: `${traitFilter.trait} (${traitFilter.numberOfAppearances})`,\n        value: traitFilter.trait,\n      } as DropdownItemProps;\n    });\n\n    traitOptions.unshift({\n      key: 'none',\n      value: 'No Trait Filter',\n      text: 'No Trait Filter'\n    });\n\n    traitFilters = <Dropdown\n        text={options.currentTraitFilter || 'Filter by trait'}\n        floating\n        labeled\n        scrolling\n        item\n        className='icon'\n        value={options.currentTraitFilter}\n        options={traitOptions}\n        onChange={(e, data) => {\n          dispatchPartialOptionsUpdate({\n            currentCharacterFilter: '',\n            currentTraitFilter: data.value as string,\n            currentCompletionFilter: '',\n          });\n        }}\n    />\n  }\n\n  let editEntry;\n  if (options.showEditLink) {\n    editEntry = <Link to={'/scrap/' + options.currentScrapId}>\n      <Menu.Item>\n        <Icon name=\"edit\" />\n      </Menu.Item>\n    </Link>\n  }\n\n  let readEntry;\n  if (options.showReadLink) {\n    readEntry = <Link to={'/read/' + options.currentScrapId}>\n      <Menu.Item>\n        <Icon name=\"film\" />\n      </Menu.Item>\n    </Link>\n  }\n\n  let printEntry;\n  if (options.showPrintLink) {\n    printEntry = <Link to={'/print/' + options.currentScrapId}>\n      <Menu.Item>\n        <Icon name=\"print\" />\n      </Menu.Item>\n    </Link>\n  }\n\n  let timerEntry;\n  if (options.isCurrentlyInSession) {\n    timerEntry = <Menu.Item>\n      {durationSecondsToString((Date.now() - options.currentWritingSessionStartEpoch) / 1000)} spent writing\n    </Menu.Item>\n  } else {\n    timerEntry = <Menu.Item><Button\n      onClick={() => {\n        dispatchPartialOptionsUpdate({\n          isCurrentlyInSession: true,\n          currentWritingSessionStartEpoch: Date.now(),\n          lastCheckedWritingSessionEpoch: Date.now(),\n        });\n\n        // Update header state every second, to get the timer to visibly update\n        setInterval(() => {\n          dispatchPartialOptionsUpdate({\n            lastCheckedWritingSessionEpoch: Date.now(),\n          });\n        }, 1000);\n      }}\n    >Start writing session</Button></Menu.Item>\n  }\n\n  return (\n      <Menu>\n        <Link to={'/'}>\n          <Menu.Item header>Revision</Menu.Item>\n        </Link>\n        <Link to={'/data'}>\n          <Menu.Item>\n            <Icon name=\"save\" />\n          </Menu.Item>\n        </Link>\n        {timerEntry}\n        <Menu.Menu position='right'>\n          {completionFilters}\n          {traitFilters}\n          {characterFilters}\n          {editEntry}\n          {readEntry}\n          {printEntry}\n        </Menu.Menu>\n      </Menu>\n  );\n}\n","import {IScrap, Scrap} from '../../protos_v2';\nimport {ScrapMapInState} from './scrapListSlice';\n\nconst allScrapIdsKey = 'scrap-ids';\n\nfunction scrapKey(id: string): string {\n  return `scrap-${id}`;\n}\n\nexport function readAllScrapsFromStorage(): Scrap[] {\n  return readScrapIds().map((id) => {\n    return readScrap(id);\n  });\n}\n\nfunction readScrapIds(): string[] {\n  let storyIdString = localStorage.getItem(allScrapIdsKey) || '[]';\n  return JSON.parse(storyIdString) as string[];\n}\n\nfunction writeScrapIds(scrapIds: string[]): void {\n  localStorage.setItem(allScrapIdsKey, JSON.stringify(scrapIds));\n}\n\nfunction readScrap(id: string): Scrap {\n  let scrapString = localStorage.getItem(scrapKey(id));\n  if (!scrapString) {\n    throw Error(`Unable to read scrap ${id} from local storage`);\n  }\n\n  return Scrap.create(JSON.parse(scrapString));\n}\n\nexport function writeScrap(scrap: IScrap) {\n  localStorage.setItem(scrapKey(scrap.id as string), JSON.stringify(scrap));\n}\n\nexport function addScrapToStorage(scrap: IScrap): void {\n  writeScrap(scrap);\n\n  const allScrapIds = readScrapIds();\n  allScrapIds.push(scrap.id as string);\n  writeScrapIds(allScrapIds);\n}\n\n\nexport function clearScrapFromStorage(idToRemove: string): void {\n  let allScrapIds = readScrapIds();\n\n  writeScrapIds(allScrapIds.filter((id) => {\n    return id !== idToRemove;\n  }));\n\n  localStorage.removeItem(scrapKey(idToRemove));\n}\n\nexport function fetchInitialStateFromStorage() {\n  const initialState = {\n    scrapMap: {} as ScrapMapInState\n  };\n  readAllScrapsFromStorage().forEach((scrap) => {\n    initialState.scrapMap[scrap.id] = scrap.toJSON();\n  });\n\n  return initialState;\n}\n","import {createSlice, Middleware, PayloadAction} from '@reduxjs/toolkit';\nimport {RootState} from '../../app/store';\nimport {IScrap, Scrap} from '../../protos_v2';\nimport {addScrapToStorage, clearScrapFromStorage, fetchInitialStateFromStorage, writeScrap} from './scrapListPersistence';\n\nexport interface ScrapMap {\n  [key: string]: Scrap;\n}\n\nexport interface ScrapMapInState {\n  [key: string]: IScrap\n}\n\ninterface ScrapListInState {\n  scrapList: {\n    scrapMap: ScrapMapInState\n  }\n}\n\nconst initialState = fetchInitialStateFromStorage();\n\nconst actionPrefix = 'scrapList';\n\nconst ScrapListSlice = createSlice({\n  name: actionPrefix,\n  initialState,\n  reducers: {\n    createScrap(state, action: PayloadAction<IScrap>) {\n      state.scrapMap[action.payload.id as string] = action.payload;\n    },\n    updateScrap(state, action: PayloadAction<IScrap>) {\n      state.scrapMap[action.payload.id as string] = action.payload;\n    },\n    removeScrap(state, action: PayloadAction<string>) {\n      delete state.scrapMap[action.payload];\n    }\n  }\n});\n\nexport const scrapListPersistenceMiddleware: Middleware<{}, ScrapListInState>\n    = storeAPI => next => action => {\n  let result = next(action);\n\n  if (action.type.startsWith(actionPrefix + '/')) {\n    handleScrapListPersistence(action);\n  }\n\n  return result;\n}\n\nexport const handleScrapListPersistence = (action: PayloadAction<string|IScrap>) => {\n  switch (action.type) {\n    case `${actionPrefix}/createScrap`:\n      addScrapToStorage(action.payload as IScrap);\n      break;\n    case `${actionPrefix}/updateScrap`:\n      writeScrap(action.payload as IScrap);\n      break;\n    case `${actionPrefix}/removeScrap`:\n      clearScrapFromStorage(action.payload as string);\n      break;\n  }\n}\n\n// Selector for fetching full map of stories\nexport const selectScrapMap = (state: ScrapListInState|RootState): ScrapMap => {\n  const compiledScrapMap: ScrapMap = {};\n\n  for (const [key, value] of Object.entries(state.scrapList.scrapMap)) {\n    compiledScrapMap[key] = Scrap.fromObject(value);\n  }\n\n  return compiledScrapMap;\n}\n\n// Creates selector for particular Scrap\nexport const selectSpecificScrap = (id: string) => (state: ScrapListInState|RootState): Scrap|null => {\n  const fetchedScrap = state.scrapList.scrapMap[id];\n\n  if (!fetchedScrap) {\n    return null;\n  }\n\n  return Scrap.create(fetchedScrap);\n}\n\nexport const { createScrap, updateScrap, removeScrap } = ScrapListSlice.actions;\nexport default ScrapListSlice.reducer;\n","import {Button, Header, Card, Icon, Segment} from 'semantic-ui-react';\nimport { useHistory } from 'react-router-dom';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {IScrap, Scrap} from '../../protos_v2';\nimport { v4 as uuid } from 'uuid';\nimport {\n  Link\n} from 'react-router-dom';\nimport {createScrap, selectScrapMap, ScrapMap} from '../../features/scrapList/scrapListSlice';\nimport {durationSecondsToString} from '../../features/utils/durationUtils';\n\nfunction createNewScrap(): IScrap {\n  return Scrap.create({\n    id: uuid(),\n    synopsis: 'Story Content',\n    prose: 'Here is where you can summarize the story, and start to structure / brainstorm\\n'\n      + 'Feel free to create new scraps for alternative starting points, or new supporting docs '\n      + 'for this story.'\n  }).toJSON();\n}\n\nfunction getScrapSection(scrapMap: ScrapMap): JSX.Element {\n  const scrapList = Object.values(scrapMap);\n\n  const hasParentMap: {[key: string]: boolean} = {};\n  scrapList.forEach((scrap) => {\n    scrap.childScraps.forEach((childId) => {\n      hasParentMap[childId] = true;\n    });\n  });\n\n  if (!scrapList.length) {\n    return (\n        <Segment>Whoops, no scraps yet</Segment>\n    );\n  }\n\n  const preparedScrapList = scrapList.filter((scrap) => {\n    return !hasParentMap[scrap.id];\n  }).sort((a, b) => {\n    return b.intendedDurationSec - a.intendedDurationSec;\n  });\n\n  return <Segment style={{display: 'flex', flexWrap: 'wrap'}}>\n    {preparedScrapList.map((scrap, idx) => {\n      return (\n          <Link to={'/read/' + scrap.id} key={idx}>\n            <Card style={{margin: '8px'}}>\n              <Card.Content header={scrap.synopsis} />\n              <Card.Content>\n                <p>{durationSecondsToString(scrap.intendedDurationSec)}</p>\n              </Card.Content>\n            </Card>\n          </Link>\n      );\n    })}\n  </Segment>\n}\n\nexport default function Homepage() {\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n  const scrapMap = useAppSelector(selectScrapMap);\n\n  return (\n      <div style={{margin: '24px'}}>\n        <Segment.Group >\n          <Segment style={{display: 'flex'}}>\n            <Header size='medium'>Scrap List\n              <Header.Subheader>\n                All your top-level scraps (no parents)\n              </Header.Subheader>\n            </Header>\n            <div style={{flex: 1, textAlign: 'right'}}>\n              <Button icon color='green'\n                onClick={() => {\n                  const newScrap = createNewScrap();\n                  dispatch(createScrap(newScrap));\n\n                  history.push(`/scrap/${newScrap.id}`);\n                }}\n              >\n                <Icon name='add' />\n              </Button>\n            </div>\n          </Segment>\n          {getScrapSection(scrapMap)}\n        </Segment.Group>\n      </div>\n  );\n}\n","import {useAppSelector} from '../../app/hooks';\nimport {Button, Header, Segment} from 'semantic-ui-react';\n\nimport fileDownload from 'js-file-download';\nimport {WritingWorkspace} from '../../protos_v2';\nimport {addScrapToStorage, readAllScrapsFromStorage} from '../../features/scrapList/scrapListPersistence';\nimport {selectScrapMap} from '../../features/scrapList/scrapListSlice';\n\nfunction clearWorkspace() {\n  localStorage.clear();\n  window.location.reload();\n}\n\nfunction downloadWorkspace() {\n  const filename = 'writing_workspace_' + Date.now() + '.write';\n\n  fileDownload(loadDataFromStorage(), filename);\n}\n\nasync function uploadWorkspace(files: FileList|null) {\n  if (!files) {\n    return;\n  }\n\n  const fileData = await files[0].arrayBuffer();\n  const parsedData = new Uint8Array(fileData);\n  loadDataToStorage(parsedData);\n\n  window.location.reload();\n}\n\nexport function loadDataFromStorage(): Uint8Array {\n  const workspace = WritingWorkspace.create({\n    scraps: readAllScrapsFromStorage(),\n  });\n\n  return WritingWorkspace.encode(workspace).finish();\n}\n\nexport function loadDataToStorage(data: Uint8Array): void {\n  const workspace = WritingWorkspace.decode(data);\n\n  localStorage.clear();\n\n  workspace.scraps.forEach((scrap) => {\n    addScrapToStorage(scrap);\n  });\n}\n\n\nexport default function DataManagementPage() {\n  const scrapMap = useAppSelector(selectScrapMap);\n\n  return (\n      <div style={{margin: '24px'}}>\n        <Segment.Group >\n          <Segment style={{display: 'flex'}}>\n            <Header size='medium'>Data Management\n              <Header.Subheader>\n                Load, Save, or Clear your Workspace\n              </Header.Subheader>\n            </Header>\n          </Segment>\n          <Segment>\n            {Object.keys(scrapMap).length} Scraps\n          </Segment>\n          <Segment>\n            <Button color='green'\n                    onClick={() => {downloadWorkspace()}}>\n              Download Workspace\n            </Button>\n            <Button color='red'\n                    onClick={() => {clearWorkspace()}}>\n              Clear Workspace\n            </Button>\n          </Segment>\n          <Segment>\n            <Header size='small'>Upload Workspace</Header>\n            <input type=\"file\" accept=\".write\" onChange={(event) => uploadWorkspace(event.target.files)} />\n          </Segment>\n        </Segment.Group>\n      </div>\n  );\n}\n","import React from 'react';\n\nexport const LINES_PER_PAGE = 55;\nexport const ONE_LINE_DURATION_SEC = 1.0909; // (1 / LINES_PER_PAGE * 60);\nexport const PAGE_WIDTH_EM = '37em';\n\n/** Fields on the data for a block of parsed text */\nexport const scrapIdField = 'scrapId'; // Indicates which scrap defines this block of prose\nexport const ancestorField = 'ancestorField'; // Array of ancestor scrap IDs, excluding the current one\n\nexport const pendingDurationSecContribution = 'pendingDurationSecContribution'; // Seconds (perhaps partial) which will be contributed, when this is actually written\nexport const durationSecContribution = 'durationSecContribution'; // Seconds (perhaps partial) contributed to the script duration\n\nexport const isScrapTrait = 'isScrapTrait';\nexport const scrapTraitText = 'scrapTraitText';\nexport const isScrapPlaceholder = 'isScrapPlaceholder';\nexport const scrapPlaceholderText = 'scrapPlaceholderText';\nexport const scrapPlaceholderDurationSecField = 'scrapPlaceholderDurationSecField';\nexport const isScrapEmbedding = 'isScrapEmbedding';\nexport const scrapLink = 'scrapLink';\nexport const isFountainHeader = 'isFountainHeader';\nexport const isFountainCentered = 'isFountainCentered';\nexport const isFountainTransition = 'isFountainTransition';\nexport const isBlank = 'isBlank';\nexport const isComment = 'isComment';\nexport const isCommentStart = 'isCommentStart';\nexport const isCommentEnd = 'isCommentEnd';\nexport const isFountainCharacter = 'isFountainCharacter';\nexport const character = 'character';\nexport const isFountainDialogue = 'isFountainDialogue';\nexport const isFountainParenthetical = 'isFountainParenthetical';\nexport const isFountainAction = 'isFountainAction';\n\nexport const FOUNTAIN_EDITOR_STYLE: React.CSSProperties = {\n  border: '1px solid',\n  padding: '6em',\n  margin: 'auto',\n  width: '49em', // PAGE_WIDTH_EM + padding\n  overflowY: 'scroll',\n  fontSize: '16px',\n  fontFamily: 'CourierPrime, Courier, monospace',\n  flex: '1'\n}\n\nexport function mergeDataObject(dataObject: { [index: string]: boolean|string|number}, newData: { [index: string]: boolean|string|number}): { [index: string]: boolean|string|number} {\n  return {\n    ...dataObject,\n    ...newData\n  };\n}\n","import {ContentState} from 'draft-js';\nimport {PAGE_WIDTH_EM, scrapIdField} from './usefulConstants';\nimport React, {Component, ReactElement} from 'react';\nimport {Link} from 'react-router-dom';\nimport {Button} from 'semantic-ui-react';\n\ninterface FountainReadOnlyState {\n  isHover: boolean;\n  scrapId: string;\n}\n\nconst parseScrapIdFromProps = (props: any) => {\n  const contentState = props.contentState as ContentState;\n  const data = contentState.getBlockMap().get(props.blockKey).getData();\n  return data.get(scrapIdField);\n}\n\nexport class BaseReadOnlyComponent extends Component<any, FountainReadOnlyState> {\n\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      isHover: false,\n      scrapId: parseScrapIdFromProps(props)\n    }\n  }\n\n  buildScrapLinkButton(): ReactElement|null {\n    if (!this.state.isHover) {\n      return null;\n    }\n\n    const scrapLink = `/scrap/${this.state.scrapId}`;\n\n    return <Link to={scrapLink}>\n      <Button style={{cursor: 'pointer', position: 'absolute', top: '-12px', right: '-20px'}} circular color='blue' icon='edit outline' />\n    </Link>;\n  }\n\n  onMouseEnter(): void {\n    this.setState({\n      isHover: true\n    });\n  }\n\n  onMouseLeave(): void {\n    this.setState({\n      isHover: false\n    });\n  }\n\n  getParentStyle(): any {\n    const style: React.CSSProperties = {\n      position: 'relative',\n      paddingRight: '20px',\n      width: PAGE_WIDTH_EM,\n      margin: 0,\n    };\n\n    if (this.props.isFilterSelected) {\n      style.backgroundColor = '#f6f6c6';\n    }\n\n    if (this.state.isHover) {\n      style.backgroundColor = '#c6e1f6';\n    }\n\n    return style;\n  }\n\n  renderSpecific() {\n    return <span>{this.props.children}</span>\n  }\n\n  render() {\n    return (\n        <div style={this.getParentStyle()}\n             onMouseEnter={() => {this.onMouseEnter();}}\n             onMouseLeave={() => {this.onMouseLeave();}}>\n          {this.renderSpecific()}\n          {this.buildScrapLinkButton()}\n        </div>\n    );\n  }\n}\n","import React from 'react';\nimport {ContentBlock, ContentState} from 'draft-js';\nimport {durationSecContribution, isFountainHeader, ONE_LINE_DURATION_SEC, PAGE_WIDTH_EM} from './usefulConstants';\nimport {BaseReadOnlyComponent} from './BaseReadOnlyComponent';\n\nexport function fountainHeaderStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isFountainHeader)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsSceneHeader(blankBefore: boolean, blankAfter: boolean, blockText: string): boolean {\n  return blankBefore && blankAfter && ((/^(int|ext|est|i\\/e)[\\s.]/i).test(blockText) || (blockText.startsWith('.') && !blockText.startsWith('..')));\n}\n\nexport function sceneHeaderDurationSec(blockText: string): number {\n  return ONE_LINE_DURATION_SEC; // Assume one line per scene heading\n}\n\nexport function sceneHeaderData(blockText: string): { [index: string]: boolean|string|number} {\n  return {\n    [isFountainHeader]: true,\n    [durationSecContribution]: sceneHeaderDurationSec(blockText),\n  }\n}\n\n/**\n * Component to show a Fountain scene header in DraftJS.\n *\n */\nexport const FountainHeaderComponent = (props: any) => {\n  return (\n      <div style={{fontWeight: 'bold', width: PAGE_WIDTH_EM}} >{props.children}</div>\n  );\n}\n\nexport class FountainHeaderReadOnlyComponent extends BaseReadOnlyComponent {\n  renderSpecific(): JSX.Element {\n    return FountainHeaderComponent(this.props);\n  }\n}\n","// Props are:\n// https://github.com/facebook/draft-js/blob/main/src/model/decorators/DraftDecorator.js#L54-L71\nimport {ContentBlock, ContentState} from 'draft-js';\nimport React, {Component} from 'react';\nimport {useAppSelector} from '../../app/hooks';\nimport {ScrapMap, selectScrapMap} from '../scrapList/scrapListSlice';\nimport {\n  useHistory, useLocation\n} from 'react-router-dom';\nimport {durationSecondsToString} from '../utils/durationUtils';\nimport {Button, Icon} from 'semantic-ui-react';\nimport {isComment, isScrapEmbedding, scrapLink} from './usefulConstants';\n\nexport function scrapEmbeddingStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isScrapEmbedding)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsScrapEmbed(blockText: string): boolean {\n  if (!blockText.startsWith('{{') || !blockText.endsWith('}}')) {\n    return false;\n  }\n\n  return !(blockText.includes('|') || blockText.includes('@') || blockText.includes('#'));\n}\n\nexport function scrapEmbedData(blockText: string): { [index: string]: boolean|string} {\n  const scrapId = blockText.replace('{{', '').replace('}}', '').trim();\n\n  return {\n    [scrapLink]: scrapId,\n    [isScrapEmbedding]: true,\n  }\n}\n\n/**\n * Embedded component to show a scrap in a DraftJS editor.\n *\n * Assumes that `scrapLink` on the block's data contains the ID\n * */\nexport const ScrapEmbedComponent = (props: any) => {\n  const contentState = props.contentState as ContentState;\n  const data = contentState.getBlockMap().get(props.blockKey).getData();\n  const scrapId = data.get(scrapLink);\n  const inComment = data.get(isComment);\n\n  const scrapMap = useAppSelector(selectScrapMap);\n  const history = useHistory();\n  const currentLocation = useLocation();\n\n  const parentScrapId = getScrapIdFromUrl(currentLocation.pathname);\n\n  const backgroundColor = inComment ? '#cfead9' : '#555';\n\n  return (\n      <div\n          style={{\n            background: backgroundColor,\n            fontWeight: 'bold',\n            display: 'flex',\n            padding: '8px'\n          }}\n      >\n        <div style={{\n          margin: '0',\n          fontSize: '1px',\n          height: '2px',\n          width: '2px',\n          overflow: 'hidden',\n          color: backgroundColor\n        }} >{props.children}</div>\n        <div style={{flex: '1', cursor: 'pointer', padding: '8px', border: '1px solid', background: 'white', fontWeight: 'normal'}}>\n          <ScrapEmbedSummary\n            parentScrapId={parentScrapId}\n            scrapId={scrapId}\n            scrapMap={scrapMap}\n            onGotoScrap={() => { history.push(`/scrap/${scrapId}`) }}\n          />\n        </div>\n      </div>\n  );\n}\n\nfunction getScrapIdFromUrl(url: string): string {\n  return url.replace('/scrap/', '');\n}\n\n\ninterface ScrapEmbedSummaryProps {\n  parentScrapId: string;\n  scrapId: string;\n  scrapMap: ScrapMap;\n  onGotoScrap: () => void;\n}\n\nexport class ScrapEmbedSummary extends Component<ScrapEmbedSummaryProps> {\n  render() {\n    const scrap = this.props.scrapMap[this.props.scrapId];\n\n    if (!scrap) {\n      return (<div>\n        Scrap \"{this.props.scrapId}\" does not exist.\n      </div>)\n    }\n\n    if (this.props.scrapId === this.props.parentScrapId) {\n      return (<div style={{color: 'red'}}>\n        Scraps shouldn't include themselves\n      </div>);\n    }\n\n    return (<div style={{display: 'flex'}}>\n      <Button icon color='blue'\n              onClick={() => {this.props.onGotoScrap();}}\n      >\n        <Icon name='angle right' />\n      </Button>\n      <div style={{marginLeft: '24px', flex: '1'}}>\n        <div>{scrap.synopsis}</div>\n        <div>{durationSecondsToString(scrap.intendedDurationSec)}</div>\n      </div>\n    </div>);\n  }\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {durationSecContribution, isFountainTransition, ONE_LINE_DURATION_SEC, PAGE_WIDTH_EM} from './usefulConstants';\nimport React from 'react';\nimport {BaseReadOnlyComponent} from './BaseReadOnlyComponent';\n\n\nexport function fountainTransitionStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isFountainTransition)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsSceneTransition(blankBefore: boolean, blankAfter: boolean, blockText: string): boolean {\n  return blankBefore && blankAfter && ((blockText.startsWith('>') && !blockText.endsWith('<')) || (blockText.toUpperCase() === blockText && blockText.endsWith('TO:')));\n}\n\nexport function sceneTransitionDurationSec(blockText: string): number {\n  return ONE_LINE_DURATION_SEC; // Assume one line per scene heading\n}\n\nexport function sceneTransitionData(blockText: string): { [index: string]: boolean|string|number} {\n  return {\n    [isFountainTransition]: true,\n    [durationSecContribution]: sceneTransitionDurationSec(blockText)\n  }\n}\n\n/**\n * Component to show a Fountain transition in DraftJS.\n *\n */\nexport const FountainTransitionComponent = (props: any) => {\n  return (\n      <div style={{fontWeight: 'bold', textAlign: 'right', width: PAGE_WIDTH_EM}} >{props.children}</div>\n  );\n}\n\n\nexport class FountainTransitionReadOnlyComponent extends BaseReadOnlyComponent {\n  renderSpecific(): JSX.Element {\n    return FountainTransitionComponent(this.props);\n  }\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {durationSecContribution, isFountainCentered, ONE_LINE_DURATION_SEC, PAGE_WIDTH_EM} from './usefulConstants';\nimport React from 'react';\nimport {BaseReadOnlyComponent} from './BaseReadOnlyComponent';\n\n\nexport function fountainCenteredStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isFountainCentered)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsCentered(blockText: string): boolean {\n  return blockText.startsWith('>') && blockText.endsWith('<');\n}\n\nexport function sceneCenteredDurationSec(blockText: string): number {\n  return ONE_LINE_DURATION_SEC; // Assume one line per scene heading\n}\n\n\nexport function sceneCenteredData(blockText: string): { [index: string]: boolean|string|number} {\n  return {\n    [isFountainCentered]: true,\n    [durationSecContribution]: sceneCenteredDurationSec(blockText),\n  }\n}\n\n/**\n * Component to show a Fountain \"centered\" element in DraftJS.\n *\n */\nexport const FountainCenteredComponent = (props: any) => {\n  return (\n      <div style={{fontWeight: 'bold', textAlign: 'center', width: PAGE_WIDTH_EM}} >{props.children}</div>\n  );\n}\n\nexport class FountainCenteredReadOnlyComponent extends BaseReadOnlyComponent {\n  renderSpecific(): JSX.Element {\n    return FountainCenteredComponent(this.props);\n  }\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {character, durationSecContribution, isFountainCharacter, ONE_LINE_DURATION_SEC} from './usefulConstants';\nimport React from 'react';\nimport {BaseReadOnlyComponent} from './BaseReadOnlyComponent';\nimport {useAppSelector} from '../../app/hooks';\nimport {readHeaderOptions} from '../revision-header/headerOptionsSlice';\n\nexport function fountainCharacterStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isFountainCharacter)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsCharacter(blankBefore: boolean, blankAfter: boolean, blockText: string): boolean {\n  return blankBefore && !blankAfter && (blockText.toUpperCase() === blockText || blockText.startsWith('@'));\n}\n\nexport function characterDurationSec(blockText: string): number {\n  return ONE_LINE_DURATION_SEC * Math.ceil(blockText.length / 28); // About 28 characters per line\n}\n\nexport function characterData(blockText: string): { [index: string]: boolean|string|number} {\n  const parsedCharacter = blockText\n      .replace(/\\(V\\.O\\.\\)/i, '')\n      .replace(/\\(O\\.S\\.\\)/i, '')\n      .replace(/\\(CONT'D\\)/i, '')\n      .replace(/\\(CONT’D\\)/i, '')\n      .replace(/\\(PRE-LAP\\)/i, '')\n      .trim();\n\n  return {\n    [isFountainCharacter]: true,\n    [character]: parsedCharacter,\n    [durationSecContribution]: characterDurationSec(blockText)\n  }\n}\n\n/**\n * Component to show a Fountain character in DraftJS.\n *\n */\nexport const FountainCharacterComponent = (props: any) => {\n  return (\n      <div style={{fontWeight: 'bold', marginLeft: '12em', width: '17em'}} >{props.children}</div>\n  );\n}\n\n\nclass FountainCharacterReadOnlyClassComponent extends BaseReadOnlyComponent {\n  renderSpecific(): JSX.Element {\n    return FountainCharacterComponent(this.props);\n  }\n}\n\nexport const FountainCharacterReadOnlyComponent = (props: any) => {\n  let isFilterSelected = false;\n  let characterFilter = useAppSelector(readHeaderOptions).currentCharacterFilter;\n\n  const contentState = props.contentState as ContentState;\n  const data = contentState.getBlockMap().get(props.blockKey).getData();\n  if (characterFilter === data.get(character)) {\n    isFilterSelected = true;\n  }\n\n  return (\n      <FountainCharacterReadOnlyClassComponent\n          blockKey={props.blockKey}\n          contentState={props.contentState}\n          isFilterSelected={isFilterSelected}\n          key={props.key}\n          children={props.children} />\n  );\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {character, durationSecContribution, isFountainDialogue, ONE_LINE_DURATION_SEC} from './usefulConstants';\nimport React from 'react';\nimport {BaseReadOnlyComponent} from './BaseReadOnlyComponent';\nimport {useAppSelector} from '../../app/hooks';\nimport {readHeaderOptions} from '../revision-header/headerOptionsSlice';\n\nexport function fountainDialogueStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isFountainDialogue)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsDialogue(characterBefore: string, blockText: string): boolean {\n  return !!characterBefore && (!blockText.startsWith('(') || !blockText.endsWith(')'));\n}\n\nexport function dialogueDurationSec(blockText: string): number {\n  return ONE_LINE_DURATION_SEC * Math.ceil(blockText.length / 36); // About 36 characters per line of dialogue fit\n}\n\nexport function dialogueData(characterBefore: string, blockText: string): { [index: string]: boolean|string|number} {\n  return {\n    [isFountainDialogue]: true,\n    [character]: characterBefore,\n    [durationSecContribution]: dialogueDurationSec(blockText)\n  }\n}\n\n/**\n * Component to show Fountain dialogue in DraftJS.\n *\n */\nexport const FountainDialogueComponent = (props: any) => {\n  return (\n      <div style={{marginLeft: '6em', width: '23.5em'}} >{props.children}</div>\n  );\n}\n\nclass FountainDialogueReadOnlyClassComponent extends BaseReadOnlyComponent {\n  renderSpecific(): JSX.Element {\n    return FountainDialogueComponent(this.props);\n  }\n}\n\nexport const FountainDialogueReadOnlyComponent = (props: any) => {\n  let isFilterSelected = false;\n  let characterFilter = useAppSelector(readHeaderOptions).currentCharacterFilter;\n\n  const contentState = props.contentState as ContentState;\n  const data = contentState.getBlockMap().get(props.blockKey).getData();\n  if (characterFilter === data.get(character)) {\n    isFilterSelected = true;\n  }\n\n  return (\n      <FountainDialogueReadOnlyClassComponent\n          blockKey={props.blockKey}\n          contentState={props.contentState}\n          isFilterSelected={isFilterSelected}\n          key={props.key}\n          children={props.children} />\n  );\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {character, durationSecContribution, isFountainParenthetical, ONE_LINE_DURATION_SEC} from './usefulConstants';\nimport React from 'react';\nimport {BaseReadOnlyComponent} from './BaseReadOnlyComponent';\nimport {useAppSelector} from '../../app/hooks';\nimport {readHeaderOptions} from '../revision-header/headerOptionsSlice';\n\nexport function fountainParentheticalStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isFountainParenthetical)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsParenthetical(characterBefore: string, blockText: string): boolean {\n  return !!characterBefore && blockText.startsWith('(') && blockText.endsWith(')');\n}\n\nexport function parentheticalDurationSec(blockText: string): number {\n  return ONE_LINE_DURATION_SEC * Math.ceil(blockText.length / 30); // About 30 characters per line\n}\n\nexport function parentheticalData(characterBefore: string, blockText: string): { [index: string]: boolean|string|number} {\n  return {\n    [isFountainParenthetical]: true,\n    [character]: characterBefore,\n    [durationSecContribution]: parentheticalDurationSec(blockText)\n  }\n}\n\n/**\n * Component to show Fountain parenthetical in DraftJS.\n *\n */\nexport const FountainParentheticalComponent = (props: any) => {\n  return (\n      <div style={{marginLeft: '8.5em', width: '19.5em'}} >{props.children}</div>\n  );\n}\n\nclass FountainParentheticalReadOnlyClassComponent extends BaseReadOnlyComponent {\n  renderSpecific(): JSX.Element {\n    return FountainParentheticalComponent(this.props);\n  }\n}\n\nexport const FountainParentheticalReadOnlyComponent = (props: any) => {\n  let isFilterSelected = false;\n  let characterFilter = useAppSelector(readHeaderOptions).currentCharacterFilter;\n\n  const contentState = props.contentState as ContentState;\n  const data = contentState.getBlockMap().get(props.blockKey).getData();\n  if (characterFilter === data.get(character)) {\n    isFilterSelected = true;\n  }\n\n  return (\n      <FountainParentheticalReadOnlyClassComponent\n          blockKey={props.blockKey}\n          contentState={props.contentState}\n          isFilterSelected={isFilterSelected}\n          key={props.key}\n          children={props.children} />\n  );\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {durationSecContribution, isFountainAction, ONE_LINE_DURATION_SEC, PAGE_WIDTH_EM} from './usefulConstants';\nimport React from 'react';\nimport {BaseReadOnlyComponent} from './BaseReadOnlyComponent';\n\nexport function fountainActionStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isFountainAction)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function actionDurationSec(blockText: string): number {\n  return ONE_LINE_DURATION_SEC * Math.ceil(blockText.length / 56); // About 56 characters per line of action\n}\n\nexport function actionData(blockText: string): { [index: string]: boolean|string|number} {\n  return {\n    [isFountainAction]: true,\n    [durationSecContribution]: actionDurationSec(blockText),\n  }\n}\n\n/**\n * Component to show a Fountain action line in DraftJS.\n *\n */\nexport const FountainActionComponent = (props: any) => {\n  return (\n      <div style={{width: PAGE_WIDTH_EM}} >{props.children}</div>\n  );\n}\n\nexport class FountainActionReadOnlyComponent extends BaseReadOnlyComponent {\n  renderSpecific(): JSX.Element {\n    return FountainActionComponent(this.props);\n  }\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {durationSecContribution, isScrapPlaceholder, ONE_LINE_DURATION_SEC, pendingDurationSecContribution, scrapPlaceholderDurationSecField, scrapPlaceholderText} from './usefulConstants';\nimport {durationSecondsToString, durationStringToSeconds} from '../utils/durationUtils';\nimport React from 'react';\nimport {BaseReadOnlyComponent} from './BaseReadOnlyComponent';\n\nexport function scrapPlaceholderStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isScrapPlaceholder)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsScrapPlaceholder(blockText: string): boolean {\n  if (!blockText.startsWith('{{') || !blockText.endsWith('}}')) {\n    return false;\n  }\n\n  let splitText = blockText.split('|');\n  return splitText.length === 2;\n}\n\nexport function scrapPlaceholderData(blockText: string): { [index: string]: boolean|string|number} {\n  const content = blockText.replace('{{', '').replace('}}', '').trim().split('|');\n\n  const placeholderText = content[0].trim();\n  let durationSec = 0;\n  try {\n    durationSec = durationStringToSeconds(content[1].trim());\n  } catch {}\n\n  return {\n    [scrapPlaceholderText]: placeholderText,\n    [scrapPlaceholderDurationSecField]: durationSec,\n    [isScrapPlaceholder]: true,\n    [durationSecContribution]: scrapPlaceholderDurationSec(blockText),\n    [pendingDurationSecContribution]: scrapPlaceholderDurationSec(blockText),\n  }\n}\n\nexport function scrapPlaceholderDurationSec(blockText: string): number {\n  const content = blockText.replace('{{', '').replace('}}', '').trim();\n\n  try {\n    let durationStr = content.split('|')[1].trim();\n    return durationStringToSeconds(durationStr);\n  } catch {\n    // Invalid duration string\n  }\n\n  return 0;\n}\n\nexport const ScrapPlaceholderComponent = (props: any) => {\n  return <div\n      style={{\n        background: '#050',\n        color: 'white',\n        display: 'flex',\n        padding: '8px'\n      }}\n  >\n    <div style={{flex: 1}}>{props.children}</div>\n  </div>\n}\n\n\nexport class ScrapPlaceholderReadOnlyComponent extends BaseReadOnlyComponent {\n  renderSpecific(): JSX.Element {\n    const contentState = this.props.contentState as ContentState;\n    const data = contentState.getBlockMap().get(this.props.blockKey).getData();\n    const placeholderText = data.get(scrapPlaceholderText);\n    const durationSec = data.get(scrapPlaceholderDurationSecField);\n\n    const displayText = `${placeholderText}: ${durationSecondsToString(durationSec)}`;\n    const linesOfText = Math.ceil(displayText.length / 60) + 4; // 40px margin top/bottom\n    const numberOfLines = Math.ceil(durationSec / ONE_LINE_DURATION_SEC);\n    const heightStyle = `${20 * numberOfLines}px`;\n    // line = 20px\n\n    const numberOfInstances = Math.ceil(0.01 + numberOfLines / linesOfText);\n\n    return <div style={{\n      height: heightStyle,\n      background: '#afa',\n      overflow: 'hidden',\n      position: 'relative'\n    }}\n      >{Array(numberOfInstances).fill(0).map(() => {\n          return <div style={{display: 'block', padding: '40px 0'}}>{displayText}</div>\n        })}\n      <div style={{\n        position: 'absolute',\n        bottom: 0,\n        width: '100%',\n        height: '40px',\n        background: 'linear-gradient(180deg, transparent 0%, #afa 100%)',\n        zIndex: 1,\n      }}>\n        &nbsp;\n      </div>\n    </div>\n  }\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {isScrapTrait, scrapTraitText} from './usefulConstants';\nimport React from 'react';\n\nexport function scrapTraitStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isScrapTrait)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsScrapTrait(blockText: string): boolean {\n  if (!blockText.startsWith('{{') || !blockText.endsWith('}}')) {\n    return false;\n  }\n\n  return blockText.includes('#');\n}\n\nexport function scrapTraitData(blockText: string): { [index: string]: boolean|string|number} {\n  const content = blockText.replace('{{', '').replace('}}', '').trim();\n\n  return {\n    [scrapTraitText]: content,\n    [isScrapTrait]: true,\n  }\n}\n\nexport const ScrapTraitComponent = (props: any) => {\n  return <div\n      style={{\n        background: '#c00',\n        color: 'white',\n        display: 'flex',\n        padding: '8px'\n      }}\n  >\n    <div style={{flex: 1}}>{props.children}</div>\n  </div>\n}\n\nexport const ScrapTraitReadonlyComponent = (props: any) => {\n  return null; // Hide\n}\n","import {CharacterMetadata, ContentBlock, ContentState} from 'draft-js';\nimport Immutable from 'immutable';\nimport {ScrapMap} from '../scrapList/scrapListSlice';\nimport {Scrap} from '../../protos_v2';\nimport {character, durationSecContribution, isBlank, isComment, isCommentEnd, isCommentStart, mergeDataObject, ONE_LINE_DURATION_SEC, scrapLink} from './usefulConstants';\nimport {checkIsSceneHeader, sceneHeaderData, sceneHeaderDurationSec} from './FountainHeaderComponent';\nimport {checkIsScrapEmbed, scrapEmbedData} from './ScrapEmbedComponent';\nimport {checkIsSceneTransition, sceneTransitionData, sceneTransitionDurationSec} from './FountainTransitionComponent';\nimport {checkIsCentered, sceneCenteredData, sceneCenteredDurationSec} from './FountainCenteredComponent';\nimport {checkIsCommentEnd, checkIsCommentStart} from './CommentComponent';\nimport {characterData, characterDurationSec, checkIsCharacter} from './FountainCharacterComponent';\nimport {checkIsDialogue, dialogueData, dialogueDurationSec} from './FountainDialogueComponent';\nimport {checkIsParenthetical, parentheticalData, parentheticalDurationSec} from './FountainParentheticalComponent';\nimport {actionData, actionDurationSec} from './FountainActionComponent';\nimport {checkIsScrapPlaceholder, scrapPlaceholderData, scrapPlaceholderDurationSec} from './ScrapPlaceholderComponent';\nimport {checkIsScrapTrait, scrapTraitData} from './ScrapTraitComponent';\n\nexport interface ProcessProgress {\n  processStartEpoch: number;\n  currentDurationSec: number;\n  childScraps: Immutable.OrderedSet<string>;\n}\n\ninterface ProcessUpdate {\n  processProgress: ProcessProgress;\n  contentBlock: ContentBlock;\n}\n\n\nfunction applyStyles(character: CharacterMetadata, styles: Immutable.OrderedSet<string>): CharacterMetadata {\n  return (character as any).set('style', styles) as CharacterMetadata;\n}\n\nexport function isArrayEqualToImmutableSet(set: Immutable.OrderedSet<string>, array: string[]): boolean {\n  if (set.size !== array.length) {\n    return false;\n  }\n\n  for (let i = 0; i < array.length; i++) {\n    if (!set.includes(array[i])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// Process each content block, resetting the blockData and conditionally setting a flag for if the block\n// is blank or not. This function needs to be able to operate on each contentBlock independent of all the rest\nexport function preProcessProseBlock(contentBlock: ContentBlock): ContentBlock {\n  if (!contentBlock) {\n    return contentBlock;\n  }\n\n  let blockData: { [index: string]: boolean|string} = {};\n  let blockText = contentBlock.getText().trim();\n\n  if (!blockText.length) {\n    blockData[isBlank] = true;\n  } else {\n    if (checkIsCommentStart(blockText)) {\n      blockData[isCommentStart] = true;\n    }\n    if (checkIsCommentEnd(blockText)) {\n      blockData[isCommentEnd] = true;\n    }\n  }\n\n  return contentBlock.set('data', Immutable.fromJS(blockData)) as ContentBlock;\n}\n\nexport function processProseBlock(contentBlock: ContentBlock, blockBefore: null|ContentBlock, blockAfter: null|ContentBlock, processProgress: ProcessProgress, scrapMap: ScrapMap): ProcessUpdate {\n  if (!contentBlock) {\n    return {\n      processProgress: processProgress,\n      contentBlock: contentBlock\n    };\n  }\n\n  let blockData: { [index: string]: boolean|string|number} = contentBlock.getData().toJS();\n  let applyCharacterStyles = true;\n\n  let blockText = contentBlock.getText().trim();\n\n  const blankBefore: boolean = !!blockBefore ? blockBefore.getData().get(isBlank) : true;\n  const blankAfter: boolean = !!blockAfter ? blockAfter.getData().get(isBlank) : true;\n  const characterBefore: string = !!blockBefore ? (blockBefore.getData().get(character) || '') : '';\n\n  if (blockData[isBlank]) {\n    if (!blankBefore && !blockData[isComment]) { // We only want to count 1 contiguous block of \"blank\", since we remove redundant whitespace\n      processProgress.currentDurationSec += ONE_LINE_DURATION_SEC; // Assume one line of whitespace\n      blockData = mergeDataObject(blockData, {\n        [durationSecContribution]: ONE_LINE_DURATION_SEC\n      });\n    }\n  } else {\n    if (!blockData[isComment]) {\n      if (checkIsSceneHeader(blankBefore, blankAfter, blockText)) {\n        /** Scene header */\n        blockData = mergeDataObject(blockData, sceneHeaderData(blockText));\n\n        processProgress.currentDurationSec += sceneHeaderDurationSec(blockText);\n      } else if (checkIsSceneTransition(blankBefore, blankAfter, blockText)) {\n        /** Scene transition */\n        blockData = mergeDataObject(blockData, sceneTransitionData(blockText));\n\n        processProgress.currentDurationSec += sceneTransitionDurationSec(blockText);\n      } else if (checkIsCentered(blockText)) {\n        /** Centered action */\n        blockData = mergeDataObject(blockData, sceneCenteredData(blockText));\n\n        processProgress.currentDurationSec += sceneCenteredDurationSec(blockText);\n      } else if (checkIsCharacter(blankBefore, blankAfter, blockText)) {\n        /** Character */\n        blockData = mergeDataObject(blockData, characterData(blockText));\n\n        processProgress.currentDurationSec += characterDurationSec(blockText);\n      } else if (checkIsDialogue(characterBefore, blockText)) {\n        /** Dialogue */\n        blockData = mergeDataObject(blockData, dialogueData(characterBefore, blockText));\n\n        processProgress.currentDurationSec += dialogueDurationSec(blockText);\n      }\n      else if (checkIsParenthetical(characterBefore, blockText)) {\n        /** Parenthetical */\n        blockData = mergeDataObject(blockData, parentheticalData(characterBefore, blockText));\n\n        processProgress.currentDurationSec += parentheticalDurationSec(blockText);\n      } else if (checkIsScrapPlaceholder(blockText)) {\n        /** Scrap placeholder (for scrap that doesn't exist yet, for structure planning) */\n        blockData = mergeDataObject(blockData, scrapPlaceholderData(blockText));\n\n        processProgress.currentDurationSec += scrapPlaceholderDurationSec(blockText);\n      } else if (checkIsScrapTrait(blockText)) {\n      /** Scrap trait (for adding binary labels on scraps, for tracking / reporting) */\n      blockData = mergeDataObject(blockData, scrapTraitData(blockText));\n    } else if (!checkIsScrapEmbed(blockText)) {\n        /** Action */\n        blockData = mergeDataObject(blockData, actionData(blockText));\n\n        processProgress.currentDurationSec += actionDurationSec(blockText);\n      }\n    }\n\n    if (checkIsScrapEmbed(blockText)) {\n      /** Scrap link embedded in prose */\n      blockData = mergeDataObject(blockData, scrapEmbedData(blockText));\n\n      const scrapId = blockData[scrapLink] as string;\n\n      if (!!scrapMap[scrapId]) {\n        processProgress.childScraps = processProgress.childScraps.add(scrapId);\n\n        const childScrap = scrapMap[scrapId] as Scrap;\n\n        if (!blockData[isComment]) {\n          processProgress.currentDurationSec += childScrap.intendedDurationSec;\n        }\n      }\n    }\n  }\n\n  const updatedBlock = contentBlock.set('data', Immutable.fromJS(blockData)) as ContentBlock;\n\n  applyCharacterStyles = false;\n\n  const updatedCharacterList = updatedBlock.getCharacterList().map((c, idx) => {\n    if (!c || !applyCharacterStyles) { return c; }\n\n\n    // @ts-ignore\n    if (idx < 5) {\n      return applyStyles(c, Immutable.OrderedSet.of('BOLD', 'GREEN'));\n    } else {\n      return applyStyles(c, Immutable.OrderedSet());\n    }\n  });\n\n  const finalBlockUpdate = updatedBlock.set('characterList', updatedCharacterList) as ContentBlock;\n\n  return {\n    contentBlock: finalBlockUpdate,\n    processProgress: processProgress,\n  }\n}\n\ninterface ParsedProseResult {\n  contentState: ContentState;\n  totalDurationSec: number;\n  childScraps: Immutable.OrderedSet<string>;\n  showTimeoutWarning: boolean;\n}\n\nexport function parseAllProse(contentState: ContentState, scrapMap: ScrapMap, warnParsingThreshold: number, errorParsingThreshold: number): ParsedProseResult {\n\n  let newParseErrorState = false;\n\n  let processProgress = {\n    processStartEpoch: Date.now(),\n    currentDurationSec: 0,\n    childScraps: Immutable.OrderedSet<string>()\n  } as ProcessProgress;\n\n  let currentBlockMap = contentState.getBlockMap();\n  // @ts-ignore\n  const blockKeys = [ ...currentBlockMap.keys()];\n\n  for (let i = 0; i < blockKeys.length; i++) {\n    const nextKey = blockKeys[i];\n    currentBlockMap = currentBlockMap.set(nextKey, preProcessProseBlock(currentBlockMap.get(nextKey)));\n\n    const timeSoFar = Date.now() - processProgress.processStartEpoch;\n    if (timeSoFar > warnParsingThreshold) {\n      newParseErrorState = true;\n    }\n    if (timeSoFar > errorParsingThreshold) {\n      break;\n    }\n  }\n\n  // Mark all comment blocks as such\n  let currentlyInComment = false;\n  for (let i = 0; i < blockKeys.length; i++) {\n    const nextKey = blockKeys[i];\n    const blockData = currentBlockMap.get(nextKey).getData().toJS();\n    if (blockData[isCommentStart]) {\n      currentlyInComment = true;\n    }\n\n    if (currentlyInComment) {\n      const currentBlock = currentBlockMap.get(nextKey);\n\n      blockData[isComment] = true;\n      const updatedData = Immutable.fromJS(blockData);\n\n      const updatedBlock = currentBlock.set('data', updatedData) as ContentBlock;\n      currentBlockMap = currentBlockMap.set(nextKey, updatedBlock);\n    }\n\n    if (blockData[isCommentEnd]) {\n      currentlyInComment = false;\n    }\n    const timeSoFar = Date.now() - processProgress.processStartEpoch;\n    if (timeSoFar > warnParsingThreshold) {\n      newParseErrorState = true;\n    }\n    if (timeSoFar > errorParsingThreshold) {\n      break;\n    }\n  }\n\n  for (let i = 0; i < blockKeys.length; i++) {\n    const blockBefore = i > 0 ? currentBlockMap.get(blockKeys[i - 1]) : null;\n    const nextKey = blockKeys[i];\n    const blockAfter = i + 1 < blockKeys.length ? currentBlockMap.get(blockKeys[i + 1]) : null;\n\n    const update = processProseBlock(currentBlockMap.get(nextKey), blockBefore, blockAfter, processProgress, scrapMap);\n\n    processProgress = update.processProgress;\n\n    currentBlockMap = currentBlockMap.set(nextKey, update.contentBlock);\n    const timeSoFar = Date.now() - processProgress.processStartEpoch;\n    if (timeSoFar > warnParsingThreshold) {\n      newParseErrorState = true;\n    }\n    if (timeSoFar > errorParsingThreshold) {\n      break;\n    }\n  }\n\n  const newContent = contentState.set('blockMap', currentBlockMap) as ContentState;\n\n  const durationMs = Date.now() - processProgress.processStartEpoch;\n  console.log('Update took: ' + durationMs);\n\n  return {\n    contentState: newContent,\n    totalDurationSec: processProgress.currentDurationSec,\n    childScraps: processProgress.childScraps,\n    showTimeoutWarning: newParseErrorState\n  };\n}\n","import {ContentBlock, ContentState} from 'draft-js';\nimport {isComment, isScrapEmbedding, PAGE_WIDTH_EM} from './usefulConstants';\nimport React from 'react';\n\n\nexport function commentStrategy(contentBlock: ContentBlock, callback: (start: number, end: number) => void, contentState: ContentState) {\n  if (!!contentBlock.getData().get(isComment) && !contentBlock.getData().get(isScrapEmbedding)) {\n    callback(0, contentBlock.getText().length);\n  }\n}\n\nexport function checkIsCommentStart(blockText: string): boolean {\n  return blockText.startsWith('/*');\n}\n\n\nexport function checkIsCommentEnd(blockText: string): boolean {\n  return blockText.endsWith('*/');\n}\n\n/**\n * Component to show a block component element in DraftJS.\n *\n */\nexport const CommentComponent = (props: any) => {\n  return (\n      <div style={{fontStyle: 'italic', background: '#cfead9', width: PAGE_WIDTH_EM}}>{props.children}</div>\n  );\n}\n","import {CompositeDecorator} from 'draft-js';\nimport {ScrapEmbedComponent, scrapEmbeddingStrategy} from './ScrapEmbedComponent';\nimport {FountainHeaderComponent, FountainHeaderReadOnlyComponent, fountainHeaderStrategy} from './FountainHeaderComponent';\nimport {FountainTransitionComponent, FountainTransitionReadOnlyComponent, fountainTransitionStrategy} from './FountainTransitionComponent';\nimport {FountainCenteredComponent, FountainCenteredReadOnlyComponent, fountainCenteredStrategy} from './FountainCenteredComponent';\nimport {FountainCharacterComponent, FountainCharacterReadOnlyComponent, fountainCharacterStrategy} from './FountainCharacterComponent';\nimport {FountainDialogueComponent, FountainDialogueReadOnlyComponent, fountainDialogueStrategy} from './FountainDialogueComponent';\nimport {FountainParentheticalComponent, FountainParentheticalReadOnlyComponent, fountainParentheticalStrategy} from './FountainParentheticalComponent';\nimport {CommentComponent, commentStrategy} from './CommentComponent';\nimport {FountainActionComponent, FountainActionReadOnlyComponent, fountainActionStrategy} from './FountainActionComponent';\nimport {ScrapPlaceholderComponent, ScrapPlaceholderReadOnlyComponent, scrapPlaceholderStrategy} from './ScrapPlaceholderComponent';\nimport {ScrapTraitComponent, ScrapTraitReadonlyComponent, scrapTraitStrategy} from './ScrapTraitComponent';\n\n/** Decorator for the script editor */\nexport const editorDecorator = new CompositeDecorator([\n  {\n    strategy: scrapPlaceholderStrategy,\n    component: ScrapPlaceholderComponent,\n  },\n  {\n    strategy: scrapTraitStrategy,\n    component: ScrapTraitComponent,\n  },\n  {\n    strategy: scrapEmbeddingStrategy,\n    component: ScrapEmbedComponent,\n  },\n  {\n    strategy: fountainHeaderStrategy,\n    component: FountainHeaderComponent,\n  },\n  {\n    strategy: fountainTransitionStrategy,\n    component: FountainTransitionComponent,\n  },\n  {\n    strategy: fountainCenteredStrategy,\n    component: FountainCenteredComponent,\n  },\n  {\n    strategy: fountainCharacterStrategy,\n    component: FountainCharacterComponent,\n  },\n  {\n    strategy: fountainDialogueStrategy,\n    component: FountainDialogueComponent,\n  },\n  {\n    strategy: fountainParentheticalStrategy,\n    component: FountainParentheticalComponent,\n  },\n  {\n    strategy: commentStrategy,\n    component: CommentComponent,\n  },\n  {\n    strategy: fountainActionStrategy,\n    component: FountainActionComponent,\n  },\n]);\n\n/** Decorator for the script viewer (read-only) */\nexport const viewerDecorator = new CompositeDecorator([\n  {\n    strategy: scrapPlaceholderStrategy,\n    component: ScrapPlaceholderReadOnlyComponent,\n  },\n  {\n    strategy: scrapTraitStrategy,\n    component: ScrapTraitReadonlyComponent,\n  },\n  {\n    strategy: fountainHeaderStrategy,\n    component: FountainHeaderReadOnlyComponent,\n  },\n  {\n    strategy: fountainTransitionStrategy,\n    component: FountainTransitionReadOnlyComponent,\n  },\n  {\n    strategy: fountainCenteredStrategy,\n    component: FountainCenteredReadOnlyComponent,\n  },\n  {\n    strategy: fountainCharacterStrategy,\n    component: FountainCharacterReadOnlyComponent,\n  },\n  {\n    strategy: fountainDialogueStrategy,\n    component: FountainDialogueReadOnlyComponent,\n  },\n  {\n    strategy: fountainParentheticalStrategy,\n    component: FountainParentheticalReadOnlyComponent,\n  },\n  {\n    strategy: fountainActionStrategy,\n    component: FountainActionReadOnlyComponent,\n  },\n]);\n","// @ts-ignore\nimport getFragmentFromSelection from 'draft-js/lib/getFragmentFromSelection';\nimport {ContentState, Editor, EditorState, Modifier} from 'draft-js';\nimport * as clipboard from 'clipboard-polyfill/text';\nimport {v4 as uuid} from 'uuid';\nimport {editorDecorator} from './foutainDecorators';\nimport {Scrap} from '../../protos_v2';\nimport {durationStringToSeconds} from '../utils/durationUtils';\nimport {ScrapDetailsProps, ScrapDetailsState} from './ScrapDetails';\n\nexport function getSelectedText(editorState: EditorState): string {\n  const selected = getFragmentFromSelection(editorState);\n  return (selected ? selected.map((x: { getText: () => any; }) => x.getText()).join('\\n') : '') as string;\n}\n\nexport function onCut(\n    editor: Editor,\n    e: any,\n    removeWhenDone: boolean,\n    editorState: EditorState,\n    setState: (newState: any) => void): void\n{\n  e.preventDefault();\n\n  const selectedText = getSelectedText(editorState);\n  clipboard.writeText(selectedText).then(() => {\n    if (!removeWhenDone) {\n      return;\n    }\n\n    const newContentState = Modifier.replaceText(\n        editorState.getCurrentContent(),\n        editorState.getSelection(),\n        ''\n    );\n\n    setState({editorState: EditorState.set(editorState, {currentContent: newContentState})});\n  });\n}\n\n\nexport function addChildScrap(\n    editorState: EditorState,\n    onScrapCreate: (scrap: Scrap) => void,\n    setState: (newState: any, callback: () => void) => void,\n    then: () => void\n): void {\n  const currentSelection = editorState.getSelection();\n\n  const currentlySelectedText = getSelectedText(editorState);\n\n  const newScrapId = uuid();\n\n  const newScrap = Scrap.create({\n    id: newScrapId,\n    synopsis: 'New Scrap created in editor',\n    prose: 'this has placeholder content for now',\n  });\n  if (!!currentlySelectedText.trim().length) {\n    newScrap.prose = currentlySelectedText;\n  }\n\n  onScrapCreate(newScrap);\n\n  const thingToInsert = '\\n{{' + newScrapId + '}}\\n';\n\n  const newContentState = currentSelection.isCollapsed() ?\n      Modifier.insertText(\n          editorState.getCurrentContent(),\n          currentSelection,\n          thingToInsert\n      ) : Modifier.replaceText(\n          editorState.getCurrentContent(),\n          currentSelection,\n          thingToInsert\n      );\n\n  setState({\n    editorState: EditorState.createWithContent(ContentState.createFromText(newContentState.getPlainText()), editorDecorator)\n  }, () => {\n    then(); // remap\n  });\n}\n\nexport function replacePlaceholderScraps(\n    editorState: EditorState,\n    onScrapCreate: (scrap: Scrap) => void,\n    setState: (newState: any, callback: () => void) => void,\n    then: () => void\n): void {\n  const currentSelection = editorState.getSelection();\n\n  const currentlySelectedText = getSelectedText(editorState);\n  let textToSwap = currentlySelectedText;\n\n  let re = new RegExp('{{([^}]+)}}', 'g');\n  let match;\n  while (match = re.exec(currentlySelectedText)) {\n    const textToReplace = match[0];\n    const splitText = match[1].split('|');\n\n    if (splitText.length !== 2) {\n      continue;\n    }\n\n    let intendedDurationSec = 0;\n    try {\n      intendedDurationSec = durationStringToSeconds(splitText[1].trim());\n    } catch {}\n\n    const newScrapId = uuid();\n\n    const newScrap = Scrap.create({\n      id: newScrapId,\n      synopsis: splitText[0].trim(),\n      prose: textToReplace,\n      intendedDurationSec: intendedDurationSec\n    });\n\n\n    onScrapCreate(newScrap);\n\n    textToSwap = textToSwap.replace(\n        textToReplace,\n        '\\n{{' + newScrapId + '}}\\n'\n    );\n  }\n\n  const newContentState = Modifier.replaceText(\n      editorState.getCurrentContent(),\n      currentSelection,\n      textToSwap\n  );\n\n  setState({\n    editorState: EditorState.createWithContent(ContentState.createFromText(newContentState.getPlainText()), editorDecorator)\n  }, () => {\n    then();\n  });\n}\n\nexport function initializeState(props: ScrapDetailsProps): ScrapDetailsState {\n  return {\n    editorState: buildInitialEditorState(props),\n    lastEmittedStr: '',\n    scrapId: props.scrapId,\n    durationErrorString: null,\n    actualDurationSec: 0,\n    parentScrapIds: buildParentScrapIds(props),\n    parseErrorState: false,\n    durationInputKey: 'duration-key-' + Date.now(),\n    focusMode: false,\n  };\n}\n\nfunction buildInitialEditorState(props: ScrapDetailsProps): EditorState {\n  let thisScrap = props.scrapMap[props.scrapId];\n\n  if (!thisScrap) {\n    return EditorState.createEmpty();\n  }\n\n  return EditorState.createWithContent(ContentState.createFromText(thisScrap.prose), editorDecorator)\n}\n\nfunction buildParentScrapIds(props: ScrapDetailsProps): string[] {\n  const thisScrap = props.scrapMap[props.scrapId];\n  const parentScraps = [];\n  for (let key in props.scrapMap) {\n    const scrap = props.scrapMap[key] as Scrap;\n    if (scrap.childScraps.includes(thisScrap.id)) {\n      parentScraps.push(scrap.id);\n    }\n  }\n\n  return parentScraps;\n}\n","import React, {ReactElement} from 'react';\nimport {Scrap} from '../../protos_v2';\nimport {Breadcrumb, BreadcrumbDivider, BreadcrumbSection, Button, Form, Segment} from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\nimport {ScrapMap} from '../scrapList/scrapListSlice';\nimport {addChildScrap, replacePlaceholderScraps} from './editorInteractionUtils';\nimport {ScrapDetailsProps, ScrapDetailsState} from './ScrapDetails';\nimport {durationSecondsToString, durationStringToSeconds} from '../utils/durationUtils';\n\nexport function getBreadcrumbs(parentScrapIds: string[], scrapMap: ScrapMap): ReactElement {\n  const parentScraps = parentScrapIds.map((scrapId) => {\n    return scrapMap[scrapId];\n  }).filter(Boolean);\n\n  const parentScrapLinks = parentScraps.map<React.ReactNode>(((parentScrap: Scrap) => {\n    return (<BreadcrumbSection link>\n      <Link to={'/scrap/' + parentScrap.id}>{parentScrap.synopsis}</Link>\n    </BreadcrumbSection>)\n  }));\n\n  let scrapContribution;\n  if (parentScraps.length) {\n    scrapContribution = (<div>Scraps:\n      <Breadcrumb>\n        {\n          parentScrapLinks.reduce((prev, curr) => [prev, <BreadcrumbDivider icon='right chevron' />, curr])\n        }\n      </Breadcrumb>\n    </div>);\n  } else {\n    scrapContribution = (<div>No parent scraps</div>);\n  }\n\n  return (<div>\n    {scrapContribution}\n  </div>);\n}\n\nexport function getProseEditorToolbar(\n    props: ScrapDetailsProps,\n    state: ScrapDetailsState,\n    remapEditorContent: () => void,\n    setState: (newState: any, callback: () => void) => void,\n): ReactElement {\n  const parseWarning = state.parseErrorState ?\n      (<div style={{color: 'red'}}>Parsing took too long, please break into smaller chunks</div>) : null;\n\n  const focusLabel = state.focusMode ? 'Focus Off' : 'Focus On';\n\n  const actualDurationSec = state.actualDurationSec;\n  const intendedDurationSec = props.scrapMap[props.scrapId].intendedDurationSec;\n  let durationPercentLabel = `${Math.ceil(1000 * actualDurationSec / intendedDurationSec) / 10}% Complete`;\n\n  return <div>\n    <div style={{display: 'flex'}}>\n      <button onClick={() => addChildScrap(\n          state.editorState,\n          props.onScrapCreate,\n          (newState, callback) => {setState(newState, callback);},\n          () => remapEditorContent()\n      )}>Add child scrap</button>\n      <button onClick={() => replacePlaceholderScraps(\n          state.editorState,\n          props.onScrapCreate,\n          (newState, callback) => {setState(newState, callback);},\n          () => remapEditorContent()\n      )}>Replace placeholder scraps</button>\n      <span style={{flex: 1}}>&nbsp;</span>\n      <span style={{margin: 'auto 24px'}}>{durationPercentLabel}</span>\n      <button onClick={() => {\n        setState({\n          focusMode: !state.focusMode\n        }, () => {});\n      }}>{focusLabel}</button>\n    </div>\n    {parseWarning}\n  </div>;\n}\n\nexport function getPrimaryForm(\n    thisScrap: Scrap,\n    state: ScrapDetailsState,\n    props: ScrapDetailsProps,\n    setState: (newState: any, callback: () => void) => void,\n): ReactElement {\n  return <Segment>\n    <Form>\n      <div style={{display: 'flex'}}>\n        <div style={{flex: 1, margin: '16px 0'}}>\n          <Form.Input\n              label='Synopsis'\n              defaultValue={thisScrap.synopsis}\n              onChange={(e) => {\n                const scrap = props.scrapMap[props.scrapId] as Scrap;\n                scrap.synopsis = e.target.value;\n                props.onScrapUpdate(scrap);\n              }}\n          />\n        </div>\n        <div style={{flex: 1, margin: '16px'}}>\n          <Form.Input\n              key={state.durationInputKey}\n              style={{flex: 1}}\n              label='Intended Duration (HH:MM:SS)'\n              defaultValue={durationSecondsToString(thisScrap.intendedDurationSec)}\n              error={state.durationErrorString}\n              onChange={(e) => {\n                onDurationChange(e.target.value, props, setState);\n              }}\n          />\n        </div>\n        <div style={{flex: 1, margin: 'auto'}}>\n          <Form.Field>\n            <label>\n              Current Actual Duration: {durationSecondsToString(state.actualDurationSec)}\n            </label>\n            <Button\n                onClick={() => {\n                  updateExpectedDurationSec(props, state, setState);\n                }}\n                disabled={state.actualDurationSec === thisScrap.intendedDurationSec}\n            >\n              Update expected duration\n            </Button>\n          </Form.Field>\n        </div>\n      </div>\n    </Form>\n  </Segment>\n}\n\nfunction onDurationChange(newDuration: string, props: ScrapDetailsProps, setState: (newState: any, callback: () => void) => void) {\n  let durationSec;\n  try {\n    durationSec = durationStringToSeconds(newDuration);\n  } catch {\n    return setDurationErrorString(true, setState);\n  }\n\n  const scrap = props.scrapMap[props.scrapId] as Scrap;\n\n  scrap.intendedDurationSec = durationSec;\n  props.onScrapUpdate(scrap);\n  setDurationErrorString(false, setState);\n}\n\nfunction updateExpectedDurationSec(props: ScrapDetailsProps, state: ScrapDetailsState, setState: (newState: any, callback: () => void) => void): void {\n  const scrap = props.scrapMap[props.scrapId] as Scrap;\n\n  scrap.intendedDurationSec = state.actualDurationSec;\n  props.onScrapUpdate(scrap);\n  setState({\n    durationInputKey: 'duration-key-' + Date.now()\n  }, () => {\n    setDurationErrorString(false, setState);\n  });\n}\n\nfunction setDurationErrorString(hasError: boolean, setState: (newState: any, callback: () => void) => void) {\n  setState({\n    durationErrorString: hasError ? 'Please enter a duration of format HH:MM:SS' : null\n  }, () => {});\n}\n","import {ScrapMap} from '../scrapList/scrapListSlice';\nimport React, {Component} from 'react';\nimport {Editor, EditorState} from 'draft-js';\nimport 'draft-js/dist/Draft.css';\nimport {Scrap} from '../../protos_v2';\nimport debounce from 'debounce';\nimport {isArrayEqualToImmutableSet, parseAllProse} from './parseProse';\nimport {FOUNTAIN_EDITOR_STYLE} from './usefulConstants';\nimport {HeaderOptions} from '../revision-header/headerOptionsSlice';\nimport {initializeState, onCut} from './editorInteractionUtils';\nimport {getBreadcrumbs, getPrimaryForm, getProseEditorToolbar} from './ScrapDetailsHelperComponents';\n\nexport interface ScrapDetailsProps {\n  scrapId: string;\n  scrapMap: ScrapMap;\n  onScrapCreate: (scrap: Scrap) => void;\n  onScrapUpdate: (scrap: Scrap) => void;\n  headerOptions: HeaderOptions;\n  onUpdateHeaderOptions: (headerOptions: HeaderOptions) => void;\n}\n\nexport interface ScrapDetailsState {\n  editorState: EditorState;\n  lastEmittedStr: string;\n  scrapId: string;\n  durationErrorString: string|null;\n  parseErrorState: boolean;\n  actualDurationSec: number;\n  parentScrapIds: string[];\n  durationInputKey: string;\n  focusMode: boolean;\n}\n\nconst styleMap = {\n  'GREEN': {\n    color: 'green'\n  },\n}\n\nexport default class ScrapDetails extends Component<ScrapDetailsProps, ScrapDetailsState> {\n  domEditor: any;\n\n  constructor(props: ScrapDetailsProps) {\n    super(props);\n\n    this.state = initializeState(props);\n    this.remapEditorContent();\n  }\n\n  setHeaderOptions(): void {\n    this.props.onUpdateHeaderOptions({\n      ...this.props.headerOptions,\n      currentScrapId: this.props.scrapId,\n      showReadLink: true,\n      showEditLink: false,\n      showPrintLink: true,\n      characterFilters: [],\n      currentCharacterFilter: '',\n      currentCompletionFilter: '',\n      traitFilters: [],\n      currentTraitFilter: '',\n    });\n  }\n\n  componentDidMount() {\n    this.setHeaderOptions();\n  }\n\n  componentDidUpdate(prevProps: Readonly<ScrapDetailsProps>, prevState: Readonly<ScrapDetailsState>, snapshot?: any) {\n    if (this.state.scrapId === this.props.scrapId) {\n      return;\n    }\n\n    // Need to update\n    this.setHeaderOptions();\n    this.setState(initializeState(this.props));\n    this.remapEditorContent();\n  }\n\n  setDomEditorRef(ref: any) {\n    this.domEditor = ref;\n  }\n\n  focus(): void {\n    this.domEditor.focus();\n  }\n\n  onProseChange(newState: EditorState): void {\n    this.setState({editorState: newState});\n\n    this.remapEditorContent(); // Restyle, but only after things settle down a bit\n  }\n\n  persistProse(newProseStr: string): void {\n    const scrap = this.props.scrapMap[this.props.scrapId] as Scrap;\n\n    scrap.prose = newProseStr;\n    this.props.onScrapUpdate(scrap);\n  }\n\n  remapEditorContent = debounce(() => {\n    const newStrToEmit = this.state.editorState.getCurrentContent().getPlainText();\n\n    if (newStrToEmit === this.state.lastEmittedStr) {\n      return; // No need to update\n    }\n\n    this.persistProse(newStrToEmit);\n\n    const parseResult = parseAllProse(this.state.editorState.getCurrentContent(), this.props.scrapMap,50, 500);\n\n    // Check to see if we need to update the scrap b/c the references to child scraps changed\n    const thisScrap = this.props.scrapMap[this.props.scrapId];\n\n    if (!isArrayEqualToImmutableSet(parseResult.childScraps, thisScrap.childScraps)) {\n      const newScrap = Scrap.create({\n        ...thisScrap,\n        childScraps: [ ...(parseResult.childScraps.toArray()) ]\n      });\n\n      this.props.onScrapUpdate(newScrap);\n    }\n\n    this.setState({\n      editorState: EditorState.set(this.state.editorState, {currentContent: parseResult.contentState}),\n      lastEmittedStr: newStrToEmit,\n      actualDurationSec: Math.round(parseResult.totalDurationSec),\n      parseErrorState: parseResult.showTimeoutWarning,\n    });\n  }, 200);\n\n\n  render() {\n    let thisScrap = this.props.scrapMap[this.props.scrapId];\n\n    if (!thisScrap) {\n      return (\n          <div>Whoops, could not find scrap</div>\n      );\n    }\n\n    let noFocusSection = null;\n    if (!this.state.focusMode) {\n      noFocusSection = <div>\n        {getBreadcrumbs(this.state.parentScrapIds, this.props.scrapMap)}\n        {getPrimaryForm(\n            thisScrap,\n            this.state,\n            this.props,\n            (newState, callback) => { this.setState(newState, callback)}\n        )}\n      </div>\n    }\n\n    return (\n        <div style={{height: '100%', display: 'flex', flexDirection: 'column'}} key={'scrap-details-' + this.props.scrapId}>\n          {noFocusSection}\n          {getProseEditorToolbar(\n              this.props,\n              this.state,\n              this.remapEditorContent,\n              (newState, callback) => { this.setState(newState, callback)}\n          )}\n          <div\n              onClick={() => {this.focus()}}\n              style={FOUNTAIN_EDITOR_STYLE}>\n            <Editor\n                customStyleMap={styleMap}\n                stripPastedStyles={true}\n                onCut={(editor, e) => {\n                  onCut(editor, e, true, this.state.editorState, (newState) => {this.setState(newState);});\n                }}\n                onCopy={(editor, e) => {\n                  onCut(editor, e, false, this.state.editorState, (newState) => {this.setState(newState);});\n                }}\n                editorState={this.state.editorState}\n                ref={(ref) => {this.setDomEditorRef(ref);}}\n                onChange={(newState) => {this.onProseChange(newState); }}/>\n          </div>\n        </div>\n    );\n  }\n\n}\n","import { RouteComponentProps } from 'react-router';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {createScrap, selectScrapMap, updateScrap} from '../../features/scrapList/scrapListSlice';\nimport ScrapDetails from '../../features/scrapDetails/ScrapDetails';\nimport {readHeaderOptions, updateHeaderOptions} from '../../features/revision-header/headerOptionsSlice';\n\ninterface MatchParams {\n  id: string\n}\n\ninterface ScrapDetailsProps extends RouteComponentProps<MatchParams> {}\n\nexport default function ScrapDetailsPage (props: ScrapDetailsProps) {\n  const scrapMap = useAppSelector(selectScrapMap);\n  const headerOptions = useAppSelector(readHeaderOptions);\n  const dispatch = useAppDispatch();\n\n  return (\n      <ScrapDetails\n          scrapId={props.match.params.id}\n          scrapMap={scrapMap}\n          onScrapCreate={(scrap) => dispatch(createScrap(scrap.toJSON()))}\n          onScrapUpdate={(scrap) => dispatch(updateScrap(scrap.toJSON()))}\n          headerOptions={headerOptions}\n          onUpdateHeaderOptions={(headerOptions) => dispatch(updateHeaderOptions(headerOptions))}\n      />\n  )\n}\n","import React, {Component, ReactElement} from 'react';\n\ntype Candidate = {\n  label: string;\n  description: string;\n  currentScore: number;\n  wins: number;\n  losses: number;\n}\n\ntype MyState = {\n  showListInput: boolean;\n  showCurrentScores: boolean;\n  nextCandidateLabel: string;\n  nextCandidateDesc: string;\n\n  candidates: Candidate[];\n  winMatrix: number[][];\n  candidateIndexA: number;\n  candidateIndexB: number;\n}\n\nexport default class DecisionPage extends Component<any, MyState> {\n\n\n  state: MyState = {\n    showListInput: true,\n    showCurrentScores: false,\n    nextCandidateLabel: '',\n    nextCandidateDesc: '',\n    candidates: [],\n    winMatrix: [],\n    candidateIndexA: -1,\n    candidateIndexB: -1,\n  };\n\n  addCandidate(): void {\n    let newCandidates = [...this.state.candidates, {\n      label: this.state.nextCandidateLabel,\n      description: this.state.nextCandidateDesc,\n      currentScore: 1,\n      wins: 0,\n      losses: 0,\n    } as Candidate];\n\n    let defaultValue = 1 / (10 * newCandidates.length);\n    let winMatrix = [...Array(newCandidates.length)].map(e => Array(newCandidates.length).fill(defaultValue)) as number[][];\n\n    for (let i = 0; i < winMatrix.length; i++) {\n      winMatrix[i][i] = 0;\n    }\n\n    this.setState({\n      ...this.state,\n      candidates: newCandidates,\n      winMatrix: winMatrix,\n      nextCandidateLabel: '',\n      nextCandidateDesc: '',\n    });\n  }\n\n  setupNewComparison(): void {\n    let indexAWeights = this.state.candidates.map((ignore, idx) => {\n      return 1 / this.getTotalComparisons(idx);\n    });\n\n    let indexA = this.randomSelectWeighted(indexAWeights);\n\n    let indexBWeights = indexAWeights.map((ignore, idx) => {\n      if (idx === indexA) {\n        return 0;\n      }\n\n      return 1 / (this.state.winMatrix[idx][indexA] + this.state.winMatrix[indexA][idx]);\n    });\n\n    let indexB = this.randomSelectWeighted(indexBWeights);\n\n    this.setState({\n      ...this.state,\n      showListInput: false,\n      candidateIndexA: indexA,\n      candidateIndexB: indexB,\n    })\n  }\n\n  randomSelectWeighted(weights: number[]): number {\n    let sumWeight = weights.reduce(((previousValue, currentValue) => previousValue + currentValue));\n\n    let randomCutoff = Math.random() * sumWeight;\n    let sum = 0;\n    for (let i = 0; i < weights.length; i++) {\n      sum += weights[i];\n      if (sum >= randomCutoff) {\n        return i;\n      }\n    }\n\n    throw Error('should not get here');\n  }\n\n  getTotalComparisons(index: number): number {\n    let totalComparisons = 0;\n    for (let i = 0; i < this.state.winMatrix.length; i++) {\n      totalComparisons += this.state.winMatrix[index][i] + this.state.winMatrix[i][index];\n    }\n\n    return totalComparisons;\n  }\n\n  renderComparison(): ReactElement {\n    if (this.state.candidateIndexA < 0 || this.state.candidateIndexB < 0) {\n      return (<div>no comparison yet</div>);\n    }\n\n    let candidateA = this.state.candidates[this.state.candidateIndexA];\n    let candidateB = this.state.candidates[this.state.candidateIndexB];\n\n    return (<div style={{marginTop: '100px', marginBottom: '100px'}}>\n      <h2>Comparison</h2>\n      <div style={{display: 'flex'}}>\n        <div style={{flex: 1}}>\n          <h3>{candidateA.label}\n            <button onClick={() => this.updateWin(this.state.candidateIndexA, this.state.candidateIndexB)}>Select</button>\n          </h3>\n          {candidateA.description.split('\\n').map(line => (<p>{line}</p>))}\n        </div>\n        <div style={{flex: 1}}>\n          <h3>{candidateB.label}\n            <button onClick={() => this.updateWin(this.state.candidateIndexB, this.state.candidateIndexA)}>Select</button>\n          </h3>\n          {candidateB.description.split('\\n').map(line => (<p>{line}</p>))}\n        </div>\n      </div>\n    </div>)\n  }\n\n  updateWin(winIndex: number, loseIndex: number): void {\n    let winMatrix = this.state.winMatrix;\n    winMatrix[winIndex][loseIndex] += 1;\n\n    let candidates = this.state.candidates;\n    candidates[winIndex].wins += 1;\n    candidates[loseIndex].losses += 1;\n\n    // Update all the scores\n    // Based on sloppy implementation of https://stats.stackexchange.com/questions/83005/how-to-calculate-ratings-rankings-from-paired-comparison-pairwise-comparison-o\n    for (let iteration = 0; iteration < 1000; iteration++) {\n      // Naive iteration for now\n\n      for (let i = 0; i < candidates.length; i++) {\n\n        let W_i = 0;\n        for (let j = 0; j < candidates.length; j++) {\n          W_i += winMatrix[i][j];\n        }\n\n        let denominator = 0;\n        for (let j = 0; j < candidates.length; j++) {\n          if (i !== j) {\n            let N_ij = winMatrix[i][j] + winMatrix[j][i];\n            denominator += (N_ij) / (candidates[i].currentScore + candidates[j].currentScore);\n          }\n        }\n\n        candidates[i].currentScore = W_i / denominator;\n      }\n\n      // Re-normalize\n      let averageValue = 0;\n      for (let i = 0; i < candidates.length; i++) {\n        averageValue += candidates[i].currentScore;\n      }\n      averageValue /= candidates.length;\n      for (let i = 0; i < candidates.length; i++) {\n        candidates[i].currentScore /= averageValue;\n      }\n    }\n\n\n\n    this.setState({\n      ...this.state,\n      candidates: candidates,\n      winMatrix: winMatrix\n    }, () => {\n      this.setupNewComparison();\n    });\n  }\n\n  renderWinMatrix(): ReactElement {\n    if (!this.state.showCurrentScores) {\n      return (<div></div>);\n    }\n\n    return (<div><h2>Current Win Matrix</h2><pre>\n      {this.state.winMatrix.map(line => {\n        return line.join(',\\t') + '\\n';\n      })}\n    </pre></div>)\n  }\n\n  renderCandidates(): ReactElement {\n    if (!this.state.showCurrentScores && !this.state.showListInput) {\n      return (<div></div>);\n    }\n\n    let sortedCandidates = this.state.candidates\n        .map((candidate) => candidate) // Cheap sort\n        .sort((a, b) => b.currentScore - a.currentScore);\n\n    return (<div>\n      <h2>{sortedCandidates.length} Candidates</h2>\n      {sortedCandidates.map((candidate, idx) => {\n        return (<div>\n          <h3>{candidate.label} ({candidate.currentScore}, {candidate.wins} wins, {candidate.losses} losses)</h3>\n        </div>);\n      })}\n    </div>);\n  }\n\n  toggleShowCurrentScores(): void {\n    this.setState(\n        {...this.state, showCurrentScores: !this.state.showCurrentScores}\n    );\n  }\n\n  updateNextCandidateLabel(newValue: string): void {\n    this.setState({\n      ...this.state,\n      nextCandidateLabel: newValue\n    });\n  }\n\n  updateNextCandidateDesc(newValue: string): void {\n    this.setState({\n      ...this.state,\n      nextCandidateDesc: newValue\n    });\n  }\n\n  render() {\n    let mainContent;\n    if (this.state.showListInput) {\n      mainContent = (\n        <div>\n          <h2>Declare Candidates</h2>\n          <p>\n            Let's create some candidates\n          </p>\n          <div>\n            <input\n                type='text'\n                value={this.state.nextCandidateLabel}\n                onChange={(e) => this.updateNextCandidateLabel(e.target.value)} />\n            <textarea\n                value={this.state.nextCandidateDesc}\n                onChange={(e) => this.updateNextCandidateDesc(e.target.value)}></textarea>\n          </div>\n\n          <button style={{display: 'block'}} onClick={() => this.addCandidate()}>Add Candidate</button>\n          <button style={{display: 'block'}} onClick={() => this.setupNewComparison()}>Parse and begin</button>\n          {this.renderCandidates()}\n        </div>\n      );\n    } else {\n      mainContent = (<div>\n        {this.renderComparison()}\n\n        <button style={{display: 'block'}} onClick={() => this.toggleShowCurrentScores()}>Toggle results</button>\n\n        {this.renderWinMatrix()}\n        {this.renderCandidates()}\n      </div>);\n    }\n\n    return (\n        <div style={{margin: '24px'}}>\n          <h1>Decisions</h1>\n          <p>\n            Let's make some decisions based on pairwise comparisons. You know that FaceMash scene in Social Network?\n            It's just like that, except hopefully you're using it for better decisions.\n          </p>\n          {mainContent}\n        </div>\n    );\n  }\n}\n","import {ScrapMap} from '../scrapList/scrapListSlice';\nimport {ContentBlock, ContentState} from 'draft-js';\nimport {parseAllProse} from '../scrapDetails/parseProse';\nimport {ancestorField, isComment, isScrapEmbedding, scrapIdField, scrapLink} from '../scrapDetails/usefulConstants';\n\nexport function fetchParsedContentBlocksForScrap(scrapId: string, scrapAncestors: string[], scrapMap: ScrapMap): Array<ContentBlock> {\n  let prose = scrapMap[scrapId]?.prose || '';\n\n  let newAncestors = [...scrapAncestors, scrapId];\n\n  const initialContentState = ContentState.createFromText(prose);\n\n  const parseResult = parseAllProse(initialContentState, scrapMap, 500, 5000);\n\n  const allNewContentBlocks: Array<ContentBlock> = [];\n\n  parseResult.contentState.getBlocksAsArray().forEach((block) => {\n    const blockData = block.getData();\n\n    if (blockData.get(isComment)) {\n      // Skip\n      return;\n    }\n\n    if (!blockData.get(isScrapEmbedding)) {\n      // Simple addition, just append the ID of the scrap, and the ancestors at this point\n      let updatedBlock = block.set('data', blockData.set(scrapIdField, scrapId).set(ancestorField, scrapAncestors));\n\n      allNewContentBlocks.push(updatedBlock as ContentBlock);\n      return;\n    }\n\n    const embeddedScrapId = blockData.get(scrapLink);\n\n    if (!scrapMap[embeddedScrapId]) {\n      // Scrap doesn't exist, skip\n      return;\n    }\n\n    if (newAncestors.includes(embeddedScrapId)) {\n      throw Error(`Replacing scrap ${embeddedScrapId} would cause infinite recursion`);\n    }\n\n    const subBlocks = fetchParsedContentBlocksForScrap(embeddedScrapId, newAncestors, scrapMap);\n\n    allNewContentBlocks.push(...subBlocks);\n  });\n\n  return allNewContentBlocks;\n}\n","import {ScrapMap} from '../scrapList/scrapListSlice';\nimport {TimelineBlock, TimelineRow} from './Timeline';\nimport {ancestorField, character, durationSecContribution, isScrapPlaceholder, pendingDurationSecContribution, scrapIdField, scrapTraitText} from '../scrapDetails/usefulConstants';\nimport {ContentBlock} from 'draft-js';\n\ninterface ParsedTimeline {\n  totalDurationSec: number;\n  percentComplete: number;\n  rows: TimelineRow[];\n}\n\nexport function parseTimeline(parsedBlocks: ContentBlock[], scrapMap: ScrapMap): ParsedTimeline {\n  let rows: TimelineRow[] = [];\n\n  let totalDurationSec = 0;\n  let totalPendingSec = 0;\n  for (let i = 0; i < parsedBlocks.length; i++) {\n\n    const durationContribution = parsedBlocks[i].getData().get(durationSecContribution) || 0;\n    const incompleteContribution = parsedBlocks[i].getData().get(pendingDurationSecContribution) || 0;\n    if (!durationContribution) {\n      //continue;\n    }\n\n    const characterContribution = parsedBlocks[i].getData().get(character) || null;\n    const pendingCompletion = !!parsedBlocks[i].getData().get(isScrapPlaceholder);\n\n    const traitString = (parsedBlocks[i].getData().get(scrapTraitText) || '') as string;\n    const parsedTraits = traitString.split('#').filter(Boolean).map((untrimmed) => { return untrimmed.trim(); });\n\n    const ancestors = [\n        ...(parsedBlocks[i].getData().get(ancestorField) || []),\n        parsedBlocks[i].getData().get(scrapIdField) || ''\n    ];\n\n    for (let j = 0; j < ancestors.length; j++) {\n      if (rows.length <= j) {\n        // Need to add a new row\n        rows.push(new TimelineRow());\n      }\n\n      // Check to see what the last block's ID is\n      const lastBlockId = rows[j].lastBlockId();\n\n      if (ancestors[j] === lastBlockId) {\n        // Extend existing block\n        rows[j].blocks[rows[j].blocks.length - 1].durationSec += durationContribution;\n      } else {\n        rows[j].blocks.push(new TimelineBlock(\n            getScrapSynopsis(ancestors[j], scrapMap),\n            ancestors[j],\n            totalDurationSec,\n            durationContribution\n        ));\n      }\n\n      if (pendingCompletion) {\n        rows[j].blocks[rows[j].blocks.length - 1].pendingCompletion = true;\n      }\n      if (!!characterContribution) {\n        rows[j].blocks[rows[j].blocks.length - 1].characters.add(characterContribution);\n      }\n      parsedTraits.forEach((trait) => {\n        rows[j].blocks[rows[j].blocks.length - 1].traits.add(trait);\n      });\n    }\n\n    totalDurationSec += durationContribution;\n    totalPendingSec += incompleteContribution;\n  }\n\n  return {\n    totalDurationSec: totalDurationSec,\n    percentComplete: Math.ceil(1000 * (1 - (totalPendingSec / totalDurationSec))) / 10,\n    rows: rows,\n  }\n}\n\nfunction getScrapSynopsis(scrapId: string, scrapMap: ScrapMap): string {\n  return scrapMap[scrapId]?.synopsis || '';\n}\n","import {ScrapMap} from '../scrapList/scrapListSlice';\nimport React, {Component} from 'react';\nimport {Button, Icon, Popup} from 'semantic-ui-react';\nimport {durationSecondsToString} from '../utils/durationUtils';\nimport {parseTimeline} from './timelineParsing';\nimport {\n  Link\n} from 'react-router-dom';\nimport {ContentBlock} from 'draft-js';\n\nfunction formatPercentString(percent: number): string {\n  return `${percent}%`;\n}\n\nexport class TimelineBlock {\n  headerText: string;\n  id: string;\n  startSec: number;\n  durationSec: number;\n  characters: Set<string>;\n  pendingCompletion: boolean;\n  traits: Set<string>\n\n  constructor(headerText: string, id: string, startSec: number, durationSec: number) {\n    this.headerText = headerText;\n    this.id = id;\n    this.startSec = startSec;\n    this.durationSec = durationSec;\n    this.characters = new Set<string>();\n    this.pendingCompletion = false;\n    this.traits = new Set<string>();\n  }\n\n  render(totalDurationSec: number, currentCharacterFilter: string, highlightPendingCompletion: boolean, currentTraitFilter: string) {\n    let background = 'grey';\n\n    if (\n        this.characters.has(currentCharacterFilter) ||\n        (this.pendingCompletion && highlightPendingCompletion) ||\n        (this.traits.has(currentTraitFilter))\n    ) {\n      background = 'red';\n    }\n\n    return <Popup\n        key={'key-' + this.id}\n        content={durationSecondsToString(this.durationSec)}\n        header={this.headerText}\n        mouseEnterDelay={50}\n        mouseLeaveDelay={50}\n        trigger={\n          <Link\n              to={'/scrap/' + this.id}\n              style={{\n                cursor: 'pointer',\n                display: 'inline-block',\n                height: '100%',\n                boxShadow: 'inset 0px 0px 0px 1px #555',\n                position: 'absolute',\n                width: formatPercentString(100 * this.durationSec / totalDurationSec),\n                left: formatPercentString(100 * this.startSec / totalDurationSec),\n                background: background,\n                zIndex: 2,\n              }}\n          >\n          <div\n        >\n          &nbsp;\n          </div></Link>}\n    />\n  }\n}\n\nexport class TimelineRow {\n  blocks: TimelineBlock[] = [];\n\n  lastBlockId(): string {\n    if (!this.blocks.length) {\n      return '';\n    }\n\n    return this.blocks[this.blocks.length - 1].id;\n  }\n\n  render(totalDurationSec: number, zoomLevel: number, currentCharacterFilter: string, highlightPendingCompletion: boolean, currentTraitFilter: string) {\n    return <div style={{\n      position: 'relative',\n      width: formatPercentString(zoomLevel),\n      height: '40px',\n      borderBottom: '1px solid'\n    }}>\n      {this.blocks.map((block) => block.render(totalDurationSec, currentCharacterFilter, highlightPendingCompletion, currentTraitFilter))}\n    </div>\n  }\n}\n\nexport class Timeline {\n  isValid: boolean = false;\n  durationSec: number = 0;\n  percentComplete: number = 0;\n  rows: TimelineRow[] = [];\n\n  constructor(scrapId: string, scrapMap: ScrapMap, parsedContentBlocks: ContentBlock[]) {\n    if (!scrapMap[scrapId]) {\n      return;\n    }\n    const parseResult = parseTimeline(parsedContentBlocks, scrapMap);\n\n    this.durationSec = parseResult.totalDurationSec;\n    this.percentComplete = parseResult.percentComplete;\n    if (!this.durationSec) {\n      return;\n    }\n\n    this.isValid = true;\n\n    this.rows = parseResult.rows;\n  }\n\n  getSecondMarkers(zoomLevel: number): number[] {\n    const numLevels = Math.round(4 * (zoomLevel / 100)) + 1;\n    const stepLevel = (this.durationSec / (numLevels - 1));\n\n    let startingPoint = 0;\n    let steps = []\n    for (let i = 0; i < numLevels; i++) {\n      const nextContribution = Math.round(startingPoint);\n      steps.push(nextContribution);\n      startingPoint += stepLevel;\n    }\n\n    return steps;\n  }\n\n  render(zoomLevel: number, currentCharacterFilter: string, highlightPendingCompletion: boolean, currentTraitFilter: string) {\n    let secondMarkers = this.getSecondMarkers(zoomLevel);\n    let markerTopPadding = 41 * this.rows.length;\n\n    return <div style={{width: '100%', overflowX: 'scroll', background: 'lightgrey'}}>\n      {this.rows.map((row) => row.render(this.durationSec, zoomLevel, currentCharacterFilter, highlightPendingCompletion, currentTraitFilter))}\n      <div style={{height: '24px', position: 'relative', width: formatPercentString(zoomLevel), background: 'white'}}>\n        {secondMarkers.map((value, idx) => {\n\n          const markerStyle: React.CSSProperties = {\n            display: 'inline-block',\n            position: 'absolute',\n            fontSize: '16px',\n            fontFamily: 'CourierPrime, Courier, monospace',\n            paddingTop: `${markerTopPadding}px`,\n            top: `-${markerTopPadding}px`\n          };\n\n          if (idx + 1 === secondMarkers.length) {\n            markerStyle.paddingRight = '8px';\n            markerStyle.textAlign = 'right';\n            markerStyle.borderRight = '2px solid';\n            markerStyle.right = formatPercentString(100 - (100 * value / this.durationSec));\n          } else {\n            markerStyle.paddingLeft = '8px';\n            markerStyle.textAlign = 'left';\n            markerStyle.borderLeft = '2px solid';\n            markerStyle.left = formatPercentString(100 * value / this.durationSec);\n          }\n\n          return <div\n              style={markerStyle}>{durationSecondsToString(value)}</div>\n        })}\n      </div>\n    </div>\n  }\n}\n\ninterface TimelineProps {\n  scrapId: string;\n  scrapMap: ScrapMap;\n  parsedContentBlocks: ContentBlock[];\n  currentCharacterFilter: string;\n  currentCompletionFilter: string;\n  currentTraitFilter: string;\n}\n\ninterface TimelineState {\n  scrapId: string;\n  timeline: Timeline;\n  zoomLevel: number;\n  minimized: boolean;\n}\n\nexport class TimelineViewer extends Component<TimelineProps, TimelineState> {\n\n  constructor(props: TimelineProps) {\n    super(props);\n\n    this.state = this.initializeState(props);\n  }\n\n  initializeState(props: TimelineProps): TimelineState {\n    return {\n      scrapId: props.scrapId,\n      timeline: new Timeline(props.scrapId, props.scrapMap, props.parsedContentBlocks),\n      zoomLevel: 100,\n      minimized: false,\n    }\n  }\n\n  zoomIn() {\n    this.setState({\n      zoomLevel: this.state.zoomLevel * 2\n    });\n  }\n\n  zoomOut() {\n    this.setState({\n      zoomLevel: Math.max(100, this.state.zoomLevel / 2)\n    });\n  }\n\n  flipMinimization() {\n    this.setState({\n      minimized: !this.state.minimized\n    });\n  }\n\n  render() {\n    if (!this.state.timeline.isValid) {\n      return <div>... loading timeline... </div>\n    }\n\n    const zoomOptions = this.state.minimized ? null : (<div style={{display: 'inline-block'}}>\n      <Button onClick={() => this.zoomOut()} disabled={this.state.zoomLevel === 100} icon>\n        <Icon name='zoom-out' />\n      </Button>\n      <Button onClick={() => this.zoomIn()} icon>\n        <Icon name='zoom-in' />\n      </Button>\n    </div>);\n\n    return (<div>\n      <div style={{marginBottom: '12px', display: 'flex'}}>\n        {zoomOptions}\n        <span style={{flex: '1'}}>&nbsp;</span>\n        <span style={{margin: 'auto 24px'}}>Percent complete: {this.state.timeline.percentComplete}</span>\n        <Button onClick={() => this.flipMinimization()} icon>\n          <Icon name={this.state.minimized ? 'window maximize outline' : 'window minimize outline'}/>\n        </Button>\n      </div>\n      {this.state.minimized ? null : this.state.timeline.render(\n          this.state.zoomLevel,\n          this.props.currentCharacterFilter,\n          !!this.props.currentCompletionFilter,\n          this.props.currentTraitFilter\n      )}\n    </div>)\n  }\n}\n","import {ScrapMap} from '../scrapList/scrapListSlice';\nimport {Editor, ContentState, ContentBlock, EditorState} from 'draft-js';\nimport {Component, ReactElement} from 'react';\nimport {viewerDecorator} from './foutainDecorators';\nimport {FOUNTAIN_EDITOR_STYLE} from './usefulConstants';\n\ninterface ReadOnlyViewerProps {\n  scrapId: string;\n  scrapMap: ScrapMap;\n  parsedContentBlocks: ContentBlock[];\n}\n\ninterface ReadOnlyViewerState {\n  scrapId: string;\n  editorState: EditorState;\n}\n\nexport class ReadOnlyViewer extends Component<ReadOnlyViewerProps, ReadOnlyViewerState> {\n\n  constructor(props: ReadOnlyViewerProps) {\n    super(props);\n\n    this.state = this.initializeState(props);\n  }\n\n  initializeState(props: ReadOnlyViewerProps): ReadOnlyViewerState {\n    return {\n      scrapId: props.scrapId,\n      editorState: this.buildInitialEditorState(props)\n    };\n  }\n\n  componentDidUpdate(prevProps: Readonly<ReadOnlyViewerProps>, prevState: Readonly<ReadOnlyViewerState>, snapshot?: any) {\n    if (this.state.scrapId === this.props.scrapId) {\n      return;\n    }\n\n    // Need to update\n    this.setState(this.initializeState(this.props));\n  }\n\n  buildInitialEditorState(props: ReadOnlyViewerProps): EditorState {\n    let thisScrap = props.scrapMap[props.scrapId];\n\n    if (!thisScrap) {\n      return EditorState.createEmpty();\n    }\n\n    return EditorState.createWithContent(\n        ContentState.createFromBlockArray(\n            this.props.parsedContentBlocks),\n        viewerDecorator);\n  }\n\n  normalizeProse(prose: string): string {\n    return prose; // TODO: actually normalize things, remove comments, normalize whitespace\n  }\n\n  render(): ReactElement {\n    return <div\n        style={FOUNTAIN_EDITOR_STYLE}>\n      <Editor\n        readOnly\n        onChange={() => {}}\n        editorState={this.state.editorState}\n      />\n    </div>\n  }\n\n}\n","import { RouteComponentProps } from 'react-router';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {ScrapMap, selectScrapMap} from '../../features/scrapList/scrapListSlice';\nimport React, {Component} from 'react';\nimport {ContentBlock} from 'draft-js';\nimport {fetchParsedContentBlocksForScrap} from '../../features/utils/fetchParsedContentBlocksForScrap';\nimport {TimelineViewer} from '../../features/timeline/Timeline';\nimport {ReadOnlyViewer} from '../../features/scrapDetails/ReadOnlyViewer';\nimport {HeaderOptions, readHeaderOptions, updateHeaderOptions} from '../../features/revision-header/headerOptionsSlice';\nimport {fetchCharacters} from '../../features/utils/fetchCharacters';\nimport {fetchTraits} from '../../features/utils/fetchTraits';\n\ninterface MatchParams {\n  id: string\n}\n\ninterface ReadScrapProps extends RouteComponentProps<MatchParams> {}\n\nexport default function ReadScrapPage (props: ReadScrapProps) {\n  const scrapMap = useAppSelector(selectScrapMap);\n  const dispatch = useAppDispatch();\n  const headerOptions = useAppSelector(readHeaderOptions);\n\n  return (\n      <ReadScrap\n          scrapId={props.match.params.id}\n          scrapMap={scrapMap}\n          onUpdateHeaderOptions={(newHeaderOptions) => dispatch(updateHeaderOptions(\n              {\n                ...headerOptions,\n                ...newHeaderOptions,\n              }))}\n          headerOptions={headerOptions}\n      />\n  )\n}\n\ninterface ReadPageProps {\n  scrapId: string;\n  scrapMap: ScrapMap;\n  onUpdateHeaderOptions: (headerOptions: HeaderOptions) => void;\n  headerOptions: HeaderOptions;\n}\n\ninterface ReadPageState {\n  scrapId: string;\n  hasLoaded: boolean;\n  parsedContentBlocks: ContentBlock[];\n}\n\nexport class ReadScrap extends Component<ReadPageProps, ReadPageState> {\n\n  constructor(props: ReadPageProps) {\n    super(props);\n\n    this.state = {\n      scrapId: props.scrapId,\n      hasLoaded: false,\n      parsedContentBlocks: [],\n    };\n  }\n\n  componentDidMount() {\n    const parsedBlocks = fetchParsedContentBlocksForScrap(this.props.scrapId, [], this.props.scrapMap);\n\n    const characters = fetchCharacters(parsedBlocks);\n    const traits = fetchTraits(parsedBlocks);\n\n    this.setState({\n      hasLoaded: true,\n      parsedContentBlocks: parsedBlocks,\n    });\n\n    this.props.onUpdateHeaderOptions({\n      ...this.props.headerOptions,\n      currentScrapId: this.state.scrapId,\n      showReadLink: false,\n      showEditLink: true,\n      showPrintLink: true,\n      characterFilters: characters,\n      traitFilters: traits,\n    });\n  }\n\n  render() {\n    if (!this.state.hasLoaded) {\n      return <div> ... loading ...</div>\n    }\n\n    return <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      <TimelineViewer\n          scrapId={this.state.scrapId}\n          scrapMap={this.props.scrapMap}\n          parsedContentBlocks={this.state.parsedContentBlocks}\n          currentCharacterFilter={this.props.headerOptions.currentCharacterFilter || ''}\n          currentCompletionFilter={this.props.headerOptions.currentCompletionFilter || ''}\n          currentTraitFilter={this.props.headerOptions.currentTraitFilter || ''}\n      />\n      <ReadOnlyViewer\n          scrapId={this.state.scrapId}\n          scrapMap={this.props.scrapMap}\n          parsedContentBlocks={this.state.parsedContentBlocks}/>\n    </div>\n  }\n}\n","import {ContentBlock} from 'draft-js';\nimport {character, durationSecContribution} from '../scrapDetails/usefulConstants';\n\nexport interface CharacterAppearance {\n  character: string;\n  totalDurationSec: number;\n  percentDurationSec: number;\n}\n\nexport function fetchCharacters(parsedBlocks: ContentBlock[]): CharacterAppearance[] {\n  const characterMap: {[key: string]: CharacterAppearance} = {};\n\n  let totalDurationSec = 0;\n  parsedBlocks.forEach((block) => {\n    const blockData = block.getData();\n\n    const thisCharacter = blockData.get(character) as string;\n    const thisDurationSecContribution = (blockData.get(durationSecContribution) || 0) as number;\n\n    totalDurationSec += thisDurationSecContribution;\n\n    if (!!thisCharacter) {\n      if (!characterMap[thisCharacter]) {\n        characterMap[thisCharacter] = {\n          character: thisCharacter,\n          totalDurationSec: 0,\n          percentDurationSec: 0,\n        };\n      }\n      characterMap[thisCharacter].totalDurationSec += thisDurationSecContribution;\n    }\n  });\n\n  return Object.values(characterMap).sort((b, a) => {\n    return a.totalDurationSec - b.totalDurationSec;\n  }).map((characterEntry) => {\n    characterEntry.percentDurationSec = characterEntry.totalDurationSec / totalDurationSec;\n    return characterEntry;\n  });\n}\n","import {ContentBlock} from 'draft-js';\nimport {scrapTraitText} from '../scrapDetails/usefulConstants';\n\nexport interface TraitAppearance {\n  trait: string;\n  numberOfAppearances: number;\n}\n\nexport function fetchTraits(parsedBlocks: ContentBlock[]): TraitAppearance[] {\n  const traitMap: {[key: string]: TraitAppearance} = {};\n\n  parsedBlocks.forEach((block) => {\n    const blockData = block.getData();\n\n    const traitText = (blockData.get(scrapTraitText) || '') as string;\n    traitText.split('#').filter(Boolean).forEach((untrimmedTrait) => {\n      const trait = untrimmedTrait.trim();\n\n      if (!traitMap[trait]) {\n        traitMap[trait] = {\n          trait: trait,\n          numberOfAppearances: 0\n        };\n      }\n\n      traitMap[trait].numberOfAppearances += 1;\n    });\n  });\n\n  return Object.values(traitMap).sort((a, b) => {\n    return b.numberOfAppearances - a.numberOfAppearances;\n  });\n}\n","import React from 'react';\nimport {PDFViewer, Font, Page, Text, View, Document, StyleSheet } from '@react-pdf/renderer';\nimport {ContentBlock} from 'draft-js';\nimport {Scrap} from '../../protos_v2';\nimport {isFountainCentered, isFountainCharacter, isFountainDialogue, isFountainHeader, isFountainParenthetical, isFountainTransition} from '../../features/scrapDetails/usefulConstants';\nimport {\n  Style\n} from '@react-pdf/types';\nimport {PrintPageProps} from './PrintScrapPage';\n\n// Disable hyphenation\nFont.registerHyphenationCallback(word => [word]);\n\n// TODO: register CourierPrime, along with bold / italic versions so they can be leveraged\n\n// Create styles\nconst styles = StyleSheet.create({\n  page: {\n    fontFamily: 'Courier',\n    fontSize: '12pt',\n    paddingTop: '1in',\n    paddingLeft: '1.5in',\n    paddingRight: '1in',\n    paddingBottom: '1in',\n    margin: '0'\n  },\n  characterLine: {\n    marginLeft: '144pt',\n    width: '204pt'\n  },\n  dialogueLine: {\n    marginLeft: '72pt',\n    width: '282pt'\n  },\n  parentheticalLine: {\n    marginLeft: '102pt',\n    width: '234pt',\n  },\n  transitionLine: {\n    paddingTop: '16pt',\n    textAlign: 'right',\n  },\n  centeredLine: {\n    textAlign: 'center',\n  },\n  sceneHeaderLine: {\n    paddingBottom: '16pt'\n  },\n  block: {\n    paddingBottom: '16pt'\n  }\n});\n\n// Defines a block of elements that must exist on the same page\ninterface PDFBlock {\n  elements: ScriptElement[];\n}\n\nenum ElementType {\n  SCENE_HEADING,\n  ACTION,\n  DIALOGUE,\n  CHARACTER,\n  PARENTHETICAL,\n  TRANSITION,\n  CENTERED,\n}\n\ninterface ScriptElement {\n  text: string;\n  style?: Style;\n  type: ElementType,\n}\n\nfunction newPDFBlock(): PDFBlock {\n  return {\n    elements: []\n  };\n}\n\nfunction shouldCreateNewBlock(lastElementType: ElementType|null, nextElementType: ElementType): boolean {\n  if (nextElementType === ElementType.TRANSITION) {\n    return false; // Don't let transitions start on a page by themselves\n  }\n\n  if ([ElementType.DIALOGUE, ElementType.PARENTHETICAL].includes(nextElementType)) {\n    return false; // Dialogue / parentheticals shouldn't start a page by themselves\n  }\n\n  if (lastElementType === ElementType.SCENE_HEADING) {\n    return false; // Don't let a scene heading be the last thing on a page\n  }\n\n  return true;\n}\n\nfunction parsePDFBlocks(parsedContentBlocks: ContentBlock[]): PDFBlock[] {\n  const pdfBlocks: PDFBlock[] = [];\n\n  let nextPDFBlock = newPDFBlock();\n\n  parsedContentBlocks.forEach((block) => {\n    const blockData = block.getData();\n    const blockText = block.getText();\n\n    if (!blockText.trim().length) {\n      return;\n    }\n\n    let style: Style|undefined = undefined;\n    let type: ElementType = ElementType.ACTION; // Default to action.\n\n    if (blockData.get(isFountainCharacter)) {\n      style = styles.characterLine;\n      type = ElementType.CHARACTER;\n    } else if (blockData.get(isFountainDialogue)) {\n      style = styles.dialogueLine;\n      type = ElementType.DIALOGUE;\n    } else if (blockData.get(isFountainParenthetical)) {\n      style = styles.parentheticalLine;\n      type = ElementType.PARENTHETICAL;\n    } else if (blockData.get(isFountainTransition)) {\n      style = styles.transitionLine;\n      type = ElementType.TRANSITION;\n    } else if (blockData.get(isFountainCentered)) {\n      style = styles.centeredLine;\n      type = ElementType.CENTERED;\n    } else if (blockData.get(isFountainHeader)) {\n      style = styles.sceneHeaderLine;\n      type = ElementType.SCENE_HEADING;\n    }\n\n    const nextElement: ScriptElement = {\n      text: blockText,\n      style: style,\n      type: type,\n    };\n\n    const lastElementType = nextPDFBlock.elements.length ? nextPDFBlock.elements[nextPDFBlock.elements.length - 1].type : null;\n\n    if (shouldCreateNewBlock(lastElementType, nextElement.type)) {\n      // Time for a new block\n      pdfBlocks.push(nextPDFBlock);\n      nextPDFBlock = newPDFBlock();\n    } else {\n      // Time to continue the existing block\n    }\n\n    nextPDFBlock.elements.push(nextElement);\n\n  });\n\n  if (nextPDFBlock.elements.length) {\n    pdfBlocks.push(nextPDFBlock);\n  }\n\n  return pdfBlocks.filter((block) => {\n    return !!block.elements.length;\n  });\n}\n\n\n// Create Document Component\nfunction renderDocument(scrap: Scrap, parsedContentBlocks: ContentBlock[]): JSX.Element {\n\n  const parsedPDFBlocks = parsePDFBlocks(parsedContentBlocks);\n\n  let pageNumberElement: JSX.Element|null = (<Text style={{marginTop: '-16pt', textAlign: 'right'}} render={({ pageNumber, totalPages }) => {\n    if (pageNumber === 1) {\n      return '';\n    }\n\n    return `${pageNumber}.`\n  }} fixed />);\n\n  // For now, disable page numbering\n  pageNumberElement = null;\n\n  return <Document\n      title={scrap.synopsis}\n      author={'Me'}\n      creator={'Me'}\n      producer={'Revision (https://jon-simpkins.github.io/revision)'}\n  >\n    <Page size=\"LETTER\" style={styles.page} wrap>\n      {pageNumberElement}\n      {parsedPDFBlocks.map((pdfBlock) => (\n        <View wrap={false} style={styles.block}>\n          {pdfBlock.elements.map((element) => (\n              <Text style={element.style}>{element.text}</Text>\n          ))}\n        </View>\n      ))}\n    </Page>\n  </Document>\n}\n\nexport function renderExamplePDF(printPageProps: PrintPageProps, parsedContentBlocks: ContentBlock[]) {\n  const thisScrap = printPageProps.scrapMap[printPageProps.scrapId] as Scrap;\n\n  return <PDFViewer style={{flex: 1}}>\n    {renderDocument(thisScrap, parsedContentBlocks)}\n  </PDFViewer>\n}\n","import { RouteComponentProps } from 'react-router';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {ScrapMap, selectScrapMap} from '../../features/scrapList/scrapListSlice';\nimport React, {Component} from 'react';\nimport {ContentBlock} from 'draft-js';\nimport {fetchParsedContentBlocksForScrap} from '../../features/utils/fetchParsedContentBlocksForScrap';\nimport {HeaderOptions, readHeaderOptions, updateHeaderOptions} from '../../features/revision-header/headerOptionsSlice';\nimport {renderExamplePDF} from './savePDF';\n\ninterface MatchParams {\n  id: string\n}\n\ninterface PrintScrapProps extends RouteComponentProps<MatchParams> {}\n\nexport default function PrintScrapPage (props: PrintScrapProps) {\n  const scrapMap = useAppSelector(selectScrapMap);\n  const dispatch = useAppDispatch();\n  const headerOptions = useAppSelector(readHeaderOptions);\n\n  return (\n      <PrintScrap\n          scrapId={props.match.params.id}\n          scrapMap={scrapMap}\n          onUpdateHeaderOptions={(newHeaderOptions) => dispatch(updateHeaderOptions(\n              {\n                ...headerOptions,\n                ...newHeaderOptions,\n              }))}\n          headerOptions={headerOptions}\n      />\n  )\n}\n\nexport interface PrintPageProps {\n  scrapId: string;\n  scrapMap: ScrapMap;\n  onUpdateHeaderOptions: (headerOptions: HeaderOptions) => void;\n  headerOptions: HeaderOptions;\n}\n\ninterface PrintPageState {\n  scrapId: string;\n  hasLoaded: boolean;\n  parsedContentBlocks: ContentBlock[];\n}\n\nexport class PrintScrap extends Component<PrintPageProps, PrintPageState> {\n\n  constructor(props: PrintPageProps) {\n    super(props);\n\n    this.state = {\n      scrapId: props.scrapId,\n      hasLoaded: false,\n      parsedContentBlocks: [],\n    };\n  }\n\n  componentDidMount() {\n    const parsedBlocks = fetchParsedContentBlocksForScrap(this.props.scrapId, [], this.props.scrapMap);\n\n    this.setState({\n      hasLoaded: true,\n      parsedContentBlocks: parsedBlocks,\n    });\n\n    this.props.onUpdateHeaderOptions({\n      ...this.props.headerOptions,\n      currentScrapId: this.state.scrapId,\n      showReadLink: true,\n      showEditLink: true,\n      showPrintLink: false,\n    });\n  }\n\n  render() {\n    if (!this.state.hasLoaded) {\n      return <div> ... loading ...</div>\n    }\n\n    return <div style={{height: '100%', display: 'flex', flexDirection: 'column'}}>\n      {renderExamplePDF(this.props, this.state.parsedContentBlocks)}\n    </div>;\n  }\n}\n","import React from 'react';\nimport './App.css';\nimport RevisionHeader from './features/revision-header/RevisionHeader';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route\n} from 'react-router-dom';\n\nimport Homepage from './pages/homepage/Homepage';\nimport DataManagementPage from './pages/import-export/DataManagementPage';\nimport ScrapDetailsPage from './pages/scrap-details/ScrapDetailsPage';\nimport DecisionPage from './pages/decisions/DecisionPage';\nimport ReadScrapPage from './pages/read-scrap/ReadScrapPage';\nimport PrintScrapPage from './pages/print-scrap/PrintScrapPage';\n\nfunction App() {\n  return (\n      <div style={{padding: 0, margin: 0, height: '100vh'}}>\n    <Router >\n      <RevisionHeader />\n      <div style={{\n        height: 'calc(100% - 68px)',\n      }}>\n        <Switch>\n          <Route path=\"/decisions\" component={DecisionPage} />\n          <Route path=\"/data\" component={DataManagementPage} />\n          <Route path=\"/scrap/:id\" component={ScrapDetailsPage} />\n          <Route path=\"/read/:id\" component={ReadScrapPage} />\n          <Route path=\"/print/:id\" component={PrintScrapPage} />\n          <Route path=\"/\" component={Homepage} />\n        </Switch>\n      </div>\n    </Router>\n      </div>\n  );\n}\n\nexport default App;\n","import {configureStore, ThunkAction, Action} from '@reduxjs/toolkit';\nimport scrapListReducer, {scrapListPersistenceMiddleware} from '../features/scrapList/scrapListSlice';\nimport headerOptionsReducer from '../features/revision-header/headerOptionsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    scrapList: scrapListReducer,\n    headerOptions: headerOptionsReducer,\n  },\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat([\n    scrapListPersistenceMiddleware,\n  ])\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}