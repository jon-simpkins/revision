syntax = "proto3";

// Poor substitute for https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/timestamp.proto
message Timestamp {
  int64 seconds = 1;
  int32 nanos = 2;
}

// Poor substitute for https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/duration.proto
message Duration {
  int64 seconds = 1;
  int32 nanos = 2;
}

// Stats about a single writing session.
message WritingSession {

  // When did the session start?
  Timestamp start = 1;

  // How long did the whole session last?
  Duration duration = 2;

  // How long was the writer active during the session?
  // Here, we mean "how long was the Revision tool the visible tab?"
  // as a way of accounting for when someone alt-tabs over and browses Wikipedia
  // for 30 minutes as a way of procrastinating. Not that writers do that.
  Duration active_duration = 3;
}

// The metadata about the workspace
// (i.e. things which are not actually involved in the writing content).
message WritingWorkspaceMetadata {
  reserved 1;

  repeated WritingSession session_history = 2;
}

// The entire workspace for writing,
// this is the thing serialized to a single *.write file.
message WritingWorkspace {
  // Human-readable name of the workspace,
  // this is used in the filename when downloading (e.g. "spy-movie.write").
  string name = 1;

  // Metadata.
  WritingWorkspaceMetadata metadata = 2;

  // All structure templates
  repeated StructureTemplate structure_templates = 3;

  // All tags
  repeated Tag tags = 4;

  // All beats
  repeated Beat beats = 5;
}

// Template for breaking a beat up into smaller structures
message StructureTemplate {
  // unique identifier
  string id = 4;

  // Human-readable name
  string name = 1;

  // Elaboration of human-readable name
  string description = 2;

  message StructureTemplateBeat {
    string description = 1;

    // Intended duration of the Beat (in milliseconds)
    uint32 intended_duration_ms = 2;
  }

  repeated StructureTemplateBeat beats = 3;
}

message Tag {
  // Unique identifier
  string id = 1;

  // Human-readable name for this tag
  string name = 2;

  // Description of the tag, to elaborate on the name
  string description = 3;

  // If true, then references to this tag can have numeric values that can be
  // graphed
  bool has_numeric_value = 4;
}

message Beat {
  // Unique identifier for this beat
  string id = 1;

  // Intended duration of the Beat
  uint32 intended_duration_ms = 2;

  // Short string summarizing "what is this beat?"
  string synopsis = 3;

  // The actual writing content of the beat.
  string prose = 4;

  // The sub-structure of this beat, consisting of an ordered list of beat ids
  repeated string structure = 5;

  message TagReference {
    // ID of the Tag that this references
    string tag_id = 1;

    // Optional numeric value
    float numeric_value = 2;
  }

  // All tag references
  repeated TagReference tag_references = 6;

  message BrainstormEntry {
    // ID of the beat that this brainstorm entry references
    string beat_id = 1;

    // Should this brainstorm entry be visible by default?
    bool show = 2;

    // TODO: some measure of voting / score for how good the idea is
  }

  // Loose collection of brainstorm entries
  repeated BrainstormEntry brainstorm = 7;

  // TODO: measure of completeness here, maybe couple with feedback solicitation

  Timestamp last_updated = 8;
}
