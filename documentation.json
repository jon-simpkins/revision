{
    "pipes": [],
    "interfaces": [
        {
            "name": "StorageSubscription",
            "id": "interface-StorageSubscription-a4358def2c8c8680d1561c5a5228e5e2",
            "file": "src/app/storage.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {StorageMap} from '@ngx-pwa/local-storage';\nimport * as hash from 'object-hash';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface StorageSubscription {\n  subscriptionKey: string;\n  storageKey: string;\n  lastHashValue: string;\n  callback: (updatedValue: any) => void;\n}\n\nconst POLL_FREQUENCY = 250;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  // subscriptions\n  private subscriptions: Map<string, StorageSubscription> = new Map();\n\n  constructor(private storage: StorageMap) {\n    setInterval(async () => {\n      for (const subscription of this.subscriptions.values()) {\n        await this.checkSubscription(subscription);\n      }\n    }, POLL_FREQUENCY);\n  }\n\n  async get(key: string): Promise<any> {\n    return await this.storage.get(key).toPromise();\n  }\n\n  async set(key: string, value: any, isSubscribable: boolean = false): Promise<void> {\n\n    await this.storage.set(key, value).toPromise();\n\n    if (isSubscribable) {\n      // Store the hash value, so that other tabs can poll for the value and detect changes\n      // that they didn't necessarily make\n      const hashValue = hash(value, {algorithm: 'sha1'});\n      await this.storage.set(this.getHashKey(key), hashValue).toPromise();\n    }\n  }\n\n  generateSubscription(storageKey: string, callback: (updatedValue: any) => void): string {\n    const subscriptionUuid = uuidv4();\n\n    const newSubscription = {\n      storageKey,\n      callback,\n      subscriptionKey: subscriptionUuid,\n      lastHashValue: ''\n    } as StorageSubscription;\n\n    this.subscriptions.set(subscriptionUuid, newSubscription);\n\n    return subscriptionUuid;\n  }\n\n  cancelSubscription(subscriptionKey: string): void {\n    this.subscriptions.delete(subscriptionKey);\n  }\n\n  async checkSubscription(subscription: StorageSubscription): Promise<void> {\n    const fetchedHashValue = await this.storage.get(this.getHashKey(subscription.storageKey)).toPromise();\n    if (!fetchedHashValue) {\n      console.error('Subscription checked on storage key ' + subscription.storageKey\n        + ', please make sure it is being set with isSubscribable=true');\n      return;\n    }\n\n    const newHashValue = fetchedHashValue as string;\n    if (newHashValue === subscription.lastHashValue) {\n      return;\n    }\n\n    subscription.callback(\n      await this.get(subscription.storageKey)\n    );\n\n    subscription.lastHashValue = newHashValue;\n\n    this.subscriptions.set(subscription.subscriptionKey, subscription);\n  }\n\n  getHashKey(key: string): string {\n    return key + '-sha1';\n  }\n\n  async clearAll(): Promise<void> {\n    await this.storage.clear().toPromise();\n  }\n\n  async delete(key: string): Promise<void> {\n    await this.storage.delete(key).toPromise();\n  }\n}\n",
            "properties": [
                {
                    "name": "callback",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "lastHashValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "storageKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "subscriptionKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "StructureTemplateListView",
            "id": "interface-StructureTemplateListView-1ede068d45d2ff182107e053c3cd3cff",
            "file": "src/app/structure-template.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport {IStructureTemplate, StructureTemplate} from '../protos';\nimport {StorageService} from './storage.service';\nimport {zip} from 'rxjs';\n\n// Minimal details about a template to show in list view\nexport interface StructureTemplateListView {\n  id: string;\n  name: string;\n}\n\nconst ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY = 'allStructureTemplatesListView';\nconst STRUCTURE_TEMPLATE_KEY_PREFIX = 'structureTemplate-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StructureTemplateService {\n\n  constructor(private storageService: StorageService) { }\n\n  async getAllStructureTemplates(): Promise<StructureTemplate[]> {\n    const allEntries = await this.getAllTemplatesListView();\n\n    const allTemplates: StructureTemplate[] = [];\n    for (const entry of allEntries) {\n      const fetchedTemplate = await this.getStructureTemplate(entry.id);\n      if (fetchedTemplate != null) {\n        allTemplates.push(\n          fetchedTemplate\n        );\n      }\n    }\n\n    return allTemplates.filter((value) => !!value);\n  }\n\n  async getAllTemplatesListView(): Promise<StructureTemplateListView[]> {\n    return (await this.storageService.get(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY) || []) as StructureTemplateListView[];\n  }\n\n  async setAllTemplatesListView(structureTemplates: IStructureTemplate[]): Promise<void> {\n    const listView = structureTemplates.map((structureTemplate: IStructureTemplate) => {\n      return {\n        id: structureTemplate.id,\n        name: structureTemplate.name,\n      } as StructureTemplateListView;\n    });\n\n    await this.storageService.set(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY, listView, true);\n  }\n\n  subscribeToTemplateListView(handler: (newTemplateListView: StructureTemplateListView[]) => void): string {\n    return this.storageService.generateSubscription(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY, (fetchedValue) => {\n      handler((fetchedValue || []) as StructureTemplateListView[]);\n    });\n  }\n\n  cancelSubscriptionToTemplateListView(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  getTemplateKey(uuid: string): string {\n    return STRUCTURE_TEMPLATE_KEY_PREFIX + uuid;\n  }\n\n  async getStructureTemplate(uuid: string): Promise<StructureTemplate|null> {\n    const fetchedData = (await this.storageService.get(this.getTemplateKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find structure template: ' + uuid);\n      return null;\n    }\n\n    return StructureTemplate.decode(\n      fetchedData\n    );\n  }\n\n  async setAllStructureTemplates(structureTemplates: IStructureTemplate[]): Promise<void> {\n    await this.setAllTemplatesListView(structureTemplates);\n\n    for (const structureTemplate of structureTemplates) {\n      await this.setStructureTemplate(structureTemplate as StructureTemplate);\n    }\n  }\n\n  async setStructureTemplate(structureTemplate: StructureTemplate, affectsListView: boolean = false): Promise<void> {\n    await this.storageService.set(\n      this.getTemplateKey(structureTemplate.id),\n      StructureTemplate.encode(structureTemplate).finish(),\n      true\n    );\n\n    if (affectsListView) {\n      await this.refreshAllTemplatesListView();\n    }\n  }\n\n  async refreshAllTemplatesListView(): Promise<void> {\n    const allTemplates = await this.getAllStructureTemplates();\n\n    await this.setAllTemplatesListView(\n      allTemplates.filter((template) => !!template)\n    );\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    await this.storageService.delete(\n      this.getTemplateKey(templateId)\n    );\n\n    const listViewEligible = (await this.getAllTemplatesListView())\n      .filter((structureTemplate) => {\n        return structureTemplate.id !== templateId;\n    });\n\n    await this.setAllTemplatesListView(listViewEligible);\n  }\n\n  // Creates a new structure template, and returns the uuid of the new entry\n  async createNewStructureTemplate(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newStructureTemplate = StructureTemplate.create({\n      id: uuid\n    });\n\n    await this.setStructureTemplate(newStructureTemplate);\n\n    const allStructureTemplates = await this.getAllStructureTemplates();\n    allStructureTemplates.push(newStructureTemplate);\n\n    await this.setAllTemplatesListView(allStructureTemplates);\n\n    return uuid;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "StructureTemplateUpdate",
            "id": "interface-StructureTemplateUpdate-2f2908f7e7ec395410094e386145d550",
            "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {StructureTemplate} from '../../../protos';\n\nexport interface StructureTemplateUpdate {\n  structureTemplate: StructureTemplate;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-structure-template-details',\n  templateUrl: './structure-template-details.component.html',\n  styleUrls: ['./structure-template-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StructureTemplateDetailsComponent {\n  @Input()\n  structureTemplate: StructureTemplate|null = null;\n\n  @Output() templateUpdated = new EventEmitter<StructureTemplateUpdate>();\n\n  isEmpty(): boolean {\n    return this.structureTemplate == null;\n  }\n\n  onNameChange(value: string): void {\n    if (this.isEmpty()) {\n      return;\n    }\n    const structureTemplate = this.structureTemplate as StructureTemplate;\n    structureTemplate.name = value;\n\n    this.templateUpdated.emit({\n      structureTemplate,\n      modifiesListView: true\n    } as StructureTemplateUpdate);\n  }\n\n  onDescChange(value: string): void {\n    if (this.structureTemplate == null) {\n      return;\n    }\n    const structureTemplate = this.structureTemplate as StructureTemplate;\n    structureTemplate.description = value;\n\n    this.templateUpdated.emit({\n      structureTemplate,\n      modifiesListView: false\n    } as StructureTemplateUpdate);\n  }\n}\n",
            "properties": [
                {
                    "name": "modifiesListView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "structureTemplate",
                    "type": "StructureTemplate",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "MonolithicDataService",
            "id": "injectable-MonolithicDataService-1a03ab28361de0d49f24c76c87cfdca0",
            "file": "src/app/monolithic-data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelSubscriptionToWorkspaceName",
                    "args": [
                        {
                            "name": "subscriptionId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "subscriptionId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getWorkspaceName",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "loadWorkspace",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "WritingWorkspace"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 29,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "workspace",
                            "type": "WritingWorkspace",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newWorkspace",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<WritingWorkspace>",
                    "typeParameters": [],
                    "line": 37,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setWorkspaceName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToWorkspaceName",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "workspaceName",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 56,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "workspaceName",
                                    "type": "string"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {WritingWorkspace} from '../protos';\nimport {WorkspaceMetadataService} from './workspace-metadata.service';\nimport {StructureTemplateService} from './structure-template.service';\nimport {StorageService} from './storage.service';\n\nconst WORKSPACE_NAME_KEY = 'workspaceName';\n\n// This is the monolithic service that'll handle all the story data.\n//\n// This will certainly get broken up into smaller bits later on.\n@Injectable({\n  providedIn: 'root'\n})\nexport class MonolithicDataService {\n\n  constructor(private storageService: StorageService,\n              private workspaceMetadataService: WorkspaceMetadataService,\n              private structureTemplateService: StructureTemplateService) { }\n\n  async newWorkspace(name: string): Promise<void> {\n    await this.clear();\n    await this.loadWorkspace(WritingWorkspace.create({\n      name,\n    }));\n  }\n\n  // Function to load workspace into local memory.\n  async loadWorkspace(workspace: WritingWorkspace): Promise<void> {\n    await this.clear();\n    await this.setWorkspaceName(workspace.name);\n    await this.workspaceMetadataService.setWorkspaceMetadata(workspace.metadata || null);\n    await this.structureTemplateService.setAllStructureTemplates(workspace.structureTemplates || []);\n  }\n\n  // Function to pull workspace from local memory.\n  async saveWorkspace(): Promise<WritingWorkspace> {\n    const workspace = WritingWorkspace.create();\n\n    workspace.name = await this.getWorkspaceName();\n    workspace.metadata = await this.workspaceMetadataService.getWorkspaceMetadata(true);\n    workspace.structureTemplates = await this.structureTemplateService.getAllStructureTemplates();\n\n    return Promise.resolve(workspace);\n  }\n\n  async setWorkspaceName(name: string): Promise<void> {\n    await this.storageService.set(WORKSPACE_NAME_KEY, name, true);\n  }\n\n  async getWorkspaceName(): Promise<string> {\n    return (await this.storageService.get(WORKSPACE_NAME_KEY) as string)\n      || '';\n  }\n\n  subscribeToWorkspaceName(handler: (workspaceName: string) => void): string {\n    return this.storageService.generateSubscription(WORKSPACE_NAME_KEY, (result) => {\n      handler(result as string);\n    });\n  }\n\n  cancelSubscriptionToWorkspaceName(subscriptionId: string): void {\n    this.storageService.cancelSubscription(subscriptionId);\n  }\n\n  async clear(): Promise<void> {\n    await this.storageService.clearAll();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    },
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService"
                    },
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-a4358def2c8c8680d1561c5a5228e5e2",
            "file": "src/app/storage.service.ts",
            "properties": [
                {
                    "name": "subscriptions",
                    "defaultValue": "new Map()",
                    "type": "Map<string | StorageSubscription>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cancelSubscription",
                    "args": [
                        {
                            "name": "subscriptionKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "jsdoctags": [
                        {
                            "name": "subscriptionKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSubscription",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "StorageSubscription"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 66,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "StorageSubscription",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 92,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateSubscription",
                    "args": [
                        {
                            "name": "storageKey",
                            "type": "string"
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "function": [
                                {
                                    "name": "updatedValue",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "storageKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "function": [
                                {
                                    "name": "updatedValue",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHashKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "isSubscribable",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSubscribable",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {StorageMap} from '@ngx-pwa/local-storage';\nimport * as hash from 'object-hash';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface StorageSubscription {\n  subscriptionKey: string;\n  storageKey: string;\n  lastHashValue: string;\n  callback: (updatedValue: any) => void;\n}\n\nconst POLL_FREQUENCY = 250;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  // subscriptions\n  private subscriptions: Map<string, StorageSubscription> = new Map();\n\n  constructor(private storage: StorageMap) {\n    setInterval(async () => {\n      for (const subscription of this.subscriptions.values()) {\n        await this.checkSubscription(subscription);\n      }\n    }, POLL_FREQUENCY);\n  }\n\n  async get(key: string): Promise<any> {\n    return await this.storage.get(key).toPromise();\n  }\n\n  async set(key: string, value: any, isSubscribable: boolean = false): Promise<void> {\n\n    await this.storage.set(key, value).toPromise();\n\n    if (isSubscribable) {\n      // Store the hash value, so that other tabs can poll for the value and detect changes\n      // that they didn't necessarily make\n      const hashValue = hash(value, {algorithm: 'sha1'});\n      await this.storage.set(this.getHashKey(key), hashValue).toPromise();\n    }\n  }\n\n  generateSubscription(storageKey: string, callback: (updatedValue: any) => void): string {\n    const subscriptionUuid = uuidv4();\n\n    const newSubscription = {\n      storageKey,\n      callback,\n      subscriptionKey: subscriptionUuid,\n      lastHashValue: ''\n    } as StorageSubscription;\n\n    this.subscriptions.set(subscriptionUuid, newSubscription);\n\n    return subscriptionUuid;\n  }\n\n  cancelSubscription(subscriptionKey: string): void {\n    this.subscriptions.delete(subscriptionKey);\n  }\n\n  async checkSubscription(subscription: StorageSubscription): Promise<void> {\n    const fetchedHashValue = await this.storage.get(this.getHashKey(subscription.storageKey)).toPromise();\n    if (!fetchedHashValue) {\n      console.error('Subscription checked on storage key ' + subscription.storageKey\n        + ', please make sure it is being set with isSubscribable=true');\n      return;\n    }\n\n    const newHashValue = fetchedHashValue as string;\n    if (newHashValue === subscription.lastHashValue) {\n      return;\n    }\n\n    subscription.callback(\n      await this.get(subscription.storageKey)\n    );\n\n    subscription.lastHashValue = newHashValue;\n\n    this.subscriptions.set(subscription.subscriptionKey, subscription);\n  }\n\n  getHashKey(key: string): string {\n    return key + '-sha1';\n  }\n\n  async clearAll(): Promise<void> {\n    await this.storage.clear().toPromise();\n  }\n\n  async delete(key: string): Promise<void> {\n    await this.storage.delete(key).toPromise();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageMap"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageMap",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StructureTemplateService",
            "id": "injectable-StructureTemplateService-1ede068d45d2ff182107e053c3cd3cff",
            "file": "src/app/structure-template.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelSubscriptionToTemplateListView",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewStructureTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 123,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "deleteTemplate",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllStructureTemplates",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<StructureTemplate[]>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getAllTemplatesListView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<StructureTemplateListView[]>",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getStructureTemplate",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<StructureTemplate | null>",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTemplateKey",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAllTemplatesListView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 101,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setAllStructureTemplates",
                    "args": [
                        {
                            "name": "structureTemplates",
                            "type": "IStructureTemplate[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "structureTemplates",
                            "type": "IStructureTemplate[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAllTemplatesListView",
                    "args": [
                        {
                            "name": "structureTemplates",
                            "type": "IStructureTemplate[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "structureTemplates",
                            "type": "IStructureTemplate[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStructureTemplate",
                    "args": [
                        {
                            "name": "structureTemplate",
                            "type": "StructureTemplate"
                        },
                        {
                            "name": "affectsListView",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "structureTemplate",
                            "type": "StructureTemplate",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsListView",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTemplateListView",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplateListView",
                                    "type": "StructureTemplateListView[]"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplateListView",
                                    "type": "StructureTemplateListView[]"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport {IStructureTemplate, StructureTemplate} from '../protos';\nimport {StorageService} from './storage.service';\nimport {zip} from 'rxjs';\n\n// Minimal details about a template to show in list view\nexport interface StructureTemplateListView {\n  id: string;\n  name: string;\n}\n\nconst ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY = 'allStructureTemplatesListView';\nconst STRUCTURE_TEMPLATE_KEY_PREFIX = 'structureTemplate-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StructureTemplateService {\n\n  constructor(private storageService: StorageService) { }\n\n  async getAllStructureTemplates(): Promise<StructureTemplate[]> {\n    const allEntries = await this.getAllTemplatesListView();\n\n    const allTemplates: StructureTemplate[] = [];\n    for (const entry of allEntries) {\n      const fetchedTemplate = await this.getStructureTemplate(entry.id);\n      if (fetchedTemplate != null) {\n        allTemplates.push(\n          fetchedTemplate\n        );\n      }\n    }\n\n    return allTemplates.filter((value) => !!value);\n  }\n\n  async getAllTemplatesListView(): Promise<StructureTemplateListView[]> {\n    return (await this.storageService.get(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY) || []) as StructureTemplateListView[];\n  }\n\n  async setAllTemplatesListView(structureTemplates: IStructureTemplate[]): Promise<void> {\n    const listView = structureTemplates.map((structureTemplate: IStructureTemplate) => {\n      return {\n        id: structureTemplate.id,\n        name: structureTemplate.name,\n      } as StructureTemplateListView;\n    });\n\n    await this.storageService.set(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY, listView, true);\n  }\n\n  subscribeToTemplateListView(handler: (newTemplateListView: StructureTemplateListView[]) => void): string {\n    return this.storageService.generateSubscription(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY, (fetchedValue) => {\n      handler((fetchedValue || []) as StructureTemplateListView[]);\n    });\n  }\n\n  cancelSubscriptionToTemplateListView(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  getTemplateKey(uuid: string): string {\n    return STRUCTURE_TEMPLATE_KEY_PREFIX + uuid;\n  }\n\n  async getStructureTemplate(uuid: string): Promise<StructureTemplate|null> {\n    const fetchedData = (await this.storageService.get(this.getTemplateKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find structure template: ' + uuid);\n      return null;\n    }\n\n    return StructureTemplate.decode(\n      fetchedData\n    );\n  }\n\n  async setAllStructureTemplates(structureTemplates: IStructureTemplate[]): Promise<void> {\n    await this.setAllTemplatesListView(structureTemplates);\n\n    for (const structureTemplate of structureTemplates) {\n      await this.setStructureTemplate(structureTemplate as StructureTemplate);\n    }\n  }\n\n  async setStructureTemplate(structureTemplate: StructureTemplate, affectsListView: boolean = false): Promise<void> {\n    await this.storageService.set(\n      this.getTemplateKey(structureTemplate.id),\n      StructureTemplate.encode(structureTemplate).finish(),\n      true\n    );\n\n    if (affectsListView) {\n      await this.refreshAllTemplatesListView();\n    }\n  }\n\n  async refreshAllTemplatesListView(): Promise<void> {\n    const allTemplates = await this.getAllStructureTemplates();\n\n    await this.setAllTemplatesListView(\n      allTemplates.filter((template) => !!template)\n    );\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    await this.storageService.delete(\n      this.getTemplateKey(templateId)\n    );\n\n    const listViewEligible = (await this.getAllTemplatesListView())\n      .filter((structureTemplate) => {\n        return structureTemplate.id !== templateId;\n    });\n\n    await this.setAllTemplatesListView(listViewEligible);\n  }\n\n  // Creates a new structure template, and returns the uuid of the new entry\n  async createNewStructureTemplate(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newStructureTemplate = StructureTemplate.create({\n      id: uuid\n    });\n\n    await this.setStructureTemplate(newStructureTemplate);\n\n    const allStructureTemplates = await this.getAllStructureTemplates();\n    allStructureTemplates.push(newStructureTemplate);\n\n    await this.setAllTemplatesListView(allStructureTemplates);\n\n    return uuid;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WorkspaceMetadataService",
            "id": "injectable-WorkspaceMetadataService-6d5ba43f9559db75dc9beb6538354841",
            "file": "src/app/workspace-metadata.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelSubscriptionToWorkspaceMetadata",
                    "args": [
                        {
                            "name": "subscriptionKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "subscriptionKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewWritingSession",
                    "args": [],
                    "optional": false,
                    "returnType": "WritingSession",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "getCurrentSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<WritingSession | null>",
                    "typeParameters": [],
                    "line": 124,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getWorkspaceMetadata",
                    "args": [
                        {
                            "name": "appendCurrentSession",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<WritingWorkspaceMetadata>",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "appendCurrentSession",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveCurrentSessionToHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setWorkspaceMetadata",
                    "args": [
                        {
                            "name": "workspaceMetadata",
                            "type": "IWritingWorkspaceMetadata | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "workspaceMetadata",
                            "type": "IWritingWorkspaceMetadata | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToWorkspaceMetadata",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "workspaceMetadata",
                                    "type": "WritingWorkspaceMetadata"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "workspaceMetadata",
                                    "type": "WritingWorkspaceMetadata"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSessionHeartbeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<WritingSession>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Duration,\n  IDuration,\n  ITimestamp,\n  IWritingSession,\n  IWritingWorkspaceMetadata,\n  Timestamp,\n  WritingSession,\n  WritingWorkspaceMetadata} from '../protos';\nimport {StorageService} from './storage.service';\n\nconst CURRENT_SESSION_KEY = 'currentSession';\nconst LAST_HEARTBEAT_KEY = 'lastHeartbeat';\nconst LAST_ACTIVE_HEARTBEAT_KEY = 'lastActiveHeartbeat';\nconst WRITING_WORKSPACE_METADATA_KEY = 'workspaceMetadata';\n\nconst SESSION_TIMEOUT_MS = 1000 *  60; // Allow 1 minute of the browser being closed before you mark session as inactive\nconst SESSION_ACTIVE_TIMEOUT_MS = 5000; // Allow 5 seconds of the tool being not-visible before we mark as inactive\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkspaceMetadataService {\n\n  constructor(private storageService: StorageService) { }\n\n  subscribeToWorkspaceMetadata(handler: (workspaceMetadata: WritingWorkspaceMetadata) => void): string {\n    return this.storageService.generateSubscription(WRITING_WORKSPACE_METADATA_KEY, (result) => {\n      if (result) {\n        handler(WritingWorkspaceMetadata.decode(result as Uint8Array));\n      } else {\n        handler(WritingWorkspaceMetadata.create());\n      }\n    });\n  }\n\n  cancelSubscriptionToWorkspaceMetadata(subscriptionKey: string): void {\n    this.storageService.cancelSubscription(subscriptionKey);\n  }\n\n  async getWorkspaceMetadata(appendCurrentSession: boolean): Promise<WritingWorkspaceMetadata> {\n    const fetchedData = (await this.storageService.get(WRITING_WORKSPACE_METADATA_KEY)) as Uint8Array;\n    let workspaceMetadata;\n    if (fetchedData) {\n      workspaceMetadata = WritingWorkspaceMetadata.decode(fetchedData);\n    } else {\n      workspaceMetadata = WritingWorkspaceMetadata.create();\n    }\n\n    if (appendCurrentSession) {\n      const currentSession = await this.getCurrentSession() as IWritingSession;\n\n      workspaceMetadata.sessionHistory = [currentSession].concat(workspaceMetadata.sessionHistory);\n    }\n\n    return workspaceMetadata;\n  }\n\n  async setWorkspaceMetadata(workspaceMetadata: IWritingWorkspaceMetadata|null): Promise<void> {\n    if (!workspaceMetadata) {\n      workspaceMetadata = WritingWorkspaceMetadata.create();\n    }\n\n    await this.storageService.set(\n      WRITING_WORKSPACE_METADATA_KEY,\n      WritingWorkspaceMetadata.encode(workspaceMetadata).finish(),\n      true\n    );\n  }\n\n  async saveCurrentSessionToHistory(): Promise<void> {\n    await this.setWorkspaceMetadata(\n      await this.getWorkspaceMetadata(true)\n    );\n  }\n\n  // Let the app know the current writing session is still active.\n  async updateSessionHeartbeat(): Promise<WritingSession> {\n    const isActive = document.visibilityState === 'visible';\n\n    let currentSession = await this.getCurrentSession();\n    const lastHeartbeat = await this.storageService.get(LAST_HEARTBEAT_KEY) as number;\n    const lastActiveHeartbeat = await this.storageService.get(LAST_ACTIVE_HEARTBEAT_KEY) as number;\n\n    if (!currentSession) {\n      currentSession = this.createNewWritingSession();\n    } else if (Date.now() - lastHeartbeat > SESSION_TIMEOUT_MS) {\n      // Last session is stale, add it to history and initialize a new one\n      await this.saveCurrentSessionToHistory();\n\n      currentSession = this.createNewWritingSession();\n    }\n\n    currentSession.duration = getDurationBetweenTimestamps(\n      currentSession.start as ITimestamp,\n      getTimestampFromEpochMS(Date.now())\n    );\n\n    if (isActive) {\n      const activeDelta = Date.now() - lastActiveHeartbeat;\n      if (activeDelta < SESSION_ACTIVE_TIMEOUT_MS) {\n        const activeDuration = currentSession.activeDuration || Duration.create({seconds: 0, nanos: 0});\n\n        currentSession.activeDuration = incrementDuration(activeDuration, activeDelta);\n      }\n\n      await this.storageService.set(LAST_ACTIVE_HEARTBEAT_KEY, Date.now());\n    }\n\n    const encoded = WritingSession.encode(currentSession).finish();\n    await this.storageService.set(CURRENT_SESSION_KEY, encoded);\n    await this.storageService.set(LAST_HEARTBEAT_KEY, Date.now());\n\n    return currentSession;\n  }\n\n  createNewWritingSession(): WritingSession {\n    const session = WritingSession.create();\n    session.start = getTimestampFromEpochMS(Date.now());\n    return session;\n  }\n\n  async getCurrentSession(): Promise<WritingSession|null> {\n    const current = await this.storageService.get(CURRENT_SESSION_KEY);\n    if (!current) {\n      return null;\n    }\n\n    return WritingSession.decode(current as Uint8Array);\n  }\n}\n\n\nfunction getTimestampFromEpochMS(epochMS: number): Timestamp {\n  return Timestamp.create({\n    seconds: Math.floor(epochMS / 1000),\n    nanos: (epochMS % 1000) * 1e6\n  });\n}\n\nfunction getDurationBetweenTimestamps(start: ITimestamp, end: ITimestamp): Duration {\n  let nanosDiff = (end.nanos as number) - (start.nanos as number);\n  let secondsDiff = (end.seconds as number) - (start.seconds as number);\n\n  while (nanosDiff < 0) {\n    secondsDiff -= 1;\n    nanosDiff += 1e9;\n  }\n  while (nanosDiff > 1e9) {\n    nanosDiff -= 1e9;\n    secondsDiff += 1;\n  }\n  return Duration.create({\n    seconds: secondsDiff,\n    nanos: nanosDiff\n  });\n}\n\nfunction incrementDuration(duration: IDuration, deltaMs: number): IDuration {\n  let nanos = (duration.nanos || 0) + (deltaMs * 1e6);\n  let seconds = (duration.seconds || 0);\n\n  while (nanos > 1e9) {\n    nanos -= 1e9;\n    seconds = (seconds as number) + 1;\n  }\n  return Duration.create({\n    seconds,\n    nanos\n  });\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-76010a5d67848199d7a39c7464685b28",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'revision'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'revision';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.header {\n  border-bottom: 1px solid black;\n  display: flex;\n  padding: 0 8px;\n  vertical-align: middle;\n\n  h1 {\n    flex: 1;\n    margin: 8px 0;\n  }\n\n  .timer {\n    flex: 1;\n    margin: auto;\n  }\n\n  a {\n    margin: auto;\n    padding: 0 8px;\n  }\n}\n\n.body {\n  margin: 8px 32px;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"header\">\n  <h1>\n    <a routerLink=\"/\" routerLinkActive=\"active\">\n      Revision\n    </a>\n  </h1>\n\n  <app-header-timer class=\"timer\"></app-header-timer>\n\n  <a routerLink=\"/data\" routerLinkActive=\"active\">\n    Data\n  </a>\n</div>\n\n<div class=\"body\">\n  <router-outlet></router-outlet>\n</div>\n"
        },
        {
            "name": "HeaderTimerComponent",
            "id": "component-HeaderTimerComponent-2d9b65fb60cd8135042228092b977ee5",
            "file": "src/app/header-timer/header-timer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-timer",
            "styleUrls": [
                "./header-timer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-timer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sessionTimeStr",
                    "defaultValue": "'00:00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getNumberStr",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "updateHeartbeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {WorkspaceMetadataService} from '../workspace-metadata.service';\n\n@Component({\n  selector: 'app-header-timer',\n  templateUrl: './header-timer.component.html',\n  styleUrls: ['./header-timer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderTimerComponent implements OnInit {\n\n  sessionTimeStr = '00:00';\n\n  constructor(private workspaceMetadataService: WorkspaceMetadataService, private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    setInterval(async () => {\n      await this.updateHeartbeat();\n    }, 500);\n  }\n\n  async updateHeartbeat(): Promise<void> {\n    const currentSession = await this.workspaceMetadataService.updateSessionHeartbeat();\n\n    let sessionSecs = currentSession.duration?.seconds as number;\n    const activeSecs = currentSession.activeDuration?.seconds as number;\n\n    const activePercent = Math.round(activeSecs / sessionSecs * 100);\n\n    const sessionHrs = Math.floor(sessionSecs / 3600);\n    sessionSecs -= (3600 * sessionHrs);\n\n    const sessionMins = Math.floor(sessionSecs / 60);\n    sessionSecs -= (60 * sessionMins);\n\n    let stringValue = '';\n    if (sessionHrs) {\n      stringValue = sessionHrs.toString() + ':';\n    }\n\n    stringValue += this.getNumberStr(sessionMins) + ':' + this.getNumberStr(sessionSecs);\n\n    if (activeSecs > 0) {\n      stringValue += ' (' + activePercent + '% active)';\n    }\n\n    this.sessionTimeStr = stringValue;\n\n    this.ref.markForCheck();\n  }\n\n  getNumberStr(value: number): string {\n    let output = '';\n    if (value < 10) {\n      output = '0';\n    }\n    return output + value.toString();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\n  margin: 0;\n}\n",
                    "styleUrl": "./header-timer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  {{sessionTimeStr}}\n</p>\n"
        },
        {
            "name": "ImportExportPageComponent",
            "id": "component-ImportExportPageComponent-ae1cc46ad19a7437f943d9260bfe4c0c",
            "file": "src/app/import-export-page/import-export-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-import-export-page",
            "styleUrls": [
                "./import-export-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./import-export-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fetchedValue",
                    "defaultValue": "'Not yet fetched'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "uploadedTextData",
                    "defaultValue": "'Not uploaded yet'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "onDownloadClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onUpload",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {MonolithicDataService} from '../monolithic-data.service';\nimport fileDownload from 'js-file-download';\nimport {WritingWorkspace} from '../../protos';\n\n// Page component for the \"Import/Export\" page\n@Component({\n  selector: 'app-import-export-page',\n  templateUrl: './import-export-page.component.html',\n  styleUrls: ['./import-export-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImportExportPageComponent implements OnInit {\n  fetchedValue = 'Not yet fetched';\n  uploadedTextData = 'Not uploaded yet';\n\n  constructor(private monolithicDataService: MonolithicDataService, private ref: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n  }\n\n  async onDownloadClick(): Promise<void> {\n    const workspace = await this.monolithicDataService.saveWorkspace();\n    const filename = workspace.name + '.write';\n\n    fileDownload(\n      new Blob([WritingWorkspace.encode(workspace).finish()]),\n      filename\n    );\n  }\n\n  async onUpload(event: any): Promise<void> {\n    const file: File = event.target.files[0];\n\n    const fileData = await file.arrayBuffer();\n    const workspace = WritingWorkspace.decode(new Uint8Array(fileData));\n\n    this.uploadedTextData = workspace.name;\n\n    await this.monolithicDataService.loadWorkspace(workspace);\n\n    this.ref.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  margin-right: 8px;\n}\n\n.upload-download {\n  display: flex;\n}\n",
                    "styleUrl": "./import-export-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "monolithicDataService",
                        "type": "MonolithicDataService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "monolithicDataService",
                        "type": "MonolithicDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Import / Export</h1>\n\n<p>\n  The goal of this page is to support importing / exporting story data.\n</p>\n\n<div class=\"upload-download\">\n  <button mat-button (click)=\"onDownloadClick()\">\n    Download\n  </button>\n  <button mat-button (click)=\"uploadFile.click()\">\n    Upload\n  </button>\n  <input\n    hidden\n    type=\"file\"\n    #uploadFile\n    accept=\".write\"\n    (change)=\"onUpload($event)\">\n</div>\n\n\n"
        },
        {
            "name": "LandingPageComponent",
            "id": "component-LandingPageComponent-7898825f4763e88069b22fa8756024c0",
            "file": "src/app/landing-page/landing-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing-page",
            "styleUrls": [
                "./landing-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "workspaceName",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "workspaceNameSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "newWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 21,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {MonolithicDataService} from '../monolithic-data.service';\nimport {WritingWorkspaceMetadata} from '../../protos';\n\n// Static landing page component.\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.component.html',\n  styleUrls: ['./landing-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LandingPageComponent implements OnInit, OnDestroy {\n  workspaceName = '';\n  workspaceNameSubscription = '';\n\n  constructor(\n    private monolithicDataService: MonolithicDataService,\n    private ref: ChangeDetectorRef\n  ) { }\n\n  async ngOnInit(): Promise<void> {\n    this.workspaceNameSubscription = this.monolithicDataService.subscribeToWorkspaceName((workspaceName) => {\n      this.workspaceName = workspaceName;\n      this.ref.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.monolithicDataService.cancelSubscriptionToWorkspaceName(this.workspaceNameSubscription);\n  }\n\n  async newWorkspace(): Promise<void> {\n    const newWorkspaceName = prompt('What\\'s the new workspace name?');\n\n    if (!newWorkspaceName) {\n      return;\n    }\n\n    await this.monolithicDataService.newWorkspace(newWorkspaceName);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./landing-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "monolithicDataService",
                        "type": "MonolithicDataService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "monolithicDataService",
                        "type": "MonolithicDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div>\n  <a href=\"https://github.com/jon-simpkins/revision\" target=\"_blank\">\n    Source Code\n  </a>\n</div>\n\n<div *ngIf=\"workspaceName.length > 0\">\n  <h3>Workspace: {{workspaceName}}</h3>\n\n  <a routerLink=\"structure-templates\">Structure Templates</a>\n\n  <app-show-session-history></app-show-session-history>\n</div>\n\n<ng-container *ngIf=\"workspaceName.length == 0\">\n  <h3>No current workspace!</h3>\n\n  <p>Go to the <a routerLink=\"data\">data page</a> to load from file.</p>\n</ng-container>\n\n<button mat-button (click)=\"newWorkspace()\">New Workspace</button>\n\n\n"
        },
        {
            "name": "ShowSessionHistoryComponent",
            "id": "component-ShowSessionHistoryComponent-3d79738596baec28b1888b3b5170d170",
            "file": "src/app/show-session-history/show-session-history.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-show-session-history",
            "styleUrls": [
                "./show-session-history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./show-session-history.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metadataSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "workspaceMetadata",
                    "defaultValue": "WritingWorkspaceMetadata.create()",
                    "type": "WritingWorkspaceMetadata",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchHistoryLength",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "fetchRecentHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "IWritingSession[]",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {WorkspaceMetadataService} from '../workspace-metadata.service';\nimport {IWritingSession, WritingWorkspaceMetadata} from '../../protos';\n\n@Component({\n  selector: 'app-show-session-history',\n  templateUrl: './show-session-history.component.html',\n  styleUrls: ['./show-session-history.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShowSessionHistoryComponent implements OnInit, OnDestroy {\n  workspaceMetadata: WritingWorkspaceMetadata = WritingWorkspaceMetadata.create();\n  metadataSubscription = '';\n\n  constructor(private ref: ChangeDetectorRef, private workspaceMetadataService: WorkspaceMetadataService) { }\n\n  ngOnInit(): void  {\n    this.metadataSubscription = this.workspaceMetadataService.subscribeToWorkspaceMetadata(\n      (workspaceMetadata: WritingWorkspaceMetadata) => {\n      this.workspaceMetadata = workspaceMetadata;\n      this.ref.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void  {\n    this.workspaceMetadataService.cancelSubscriptionToWorkspaceMetadata(this.metadataSubscription);\n  }\n\n  fetchRecentHistory(): IWritingSession[] {\n    return this.workspaceMetadata.sessionHistory;\n  }\n\n  fetchHistoryLength(): number {\n    return this.workspaceMetadata.sessionHistory.length;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./show-session-history.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h4>Writing History ({{fetchHistoryLength()}} sessions)</h4>\n\n<ng-container *ngFor=\"let entry of fetchRecentHistory()\">\n  <div>\n    {{entry.duration?.seconds}} seconds ({{entry.activeDuration?.seconds}} active seconds)\n  </div>\n</ng-container>\n"
        },
        {
            "name": "StructureTemplateDetailsComponent",
            "id": "component-StructureTemplateDetailsComponent-2f2908f7e7ec395410094e386145d550",
            "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-structure-template-details",
            "styleUrls": [
                "./structure-template-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./structure-template-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "structureTemplate",
                    "defaultValue": "null",
                    "line": 17,
                    "type": "StructureTemplate | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "templateUpdated",
                    "defaultValue": "new EventEmitter<StructureTemplateUpdate>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "onDescChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onNameChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {StructureTemplate} from '../../../protos';\n\nexport interface StructureTemplateUpdate {\n  structureTemplate: StructureTemplate;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-structure-template-details',\n  templateUrl: './structure-template-details.component.html',\n  styleUrls: ['./structure-template-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StructureTemplateDetailsComponent {\n  @Input()\n  structureTemplate: StructureTemplate|null = null;\n\n  @Output() templateUpdated = new EventEmitter<StructureTemplateUpdate>();\n\n  isEmpty(): boolean {\n    return this.structureTemplate == null;\n  }\n\n  onNameChange(value: string): void {\n    if (this.isEmpty()) {\n      return;\n    }\n    const structureTemplate = this.structureTemplate as StructureTemplate;\n    structureTemplate.name = value;\n\n    this.templateUpdated.emit({\n      structureTemplate,\n      modifiesListView: true\n    } as StructureTemplateUpdate);\n  }\n\n  onDescChange(value: string): void {\n    if (this.structureTemplate == null) {\n      return;\n    }\n    const structureTemplate = this.structureTemplate as StructureTemplate;\n    structureTemplate.description = value;\n\n    this.templateUpdated.emit({\n      structureTemplate,\n      modifiesListView: false\n    } as StructureTemplateUpdate);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\n  width: 300px;\n}\n\n.full-width {\n  width: 100%;\n}\n",
                    "styleUrl": "./structure-template-details.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<h3 *ngIf=\"isEmpty()\">no structure template selected</h3>\n\n<form *ngIf=\"!isEmpty()\" autocomplete=\"off\">\n  <mat-form-field class=\"full-width\">\n    <mat-label>Name</mat-label>\n    <input\n      matInput\n      placeholder=\"Ex. Three Act Structure\"\n      [ngModel]=\"structureTemplate?.name\"\n      (ngModelChange)=\"onNameChange($event)\"\n      [ngModelOptions]=\"{standalone: true}\"/>\n  </mat-form-field>\n\n  <mat-form-field class=\"full-width\">\n    <mat-label>Description</mat-label>\n    <textarea\n      matInput\n      [ngModel]=\"structureTemplate?.description\"\n      (ngModelChange)=\"onDescChange($event)\"\n      [ngModelOptions]=\"{standalone: true}\">\n    </textarea>\n  </mat-form-field>\n</form>\n\n\n<quill-editor></quill-editor>\n"
        },
        {
            "name": "StructureTemplateNavComponent",
            "id": "component-StructureTemplateNavComponent-a86b0b5f35ea98736e0899b3475d949d",
            "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-structure-template-nav",
            "styleUrls": [
                "./structure-template-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./structure-template-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "canDelete",
                    "defaultValue": "false",
                    "line": 12,
                    "type": "boolean"
                },
                {
                    "name": "structureTemplateListView",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "StructureTemplateListView[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteTemplate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "newTemplate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectTemplate",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "createNewTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {StructureTemplateListView} from '../../structure-template.service';\n\n@Component({\n  selector: 'app-structure-template-nav',\n  templateUrl: './structure-template-nav.component.html',\n  styleUrls: ['./structure-template-nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StructureTemplateNavComponent {\n  @Input()\n  canDelete: boolean = false;\n\n  @Input()\n  structureTemplateListView: StructureTemplateListView[] = [];\n\n  @Output() newTemplate = new EventEmitter<void>();\n\n  @Output() selectTemplate = new EventEmitter<string>();\n\n  @Output() deleteTemplate = new EventEmitter<void>();\n\n  createNewTemplate(): void {\n    this.newTemplate.emit();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".left-rail {\n  width: 200px;\n}\n",
                    "styleUrl": "./structure-template-nav.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"left-rail\">\n  <div class=\"button-row\">\n    <button mat-icon-button (click)=\"createNewTemplate()\">\n      <mat-icon>add_circle</mat-icon>\n    </button>\n    <button\n      mat-icon-button\n      (click)=\"deleteTemplate.emit()\"\n      [disabled]=\"!canDelete\">\n      <mat-icon>delete</mat-icon>\n    </button>\n  </div>\n  <mat-action-list dense>\n    <button\n      *ngFor=\"let structureTemplate of structureTemplateListView\"\n      mat-list-item\n      (click)=\"selectTemplate.emit(structureTemplate.id)\">\n      {{structureTemplate.name}}\n    </button>\n  </mat-action-list>\n</div>\n"
        },
        {
            "name": "StructureTemplatePageComponent",
            "id": "component-StructureTemplatePageComponent-2fb33d5d9d1eaf7324549db46e7a9b7e",
            "file": "src/app/structure-template-page/structure-template-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-structure-template-page",
            "styleUrls": [
                "./structure-template-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./structure-template-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTemplate",
                    "defaultValue": "null",
                    "type": "StructureTemplate | null",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "selectedTemplateUuid",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "structureTemplateListView",
                    "defaultValue": "[]",
                    "type": "StructureTemplateListView[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "structureTemplateListViewSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "newTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 34,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onTemplateChanges",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "StructureTemplateUpdate"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 54,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "StructureTemplateUpdate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTemplate",
                    "args": [
                        {
                            "name": "newId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {StructureTemplateListView, StructureTemplateService} from '../structure-template.service';\nimport {StructureTemplate} from '../../protos';\nimport {StructureTemplateUpdate} from './structure-template-details/structure-template-details.component';\n\n@Component({\n  selector: 'app-structure-template-page',\n  templateUrl: './structure-template-page.component.html',\n  styleUrls: ['./structure-template-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StructureTemplatePageComponent implements OnInit, OnDestroy {\n\n  selectedTemplateUuid = '';\n\n  selectedTemplate: StructureTemplate|null = null;\n\n  structureTemplateListView: StructureTemplateListView[] = [];\n  structureTemplateListViewSubscription = '';\n\n  constructor(private structureTemplateService: StructureTemplateService, private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.structureTemplateListViewSubscription = this.structureTemplateService.subscribeToTemplateListView((newValue) => {\n      this.structureTemplateListView = newValue;\n      this.ref.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.structureTemplateService.cancelSubscriptionToTemplateListView(this.structureTemplateListViewSubscription);\n  }\n\n  async newTemplate(): Promise<void> {\n    this.selectedTemplateUuid = await this.structureTemplateService.createNewStructureTemplate();\n    await this.selectTemplate(this.selectedTemplateUuid);\n  }\n\n  async deleteTemplate(): Promise<void> {\n    await this.structureTemplateService.deleteTemplate(this.selectedTemplateUuid);\n    this.selectedTemplateUuid = '';\n    this.selectedTemplate = null;\n    this.ref.markForCheck();\n  }\n\n  async selectTemplate(newId: string): Promise<void> {\n    this.selectedTemplateUuid = newId;\n\n    this.selectedTemplate = await this.structureTemplateService.getStructureTemplate(newId);\n\n    this.ref.markForCheck();\n  }\n\n  async onTemplateChanges(newValue: StructureTemplateUpdate): Promise<void> {\n    await this.structureTemplateService.setStructureTemplate(newValue.structureTemplate, newValue.modifiesListView);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.page {\n  display: flex;\n}\n\n.details {\n  flex: 1;\n}\n",
                    "styleUrl": "./structure-template-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n  <app-structure-template-nav\n    [canDelete]=\"selectedTemplateUuid != ''\"\n    [structureTemplateListView]=\"structureTemplateListView\"\n    (newTemplate)=\"newTemplate()\"\n    (selectTemplate)=\"selectTemplate($event)\"\n    (deleteTemplate)=\"deleteTemplate()\">\n  </app-structure-template-nav>\n  <app-structure-template-details\n    class=\"details\"\n    [structureTemplate]=\"selectedTemplate\"\n    (templateUpdated)=\"onTemplateChanges($event)\">\n  </app-structure-template-details>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "HeaderTimerComponent"
                        },
                        {
                            "name": "ImportExportPageComponent"
                        },
                        {
                            "name": "LandingPageComponent"
                        },
                        {
                            "name": "ShowSessionHistoryComponent"
                        },
                        {
                            "name": "StructureTemplateDetailsComponent"
                        },
                        {
                            "name": "StructureTemplateNavComponent"
                        },
                        {
                            "name": "StructureTemplatePageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template.service.ts",
                "type": "string",
                "defaultValue": "'allStructureTemplatesListView'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CURRENT_SESSION_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "string",
                "defaultValue": "'currentSession'"
            },
            {
                "name": "DefaultExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/import-export-page/import-export-page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/landing-page/landing-page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "exampleStructureTemplateListView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n    {\n      id: 'abc-123',\n      name: 'My first template'\n    } as StructureTemplateListView,\n    {\n      id: 'def-456',\n      name: 'My second template'\n    } as StructureTemplateListView\n  ]"
            },
            {
                "name": "FullExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleCanDelete",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LAST_ACTIVE_HEARTBEAT_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "string",
                "defaultValue": "'lastActiveHeartbeat'"
            },
            {
                "name": "LAST_HEARTBEAT_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "string",
                "defaultValue": "'lastHeartbeat'"
            },
            {
                "name": "MaterialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "type": "[]",
                "defaultValue": "[\n  MatButtonModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatIconModule,\n  BrowserAnimationsModule,\n  QuillModule.forRoot(),\n]"
            },
            {
                "name": "mockTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "",
                "defaultValue": "StructureTemplate.create({\n  id: 'abc-123',\n  name: 'My Template',\n  description: 'Like a 3-act structure, but turned up to 4'\n})"
            },
            {
                "name": "POLL_FREQUENCY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storage.service.ts",
                "type": "number",
                "defaultValue": "250"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SESSION_ACTIVE_TIMEOUT_MS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "number",
                "defaultValue": "5000"
            },
            {
                "name": "SESSION_TIMEOUT_MS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "",
                "defaultValue": "1000 *  60"
            },
            {
                "name": "STRUCTURE_TEMPLATE_KEY_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template.service.ts",
                "type": "string",
                "defaultValue": "'structureTemplate-'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/import-export-page/import-export-page.stories.ts",
                "type": "Story<ImportExportPageComponent>",
                "defaultValue": "(args: ImportExportPageComponent) => ({\n  component: ImportExportPageComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/landing-page/landing-page.stories.ts",
                "type": "Story<LandingPageComponent>",
                "defaultValue": "(args: LandingPageComponent) => ({\n  component: LandingPageComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "Story<StructureTemplateDetailsComponent>",
                "defaultValue": "(args: StructureTemplateDetailsComponent) => ({\n  component: StructureTemplateDetailsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "Story<StructureTemplateNavComponent>",
                "defaultValue": "(args: StructureTemplateNavComponent) => ({\n  component: StructureTemplateNavComponent,\n  props: args,\n})"
            },
            {
                "name": "WORKSPACE_NAME_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/monolithic-data.service.ts",
                "type": "string",
                "defaultValue": "'workspaceName'"
            },
            {
                "name": "WRITING_WORKSPACE_METADATA_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "string",
                "defaultValue": "'workspaceMetadata'"
            }
        ],
        "functions": [
            {
                "name": "getDurationBetweenTimestamps",
                "file": "src/app/workspace-metadata.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "start"
                    },
                    {
                        "name": "end"
                    }
                ],
                "returnType": "Duration",
                "jsdoctags": [
                    {
                        "name": "start",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "end",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getTimestampFromEpochMS",
                "file": "src/app/workspace-metadata.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "epochMS"
                    }
                ],
                "returnType": "Timestamp",
                "jsdoctags": [
                    {
                        "name": "epochMS",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "incrementDuration",
                "file": "src/app/workspace-metadata.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "duration"
                    },
                    {
                        "name": "deltaMs"
                    }
                ],
                "returnType": "IDuration",
                "jsdoctags": [
                    {
                        "name": "duration",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deltaMs",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/structure-template.service.ts": [
                {
                    "name": "ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template.service.ts",
                    "type": "string",
                    "defaultValue": "'allStructureTemplatesListView'"
                },
                {
                    "name": "STRUCTURE_TEMPLATE_KEY_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template.service.ts",
                    "type": "string",
                    "defaultValue": "'structureTemplate-'"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/workspace-metadata.service.ts": [
                {
                    "name": "CURRENT_SESSION_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "string",
                    "defaultValue": "'currentSession'"
                },
                {
                    "name": "LAST_ACTIVE_HEARTBEAT_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "string",
                    "defaultValue": "'lastActiveHeartbeat'"
                },
                {
                    "name": "LAST_HEARTBEAT_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "string",
                    "defaultValue": "'lastHeartbeat'"
                },
                {
                    "name": "SESSION_ACTIVE_TIMEOUT_MS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "number",
                    "defaultValue": "5000"
                },
                {
                    "name": "SESSION_TIMEOUT_MS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "",
                    "defaultValue": "1000 *  60"
                },
                {
                    "name": "WRITING_WORKSPACE_METADATA_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "string",
                    "defaultValue": "'workspaceMetadata'"
                }
            ],
            "src/app/import-export-page/import-export-page.stories.ts": [
                {
                    "name": "DefaultExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/import-export-page/import-export-page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/import-export-page/import-export-page.stories.ts",
                    "type": "Story<ImportExportPageComponent>",
                    "defaultValue": "(args: ImportExportPageComponent) => ({\n  component: ImportExportPageComponent,\n  props: args,\n})"
                }
            ],
            "src/app/landing-page/landing-page.stories.ts": [
                {
                    "name": "DefaultExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/landing-page/landing-page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/landing-page/landing-page.stories.ts",
                    "type": "Story<LandingPageComponent>",
                    "defaultValue": "(args: LandingPageComponent) => ({\n  component: LandingPageComponent,\n  props: args,\n})"
                }
            ],
            "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mockTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "StructureTemplate.create({\n  id: 'abc-123',\n  name: 'My Template',\n  description: 'Like a 3-act structure, but turned up to 4'\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                    "type": "Story<StructureTemplateDetailsComponent>",
                    "defaultValue": "(args: StructureTemplateDetailsComponent) => ({\n  component: StructureTemplateDetailsComponent,\n  props: args,\n})"
                }
            ],
            "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleStructureTemplateListView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n    {\n      id: 'abc-123',\n      name: 'My first template'\n    } as StructureTemplateListView,\n    {\n      id: 'def-456',\n      name: 'My second template'\n    } as StructureTemplateListView\n  ]"
                },
                {
                    "name": "FullExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExampleCanDelete",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "Story<StructureTemplateNavComponent>",
                    "defaultValue": "(args: StructureTemplateNavComponent) => ({\n  component: StructureTemplateNavComponent,\n  props: args,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "MaterialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  MatButtonModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatIconModule,\n  BrowserAnimationsModule,\n  QuillModule.forRoot(),\n]"
                }
            ],
            "src/app/storage.service.ts": [
                {
                    "name": "POLL_FREQUENCY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storage.service.ts",
                    "type": "number",
                    "defaultValue": "250"
                }
            ],
            "src/app/monolithic-data.service.ts": [
                {
                    "name": "WORKSPACE_NAME_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/monolithic-data.service.ts",
                    "type": "string",
                    "defaultValue": "'workspaceName'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/workspace-metadata.service.ts": [
                {
                    "name": "getDurationBetweenTimestamps",
                    "file": "src/app/workspace-metadata.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "start"
                        },
                        {
                            "name": "end"
                        }
                    ],
                    "returnType": "Duration",
                    "jsdoctags": [
                        {
                            "name": "start",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimestampFromEpochMS",
                    "file": "src/app/workspace-metadata.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "epochMS"
                        }
                    ],
                    "returnType": "Timestamp",
                    "jsdoctags": [
                        {
                            "name": "epochMS",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "incrementDuration",
                    "file": "src/app/workspace-metadata.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "duration"
                        },
                        {
                            "name": "deltaMs"
                        }
                    ],
                    "returnType": "IDuration",
                    "jsdoctags": [
                        {
                            "name": "duration",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deltaMs",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "LandingPageComponent"
                    },
                    {
                        "path": "data",
                        "component": "ImportExportPageComponent"
                    },
                    {
                        "path": "structure-templates",
                        "component": "StructureTemplatePageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header-timer/header-timer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderTimerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/import-export-page/import-export-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportExportPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/import-export-page/import-export-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/import-export-page/import-export-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/landing-page/landing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/landing-page/landing-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/landing-page/landing-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/monolithic-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonolithicDataService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/monolithic-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WORKSPACE_NAME_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/show-session-history/show-session-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShowSessionHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/storage.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StorageSubscription",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "POLL_FREQUENCY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StructureTemplateDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StructureTemplateUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StructureTemplateNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleStructureTemplateListView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleCanDelete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StructureTemplatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StructureTemplateService",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StructureTemplateListView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRUCTURE_TEMPLATE_KEY_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceMetadataService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getDurationBetweenTimestamps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getTimestampFromEpochMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "incrementDuration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURRENT_SESSION_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAST_ACTIVE_HEARTBEAT_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAST_HEARTBEAT_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SESSION_ACTIVE_TIMEOUT_MS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SESSION_TIMEOUT_MS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WRITING_WORKSPACE_METADATA_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}