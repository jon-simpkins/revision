{
    "pipes": [],
    "interfaces": [
        {
            "name": "BeatDropEvent",
            "id": "interface-BeatDropEvent-6f3a80590d674c2cdb8e009b6f1baba7",
            "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnInit, Output} from '@angular/core';\nimport {BeatMapView} from '../beats.service';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {getDurationStr} from '../duration-helpers';\nimport {Beat} from '../../protos';\n\ninterface BeatDropList {\n  id: string;\n  label: string;\n  items: BeatMapView[];\n  listType: BeatSubList;\n}\n\nexport enum BeatSubList {\n  Brainstorm,\n  Structure,\n}\n\nexport interface BeatDropEvent {\n  targetList: BeatSubList;\n  targetIndex: number;\n  sourceList: BeatSubList;\n  sourceIndex: number;\n}\n\n@Component({\n  selector: 'app-beat-related-beat-nav',\n  templateUrl: './beat-related-beat-nav.component.html',\n  styleUrls: ['./beat-related-beat-nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BeatRelatedBeatNavComponent implements OnInit, OnChanges {\n\n  @Input()\n  selectedBeatId = '';\n\n  @Input()\n  brainstormListView: BeatMapView[] = [];\n\n  @Input()\n  structureListView: BeatMapView[] = [];\n\n  @Output() newBeat = new EventEmitter<BeatSubList>();\n\n  @Output() selectBeat = new EventEmitter<string>();\n\n  @Output() moveBeat  = new EventEmitter<BeatDropEvent>();\n\n  @Output() deleteBeat = new EventEmitter<void>();\n\n  beatDropLists: BeatDropList[] = [];\n\n  constructor(private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.createDropLists();\n  }\n\n  ngOnChanges(): void {\n    this.createDropLists();\n  }\n\n  private createDropLists(): void {\n    this.beatDropLists = [\n      {\n        id: 'structure-list',\n        label: 'Structure',\n        items: this.structureListView,\n        listType: BeatSubList.Structure,\n      } as BeatDropList,\n      {\n        id: 'brainstorm-list',\n        label: 'Brainstorm',\n        items: this.brainstormListView,\n        listType: BeatSubList.Brainstorm,\n      } as BeatDropList,\n    ];\n    this.ref.markForCheck();\n  }\n\n  canDelete(listType: BeatSubList): boolean {\n    if (listType === BeatSubList.Structure) {\n      return (this.structureListView || []).filter((entry) => entry.id === this.selectedBeatId).length > 0;\n    }\n\n    return (this.brainstormListView || []).filter((entry) => entry.id === this.selectedBeatId).length > 0;\n  }\n\n  drop(event: CdkDragDrop<BeatMapView[]>): void {\n    const targetList = event.container.id;\n    const sourceList = event.previousContainer.id;\n\n    const targetIndex = event.currentIndex;\n    const sourceIndex = event.previousIndex;\n\n    this.moveBeat.emit({\n      sourceList: (sourceList === 'structure-list') ? BeatSubList.Structure : BeatSubList.Brainstorm,\n      targetList: (targetList === 'structure-list') ? BeatSubList.Structure : BeatSubList.Brainstorm,\n      sourceIndex,\n      targetIndex,\n    } as BeatDropEvent);\n  }\n\n  formatDurationMs(value: number): string {\n    return getDurationStr(value);\n  }\n\n  formatCompleteness(value: Beat.Completeness): string {\n    switch (value) {\n      case Beat.Completeness.NOT_STARTED:\n        return 'Not Started';\n      case Beat.Completeness.BRAINSTORM:\n        return 'Brainstorm';\n      case Beat.Completeness.INITIAL_DRAFT:\n        return 'Initial Draft';\n      case Beat.Completeness.POLISHED:\n        return 'Polished';\n      case Beat.Completeness.FINAL:\n        return 'Final';\n    }\n    return 'Unknown';\n  }\n}\n",
            "properties": [
                {
                    "name": "sourceIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "sourceList",
                    "type": "BeatSubList",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "targetIndex",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "targetList",
                    "type": "BeatSubList",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BeatDropList",
            "id": "interface-BeatDropList-6f3a80590d674c2cdb8e009b6f1baba7",
            "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnInit, Output} from '@angular/core';\nimport {BeatMapView} from '../beats.service';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {getDurationStr} from '../duration-helpers';\nimport {Beat} from '../../protos';\n\ninterface BeatDropList {\n  id: string;\n  label: string;\n  items: BeatMapView[];\n  listType: BeatSubList;\n}\n\nexport enum BeatSubList {\n  Brainstorm,\n  Structure,\n}\n\nexport interface BeatDropEvent {\n  targetList: BeatSubList;\n  targetIndex: number;\n  sourceList: BeatSubList;\n  sourceIndex: number;\n}\n\n@Component({\n  selector: 'app-beat-related-beat-nav',\n  templateUrl: './beat-related-beat-nav.component.html',\n  styleUrls: ['./beat-related-beat-nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BeatRelatedBeatNavComponent implements OnInit, OnChanges {\n\n  @Input()\n  selectedBeatId = '';\n\n  @Input()\n  brainstormListView: BeatMapView[] = [];\n\n  @Input()\n  structureListView: BeatMapView[] = [];\n\n  @Output() newBeat = new EventEmitter<BeatSubList>();\n\n  @Output() selectBeat = new EventEmitter<string>();\n\n  @Output() moveBeat  = new EventEmitter<BeatDropEvent>();\n\n  @Output() deleteBeat = new EventEmitter<void>();\n\n  beatDropLists: BeatDropList[] = [];\n\n  constructor(private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.createDropLists();\n  }\n\n  ngOnChanges(): void {\n    this.createDropLists();\n  }\n\n  private createDropLists(): void {\n    this.beatDropLists = [\n      {\n        id: 'structure-list',\n        label: 'Structure',\n        items: this.structureListView,\n        listType: BeatSubList.Structure,\n      } as BeatDropList,\n      {\n        id: 'brainstorm-list',\n        label: 'Brainstorm',\n        items: this.brainstormListView,\n        listType: BeatSubList.Brainstorm,\n      } as BeatDropList,\n    ];\n    this.ref.markForCheck();\n  }\n\n  canDelete(listType: BeatSubList): boolean {\n    if (listType === BeatSubList.Structure) {\n      return (this.structureListView || []).filter((entry) => entry.id === this.selectedBeatId).length > 0;\n    }\n\n    return (this.brainstormListView || []).filter((entry) => entry.id === this.selectedBeatId).length > 0;\n  }\n\n  drop(event: CdkDragDrop<BeatMapView[]>): void {\n    const targetList = event.container.id;\n    const sourceList = event.previousContainer.id;\n\n    const targetIndex = event.currentIndex;\n    const sourceIndex = event.previousIndex;\n\n    this.moveBeat.emit({\n      sourceList: (sourceList === 'structure-list') ? BeatSubList.Structure : BeatSubList.Brainstorm,\n      targetList: (targetList === 'structure-list') ? BeatSubList.Structure : BeatSubList.Brainstorm,\n      sourceIndex,\n      targetIndex,\n    } as BeatDropEvent);\n  }\n\n  formatDurationMs(value: number): string {\n    return getDurationStr(value);\n  }\n\n  formatCompleteness(value: Beat.Completeness): string {\n    switch (value) {\n      case Beat.Completeness.NOT_STARTED:\n        return 'Not Started';\n      case Beat.Completeness.BRAINSTORM:\n        return 'Brainstorm';\n      case Beat.Completeness.INITIAL_DRAFT:\n        return 'Initial Draft';\n      case Beat.Completeness.POLISHED:\n        return 'Polished';\n      case Beat.Completeness.FINAL:\n        return 'Final';\n    }\n    return 'Unknown';\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "items",
                    "type": "BeatMapView[]",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "listType",
                    "type": "BeatSubList",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BeatMapView",
            "id": "interface-BeatMapView-d063eed01fb059eb4dd1ea15b2e98f47",
            "file": "src/app/beats.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {StorageService} from './storage.service';\nimport {Beat, IBeat} from '../protos';\nimport {epochMsToTimestamp, timestampToEpochMs} from './timestamp-helpers';\nimport {v4 as uuidv4} from 'uuid';\nimport {TimelineBlock} from './timeline-chart/timeline-chart.component';\nimport TagReference = Beat.TagReference;\n\nexport interface BeatMapView {\n  id: string;\n  name: string;\n  lastUpdated: number;\n  parentBeats: string[]; // IDs of any beats which include this one in the structure or brainstorm\n  intendedDurationMs: number;\n  completeness: Beat.Completeness;\n}\n\nexport interface BeatReadView {\n  id: string;\n  name: string;\n  prose: string;\n  showExpanded: boolean;\n  completeness: Beat.Completeness;\n}\n\nconst ALL_BEAT_MAP_KEY = 'allBeatMap';\nconst BEAT_KEY_PREFIX = 'beat-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BeatsService {\n\n  constructor(private storageService: StorageService) { }\n\n  private static getInitialMapVersion(beat: IBeat): BeatMapView {\n    return {\n      id: beat.id,\n      name: beat.synopsis,\n      lastUpdated: timestampToEpochMs(beat.lastUpdated),\n      parentBeats: [],\n      intendedDurationMs: beat.intendedDurationMs,\n      completeness: beat.completeness\n    } as BeatMapView;\n  }\n\n  private static getBeatKey(uuid: string): string {\n    return BEAT_KEY_PREFIX + uuid;\n  }\n\n  async setAllBeats(beats: IBeat[]): Promise<void> {\n    await this.setBeatMap(\n      this.generateBeatMap(beats)\n    );\n\n    for (const beat of beats) {\n      await this.setBeat(beat as Beat, false, false);\n    }\n  }\n\n  async createNewBeat(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newBeat = Beat.create({\n      id: uuid,\n      synopsis: 'My new beat',\n      prose: '',\n      intendedDurationMs: 60 * 1000,\n      structure: [],\n      brainstorm: [],\n    });\n\n    await this.setBeat(newBeat, true, true);\n\n    return uuid;\n  }\n\n  async deleteBeat(beatId: string): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n    let beatMap = await this.getBeatMap();\n\n    // Remove any references to this beat as child\n    const parentIds = beatMap.get(beatId)?.parentBeats as string[];\n    for (const parentId of parentIds) {\n      const parentBeat = await this.getBeat(parentId) as Beat;\n      parentBeat.brainstorm = parentBeat.brainstorm.filter(brainstormId => brainstormId !== beatId);\n      parentBeat.structure = parentBeat.structure.filter(structureId => structureId !== beatId);\n      await this.setBeat(parentBeat, true, true);\n    }\n\n    // Re-fetch the beat map, to pick up all the recent changes\n    beatMap = await this.getBeatMap();\n\n    // Remove this beat as \"parent\" in any children\n    BeatsService.removeIdFromParents(\n      beatMap,\n      beatId,\n      (beat.structure || [])\n    );\n    BeatsService.removeIdFromParents(\n      beatMap,\n      beatId,\n      (beat.brainstorm || [])\n    );\n    beatMap.delete(beatId);\n    await this.setBeatMap(beatMap);\n\n    await this.storageService.delete(\n      BeatsService.getBeatKey(beatId),\n      true\n    );\n  }\n\n  async setBeat(beat: Beat, affectsMapView: boolean = false, affectsLastUpdated: boolean = true): Promise<void> {\n    if (affectsLastUpdated) {\n      beat.lastUpdated = epochMsToTimestamp(Date.now());\n    }\n\n    if (affectsMapView) {\n      const originalBeat = await this.getBeat(beat.id) as Beat;\n      const beatMap = await this.getBeatMap();\n\n      const originalBrainstorm = (originalBeat?.brainstorm || []);\n      const originalStructure = (originalBeat?.structure || []);\n\n      // Determine if there are any changes in the children\n      if (!allStringsInBothArrays(beat.brainstorm, originalBrainstorm)\n        || !allStringsInBothArrays(beat.structure, originalStructure)) {\n        BeatsService.removeIdFromParents(\n          beatMap,\n          beat.id,\n          originalBrainstorm\n        );\n        BeatsService.removeIdFromParents(\n          beatMap,\n          beat.id,\n          originalStructure\n        );\n\n        BeatsService.addParentToChildren(\n          beatMap,\n          beat.id,\n          beat.brainstorm\n        );\n        BeatsService.addParentToChildren(\n          beatMap,\n          beat.id,\n          beat.structure\n        );\n      }\n\n      const mapView = BeatsService.getInitialMapVersion(beat);\n      mapView.parentBeats = beatMap.get(beat.id)?.parentBeats || [];\n\n      beatMap.set(beat.id, mapView);\n      await this.setBeatMap(beatMap);\n    }\n\n    await this.storageService.set(\n      BeatsService.getBeatKey(beat.id),\n      Beat.encode(beat).finish(),\n      true\n    );\n  }\n\n  async getBeat(uuid: string): Promise<Beat|null> {\n    const fetchedData = (await this.storageService.get(BeatsService.getBeatKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find beat: ' + uuid);\n      return null;\n    }\n\n    return Beat.decode(\n      fetchedData\n    );\n  }\n\n  async getAllBeats(): Promise<Beat[]> {\n    const beatMap = await this.getBeatMap();\n\n    const allBeats: Beat[] = [];\n\n    for (const uuid of beatMap.keys()) {\n      const fetchedBeat = await this.getBeat(uuid);\n      if (fetchedBeat != null) {\n        allBeats.push(\n          fetchedBeat\n        );\n      }\n    }\n\n    return allBeats;\n  }\n\n  private async setBeatMap(beatMap: Map<string, BeatMapView>): Promise<void> {\n    await this.storageService.set(ALL_BEAT_MAP_KEY, beatMap, true);\n  }\n\n  private generateBeatMap(beats: IBeat[]): Map<string, BeatMapView> {\n    const beatMap = new Map<string, BeatMapView>();\n\n    beats.forEach((beat: IBeat) => {\n      beatMap.set(\n        beat.id as string,\n        BeatsService.getInitialMapVersion(beat)\n      );\n    });\n\n    // Set parent references\n    beats.forEach((beat: IBeat) => {\n      const id = beat.id as string;\n\n      BeatsService.addParentToChildren(\n        beatMap,\n        id,\n        (beat.brainstorm || [])\n      );\n      BeatsService.addParentToChildren(\n        beatMap,\n        id,\n        (beat.structure || [])\n      );\n    });\n\n    return beatMap;\n  }\n\n  async getBeatMap(): Promise<Map<string, BeatMapView>> {\n    return (await this.storageService.get(ALL_BEAT_MAP_KEY) || new Map()) as Map<string, BeatMapView>;\n  }\n\n  subscribeToBeatMapView(handler: (newBeatMapView: Map<string, BeatMapView>) => void): string {\n    return this.storageService.generateSubscription(ALL_BEAT_MAP_KEY, (fetchedValue) => {\n      handler(fetchedValue || new Map<string, BeatMapView>());\n    });\n  }\n\n  subscribeToBeat(beatId: string, handler: (newBeat: Beat|null) => void): string {\n    return this.storageService.generateSubscription(\n      BeatsService.getBeatKey(beatId),\n      (fetchedValue) => {\n        if (!fetchedValue) {\n          // Beat no longer found, this could occur from being deleted in\n          // another tab or component\n          return handler(null);\n        }\n\n        handler(\n          Beat.decode(\n            fetchedValue as Uint8Array\n          )\n        );\n      }\n    );\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  async fetchTimelineView(beatId: string): Promise<TimelineBlock[]> {\n    const timelineView: TimelineBlock[] = [];\n\n    await this.appendTimelineView(beatId, timelineView, 0, 0);\n\n    return timelineView.sort((a, b) => {\n      return a.depth - b.depth;\n    });\n  }\n\n  async appendTimelineView(\n    beatId: string,\n    currentTimelineView: TimelineBlock[],\n    currentDepth: number,\n    currentStartSec: number): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n\n    if (!beat) {\n      return;\n    }\n\n    const beatTimelineView = {\n      id: beat.id,\n      depth: currentDepth,\n      row: 'Depth ' + currentDepth,\n      label: beat.synopsis,\n      startSec: currentStartSec,\n      endSec: currentStartSec + (beat.intendedDurationMs / 1000),\n      completeness: beat.completeness,\n      tagReferences: beat.tagReferences as TagReference[]\n    } as TimelineBlock;\n\n    currentTimelineView.push(beatTimelineView);\n\n    let offsetSec = 0;\n    for (const childBeatId of beat.structure) {\n      const childBeat = await this.getBeat(childBeatId) as Beat;\n      await this.appendTimelineView(childBeatId, currentTimelineView, currentDepth + 1, offsetSec);\n      offsetSec += childBeat.intendedDurationMs / 1000;\n    }\n  }\n\n  async fetchReadView(beatId: string): Promise<BeatReadView[]> {\n    const readView: BeatReadView[] = [];\n\n    await this.appendReadView(beatId, readView);\n\n    return readView;\n  }\n\n  async appendReadView(beatId: string, currentReadView: BeatReadView[]): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n\n    if (!beat) {\n      return;\n    }\n\n    const beatReadView = {\n      id: beat.id,\n      name: beat.synopsis,\n      prose: beat.prose,\n      showExpanded: (beat.structure.length === 0),\n      completeness: beat.completeness\n    } as BeatReadView;\n\n    currentReadView.push(beatReadView);\n\n    // Recurse through child beats\n    for (const childBeat of beat.structure) {\n      await this.appendReadView(childBeat, currentReadView);\n    }\n  }\n\n  private static removeIdFromParents(beatMap: Map<string, BeatMapView>, id: string, children: string[]): void {\n    children.forEach(childId => {\n      const childBeat = beatMap.get(childId) as BeatMapView;\n      childBeat.parentBeats = childBeat.parentBeats.filter(parentId => parentId !== id);\n    });\n  }\n\n  private static addParentToChildren(beatMap: Map<string, BeatMapView>, id: string, children: string[]): void {\n    children.forEach(childId => {\n      const childBeat = beatMap.get(childId) as BeatMapView;\n      childBeat.parentBeats.push(id);\n    });\n  }\n}\n\nfunction allStringsInBothArrays(array1: string[], array2: string[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  return array1.every((value) => {\n    return array2.indexOf(value) >= 0;\n  });\n}\n",
            "properties": [
                {
                    "name": "completeness",
                    "type": "Beat.Completeness",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "intendedDurationMs",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "lastUpdated",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "parentBeats",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BeatMetadataUpdate",
            "id": "interface-BeatMetadataUpdate-01ce81890785070b1aa8607f47673ad2",
            "file": "src/app/writing-page/writing-metadata/writing-metadata.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Beat} from '../../../protos';\n\nexport interface BeatMetadataUpdate {\n  updatedBeat: Beat;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-writing-metadata',\n  templateUrl: './writing-metadata.component.html',\n  styleUrls: ['./writing-metadata.component.scss']\n})\nexport class WritingMetadataComponent implements OnInit {\n\n  @Input()\n  editingBeat: Beat = new Beat();\n\n  @Output() beatMeatadataUpdates = new EventEmitter<BeatMetadataUpdate>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onSynopsisChange(event: any): void {\n    const newSynopsis = event.target.value;\n\n    const updatedBeat = this.editingBeat;\n    updatedBeat.synopsis = newSynopsis;\n\n    this.beatMeatadataUpdates.emit({\n      updatedBeat,\n      modifiesListView: true,\n    } as BeatMetadataUpdate);\n  }\n\n}\n",
            "properties": [
                {
                    "name": "modifiesListView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "updatedBeat",
                    "type": "Beat",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BeatReadView",
            "id": "interface-BeatReadView-d063eed01fb059eb4dd1ea15b2e98f47",
            "file": "src/app/beats.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {StorageService} from './storage.service';\nimport {Beat, IBeat} from '../protos';\nimport {epochMsToTimestamp, timestampToEpochMs} from './timestamp-helpers';\nimport {v4 as uuidv4} from 'uuid';\nimport {TimelineBlock} from './timeline-chart/timeline-chart.component';\nimport TagReference = Beat.TagReference;\n\nexport interface BeatMapView {\n  id: string;\n  name: string;\n  lastUpdated: number;\n  parentBeats: string[]; // IDs of any beats which include this one in the structure or brainstorm\n  intendedDurationMs: number;\n  completeness: Beat.Completeness;\n}\n\nexport interface BeatReadView {\n  id: string;\n  name: string;\n  prose: string;\n  showExpanded: boolean;\n  completeness: Beat.Completeness;\n}\n\nconst ALL_BEAT_MAP_KEY = 'allBeatMap';\nconst BEAT_KEY_PREFIX = 'beat-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BeatsService {\n\n  constructor(private storageService: StorageService) { }\n\n  private static getInitialMapVersion(beat: IBeat): BeatMapView {\n    return {\n      id: beat.id,\n      name: beat.synopsis,\n      lastUpdated: timestampToEpochMs(beat.lastUpdated),\n      parentBeats: [],\n      intendedDurationMs: beat.intendedDurationMs,\n      completeness: beat.completeness\n    } as BeatMapView;\n  }\n\n  private static getBeatKey(uuid: string): string {\n    return BEAT_KEY_PREFIX + uuid;\n  }\n\n  async setAllBeats(beats: IBeat[]): Promise<void> {\n    await this.setBeatMap(\n      this.generateBeatMap(beats)\n    );\n\n    for (const beat of beats) {\n      await this.setBeat(beat as Beat, false, false);\n    }\n  }\n\n  async createNewBeat(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newBeat = Beat.create({\n      id: uuid,\n      synopsis: 'My new beat',\n      prose: '',\n      intendedDurationMs: 60 * 1000,\n      structure: [],\n      brainstorm: [],\n    });\n\n    await this.setBeat(newBeat, true, true);\n\n    return uuid;\n  }\n\n  async deleteBeat(beatId: string): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n    let beatMap = await this.getBeatMap();\n\n    // Remove any references to this beat as child\n    const parentIds = beatMap.get(beatId)?.parentBeats as string[];\n    for (const parentId of parentIds) {\n      const parentBeat = await this.getBeat(parentId) as Beat;\n      parentBeat.brainstorm = parentBeat.brainstorm.filter(brainstormId => brainstormId !== beatId);\n      parentBeat.structure = parentBeat.structure.filter(structureId => structureId !== beatId);\n      await this.setBeat(parentBeat, true, true);\n    }\n\n    // Re-fetch the beat map, to pick up all the recent changes\n    beatMap = await this.getBeatMap();\n\n    // Remove this beat as \"parent\" in any children\n    BeatsService.removeIdFromParents(\n      beatMap,\n      beatId,\n      (beat.structure || [])\n    );\n    BeatsService.removeIdFromParents(\n      beatMap,\n      beatId,\n      (beat.brainstorm || [])\n    );\n    beatMap.delete(beatId);\n    await this.setBeatMap(beatMap);\n\n    await this.storageService.delete(\n      BeatsService.getBeatKey(beatId),\n      true\n    );\n  }\n\n  async setBeat(beat: Beat, affectsMapView: boolean = false, affectsLastUpdated: boolean = true): Promise<void> {\n    if (affectsLastUpdated) {\n      beat.lastUpdated = epochMsToTimestamp(Date.now());\n    }\n\n    if (affectsMapView) {\n      const originalBeat = await this.getBeat(beat.id) as Beat;\n      const beatMap = await this.getBeatMap();\n\n      const originalBrainstorm = (originalBeat?.brainstorm || []);\n      const originalStructure = (originalBeat?.structure || []);\n\n      // Determine if there are any changes in the children\n      if (!allStringsInBothArrays(beat.brainstorm, originalBrainstorm)\n        || !allStringsInBothArrays(beat.structure, originalStructure)) {\n        BeatsService.removeIdFromParents(\n          beatMap,\n          beat.id,\n          originalBrainstorm\n        );\n        BeatsService.removeIdFromParents(\n          beatMap,\n          beat.id,\n          originalStructure\n        );\n\n        BeatsService.addParentToChildren(\n          beatMap,\n          beat.id,\n          beat.brainstorm\n        );\n        BeatsService.addParentToChildren(\n          beatMap,\n          beat.id,\n          beat.structure\n        );\n      }\n\n      const mapView = BeatsService.getInitialMapVersion(beat);\n      mapView.parentBeats = beatMap.get(beat.id)?.parentBeats || [];\n\n      beatMap.set(beat.id, mapView);\n      await this.setBeatMap(beatMap);\n    }\n\n    await this.storageService.set(\n      BeatsService.getBeatKey(beat.id),\n      Beat.encode(beat).finish(),\n      true\n    );\n  }\n\n  async getBeat(uuid: string): Promise<Beat|null> {\n    const fetchedData = (await this.storageService.get(BeatsService.getBeatKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find beat: ' + uuid);\n      return null;\n    }\n\n    return Beat.decode(\n      fetchedData\n    );\n  }\n\n  async getAllBeats(): Promise<Beat[]> {\n    const beatMap = await this.getBeatMap();\n\n    const allBeats: Beat[] = [];\n\n    for (const uuid of beatMap.keys()) {\n      const fetchedBeat = await this.getBeat(uuid);\n      if (fetchedBeat != null) {\n        allBeats.push(\n          fetchedBeat\n        );\n      }\n    }\n\n    return allBeats;\n  }\n\n  private async setBeatMap(beatMap: Map<string, BeatMapView>): Promise<void> {\n    await this.storageService.set(ALL_BEAT_MAP_KEY, beatMap, true);\n  }\n\n  private generateBeatMap(beats: IBeat[]): Map<string, BeatMapView> {\n    const beatMap = new Map<string, BeatMapView>();\n\n    beats.forEach((beat: IBeat) => {\n      beatMap.set(\n        beat.id as string,\n        BeatsService.getInitialMapVersion(beat)\n      );\n    });\n\n    // Set parent references\n    beats.forEach((beat: IBeat) => {\n      const id = beat.id as string;\n\n      BeatsService.addParentToChildren(\n        beatMap,\n        id,\n        (beat.brainstorm || [])\n      );\n      BeatsService.addParentToChildren(\n        beatMap,\n        id,\n        (beat.structure || [])\n      );\n    });\n\n    return beatMap;\n  }\n\n  async getBeatMap(): Promise<Map<string, BeatMapView>> {\n    return (await this.storageService.get(ALL_BEAT_MAP_KEY) || new Map()) as Map<string, BeatMapView>;\n  }\n\n  subscribeToBeatMapView(handler: (newBeatMapView: Map<string, BeatMapView>) => void): string {\n    return this.storageService.generateSubscription(ALL_BEAT_MAP_KEY, (fetchedValue) => {\n      handler(fetchedValue || new Map<string, BeatMapView>());\n    });\n  }\n\n  subscribeToBeat(beatId: string, handler: (newBeat: Beat|null) => void): string {\n    return this.storageService.generateSubscription(\n      BeatsService.getBeatKey(beatId),\n      (fetchedValue) => {\n        if (!fetchedValue) {\n          // Beat no longer found, this could occur from being deleted in\n          // another tab or component\n          return handler(null);\n        }\n\n        handler(\n          Beat.decode(\n            fetchedValue as Uint8Array\n          )\n        );\n      }\n    );\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  async fetchTimelineView(beatId: string): Promise<TimelineBlock[]> {\n    const timelineView: TimelineBlock[] = [];\n\n    await this.appendTimelineView(beatId, timelineView, 0, 0);\n\n    return timelineView.sort((a, b) => {\n      return a.depth - b.depth;\n    });\n  }\n\n  async appendTimelineView(\n    beatId: string,\n    currentTimelineView: TimelineBlock[],\n    currentDepth: number,\n    currentStartSec: number): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n\n    if (!beat) {\n      return;\n    }\n\n    const beatTimelineView = {\n      id: beat.id,\n      depth: currentDepth,\n      row: 'Depth ' + currentDepth,\n      label: beat.synopsis,\n      startSec: currentStartSec,\n      endSec: currentStartSec + (beat.intendedDurationMs / 1000),\n      completeness: beat.completeness,\n      tagReferences: beat.tagReferences as TagReference[]\n    } as TimelineBlock;\n\n    currentTimelineView.push(beatTimelineView);\n\n    let offsetSec = 0;\n    for (const childBeatId of beat.structure) {\n      const childBeat = await this.getBeat(childBeatId) as Beat;\n      await this.appendTimelineView(childBeatId, currentTimelineView, currentDepth + 1, offsetSec);\n      offsetSec += childBeat.intendedDurationMs / 1000;\n    }\n  }\n\n  async fetchReadView(beatId: string): Promise<BeatReadView[]> {\n    const readView: BeatReadView[] = [];\n\n    await this.appendReadView(beatId, readView);\n\n    return readView;\n  }\n\n  async appendReadView(beatId: string, currentReadView: BeatReadView[]): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n\n    if (!beat) {\n      return;\n    }\n\n    const beatReadView = {\n      id: beat.id,\n      name: beat.synopsis,\n      prose: beat.prose,\n      showExpanded: (beat.structure.length === 0),\n      completeness: beat.completeness\n    } as BeatReadView;\n\n    currentReadView.push(beatReadView);\n\n    // Recurse through child beats\n    for (const childBeat of beat.structure) {\n      await this.appendReadView(childBeat, currentReadView);\n    }\n  }\n\n  private static removeIdFromParents(beatMap: Map<string, BeatMapView>, id: string, children: string[]): void {\n    children.forEach(childId => {\n      const childBeat = beatMap.get(childId) as BeatMapView;\n      childBeat.parentBeats = childBeat.parentBeats.filter(parentId => parentId !== id);\n    });\n  }\n\n  private static addParentToChildren(beatMap: Map<string, BeatMapView>, id: string, children: string[]): void {\n    children.forEach(childId => {\n      const childBeat = beatMap.get(childId) as BeatMapView;\n      childBeat.parentBeats.push(id);\n    });\n  }\n}\n\nfunction allStringsInBothArrays(array1: string[], array2: string[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  return array1.every((value) => {\n    return array2.indexOf(value) >= 0;\n  });\n}\n",
            "properties": [
                {
                    "name": "completeness",
                    "type": "Beat.Completeness",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "prose",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "showExpanded",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BeatUpdate",
            "id": "interface-BeatUpdate-21b84596a307155e9639fc9da2b917c9",
            "file": "src/app/beat-prose-edit/beat-prose-edit.component.ts",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Beat} from '../../protos';\n\nimport {debounce} from 'debounce';\nimport {getDurationStr} from '../duration-helpers';\nimport Completeness = Beat.Completeness;\n\nexport interface BeatUpdate {\n  beat: Beat;\n  modifiesListView: boolean;\n}\n\ninterface CompletenessOption {\n  value: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-beat-prose-edit',\n  templateUrl: './beat-prose-edit.component.html',\n  styleUrls: ['./beat-prose-edit.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BeatProseEditComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  beat: Beat|null = null;\n\n  @Input()\n  childSumDuration = 0;\n\n  @Output() onBeatUpdated = new EventEmitter<BeatUpdate>();\n\n  onSynopsisInput = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    beat.synopsis = event.target.value;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true,\n    } as BeatUpdate);\n  }, 200);\n\n  onProseChanged = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    beat.prose = event.text;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: false,\n    } as BeatUpdate);\n  }, 200);\n\n  onDurationInput = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    const durationStr = event.target.value as string;\n    let parseDurationSec;\n\n    const splitDurationStr = durationStr.split(':');\n    if (splitDurationStr.length === 1) {\n      parseDurationSec = parseInt(splitDurationStr[0], 10) * 60;\n    } else {\n      parseDurationSec = parseFloat(splitDurationStr[1]) + 60 * parseInt(splitDurationStr[0], 10);\n    }\n\n    if (isNaN(parseDurationSec) || splitDurationStr.length > 2) {\n      return;\n    }\n\n    beat.intendedDurationMs = 1000 * parseDurationSec;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true\n    } as BeatUpdate);\n  }, 200);\n\n  completenessOptions: CompletenessOption[] = [\n      {\n        value: Completeness.NOT_STARTED,\n        label: 'Not Started'\n      },\n      {\n        value: Completeness.BRAINSTORM,\n        label: 'Brainstorm'\n      },\n      {\n        value: Completeness.INITIAL_DRAFT,\n        label: 'Initial Draft'\n      },\n      {\n        value: Completeness.POLISHED,\n        label: 'Polished'\n      },\n      {\n        value: Completeness.FINAL,\n        label: 'Final'\n      }\n    ] as CompletenessOption[];\n\n  ngOnInit(): void {\n  }\n\n  isEmpty(): boolean {\n    return this.beat == null;\n  }\n\n  getBeatDurationStr(): string {\n    const beat = this.beat as Beat;\n\n    return getDurationStr(beat.intendedDurationMs);\n  }\n\n  shouldShowChildSumDuration(): boolean {\n    return this.childSumDuration > 0;\n  }\n\n  getChildSumDurationStr(): string {\n    return '(' + getDurationStr(this.childSumDuration) + ') from children';\n  }\n\n  onCompletenessChange(newValue: any): void {\n    const beat = this.beat as Beat;\n    beat.completeness = newValue;\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true\n    } as BeatUpdate);\n  }\n}\n",
            "properties": [
                {
                    "name": "beat",
                    "type": "Beat",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "modifiesListView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BrainstormTemplateListView",
            "id": "interface-BrainstormTemplateListView-4a6b6977c2ae369435fb435fbc58d50a",
            "file": "src/app/brainstorm-template.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport {StorageService} from './storage.service';\nimport {BrainstormTemplate, IBrainstormTemplate} from '../protos';\n\n// Minimal details about a template to show in list view\nexport interface BrainstormTemplateListView {\n  id: string;\n  label: string;\n}\n\nconst ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY = 'allBrainstormTemplatesListView';\nconst BRAINSTORM_TEMPLATE_KEY_PREFIX = 'brainstormTemplate-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrainstormTemplateService {\n\n  constructor(private storageService: StorageService) { }\n\n  async getAllBrainstormTemplates(): Promise<BrainstormTemplate[]> {\n    const allEntries = await this.getAllTemplatesListView();\n\n    const allTemplates: BrainstormTemplate[] = [];\n    for (const entry of allEntries) {\n      const fetchedTemplate = await this.getBrainstormTemplate(entry.id);\n      if (fetchedTemplate != null) {\n        allTemplates.push(\n          fetchedTemplate\n        );\n      }\n    }\n\n    return allTemplates.filter((value) => !!value);\n  }\n\n  async getAllTemplatesListView(): Promise<BrainstormTemplateListView[]> {\n    return (await this.storageService.get(ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY) || []) as BrainstormTemplateListView[];\n  }\n\n  async setAllTemplatesListView(brainstormTemplates: IBrainstormTemplate[]): Promise<void> {\n    const listView = brainstormTemplates.map((brainstormTemplate: IBrainstormTemplate) => {\n      return {\n        id: brainstormTemplate.id,\n        label: brainstormTemplate.label,\n      } as BrainstormTemplateListView;\n    });\n\n    await this.storageService.set(ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY, listView, true);\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  getTemplateKey(uuid: string): string {\n    return BRAINSTORM_TEMPLATE_KEY_PREFIX + uuid;\n  }\n\n  async getBrainstormTemplate(uuid: string): Promise<BrainstormTemplate|null> {\n    const fetchedData = (await this.storageService.get(this.getTemplateKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find brainstorm template: ' + uuid);\n      return null;\n    }\n\n    return BrainstormTemplate.decode(\n      fetchedData\n    );\n  }\n\n  async setAllBrainstormTemplates(brainstormTemplates: IBrainstormTemplate[]): Promise<void> {\n    await this.setAllTemplatesListView(brainstormTemplates);\n\n    for (const brainstormTemplate of brainstormTemplates) {\n      await this.setBrainstormTemplate(brainstormTemplate as BrainstormTemplate);\n    }\n  }\n\n  async setBrainstormTemplate(brainstormTemplate: BrainstormTemplate, affectsListView: boolean = false): Promise<void> {\n    await this.storageService.set(\n      this.getTemplateKey(brainstormTemplate.id),\n      BrainstormTemplate.encode(brainstormTemplate).finish(),\n      true\n    );\n\n    if (affectsListView) {\n      await this.refreshAllTemplatesListView();\n    }\n  }\n\n  async refreshAllTemplatesListView(): Promise<void> {\n    const allTemplates = await this.getAllBrainstormTemplates();\n\n    await this.setAllTemplatesListView(\n      allTemplates.filter((template) => !!template)\n    );\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    await this.storageService.delete(\n      this.getTemplateKey(templateId),\n      true\n    );\n\n    const listViewEligible = (await this.getAllTemplatesListView())\n      .filter((brainstormTemplate) => {\n        return brainstormTemplate.id !== templateId;\n      });\n\n    await this.setAllTemplatesListView(listViewEligible);\n  }\n\n  // Creates a new structure template, and returns the uuid of the new entry\n  async createNewBrainstormTemplate(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newBrainstormTemplate = BrainstormTemplate.create({\n      id: uuid,\n      label: 'My new template',\n      template: 'This is the placeholder content that will appear when a user selects this.\\n\\nYou could pose a question here, or give an exercise to explore'\n    });\n\n    await this.setBrainstormTemplate(newBrainstormTemplate);\n\n    const allBrainstormTemplates = await this.getAllBrainstormTemplates();\n    allBrainstormTemplates.push(newBrainstormTemplate);\n\n    await this.setAllTemplatesListView(allBrainstormTemplates);\n\n    return uuid;\n  }\n\n  subscribeToTemplateListView(handler: (newTemplateListView: BrainstormTemplateListView[]) => void): string {\n    return this.storageService.generateSubscription(ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY, (fetchedValue) => {\n      handler((fetchedValue || []) as BrainstormTemplateListView[]);\n    });\n  }\n\n  subscribeToTemplate(templateId: string, handler: (newTemplate: BrainstormTemplate) => void): string {\n    return this.storageService.generateSubscription(this.getTemplateKey(templateId), (fetchedValue) => {\n      handler(\n        BrainstormTemplate.decode(\n          fetchedValue as Uint8Array\n        )\n      );\n    });\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "BrainstormTemplateUpdate",
            "id": "interface-BrainstormTemplateUpdate-d20ccb1ce8da872c5a37607ca49dfdf0",
            "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {BrainstormTemplate} from '../../../protos';\n\nimport {debounce} from 'debounce';\n\nexport interface BrainstormTemplateUpdate {\n  brainstormTemplate: BrainstormTemplate;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-brainstorm-template-details',\n  templateUrl: './brainstorm-template-details.component.html',\n  styleUrls: ['./brainstorm-template-details.component.scss']\n})\nexport class BrainstormTemplateDetailsComponent {\n\n  constructor() { }\n\n  @Input()\n  brainstormTemplate: BrainstormTemplate|null = null;\n\n  @Output() brainstormTemplateUpdated = new EventEmitter<BrainstormTemplateUpdate>();\n\n  onLabelInput = debounce((event: any) => {\n    const brainstormTemplate = this.brainstormTemplate as BrainstormTemplate;\n\n    brainstormTemplate.label = event.target.value;\n\n    this.brainstormTemplateUpdated.emit({\n      brainstormTemplate,\n      modifiesListView: true,\n    } as BrainstormTemplateUpdate);\n  }, 200);\n\n  onTemplateInput = debounce((event: any) => {\n    const brainstormTemplate = this.brainstormTemplate as BrainstormTemplate;\n\n    brainstormTemplate.template = event.target.value;\n\n    this.brainstormTemplateUpdated.emit({\n      brainstormTemplate,\n      modifiesListView: false,\n    } as BrainstormTemplateUpdate);\n  }, 200);\n\n  isEmpty(): boolean {\n    return this.brainstormTemplate == null;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "brainstormTemplate",
                    "type": "BrainstormTemplate",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "modifiesListView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "CompletenessOption",
            "id": "interface-CompletenessOption-21b84596a307155e9639fc9da2b917c9",
            "file": "src/app/beat-prose-edit/beat-prose-edit.component.ts",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Beat} from '../../protos';\n\nimport {debounce} from 'debounce';\nimport {getDurationStr} from '../duration-helpers';\nimport Completeness = Beat.Completeness;\n\nexport interface BeatUpdate {\n  beat: Beat;\n  modifiesListView: boolean;\n}\n\ninterface CompletenessOption {\n  value: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-beat-prose-edit',\n  templateUrl: './beat-prose-edit.component.html',\n  styleUrls: ['./beat-prose-edit.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BeatProseEditComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  beat: Beat|null = null;\n\n  @Input()\n  childSumDuration = 0;\n\n  @Output() onBeatUpdated = new EventEmitter<BeatUpdate>();\n\n  onSynopsisInput = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    beat.synopsis = event.target.value;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true,\n    } as BeatUpdate);\n  }, 200);\n\n  onProseChanged = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    beat.prose = event.text;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: false,\n    } as BeatUpdate);\n  }, 200);\n\n  onDurationInput = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    const durationStr = event.target.value as string;\n    let parseDurationSec;\n\n    const splitDurationStr = durationStr.split(':');\n    if (splitDurationStr.length === 1) {\n      parseDurationSec = parseInt(splitDurationStr[0], 10) * 60;\n    } else {\n      parseDurationSec = parseFloat(splitDurationStr[1]) + 60 * parseInt(splitDurationStr[0], 10);\n    }\n\n    if (isNaN(parseDurationSec) || splitDurationStr.length > 2) {\n      return;\n    }\n\n    beat.intendedDurationMs = 1000 * parseDurationSec;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true\n    } as BeatUpdate);\n  }, 200);\n\n  completenessOptions: CompletenessOption[] = [\n      {\n        value: Completeness.NOT_STARTED,\n        label: 'Not Started'\n      },\n      {\n        value: Completeness.BRAINSTORM,\n        label: 'Brainstorm'\n      },\n      {\n        value: Completeness.INITIAL_DRAFT,\n        label: 'Initial Draft'\n      },\n      {\n        value: Completeness.POLISHED,\n        label: 'Polished'\n      },\n      {\n        value: Completeness.FINAL,\n        label: 'Final'\n      }\n    ] as CompletenessOption[];\n\n  ngOnInit(): void {\n  }\n\n  isEmpty(): boolean {\n    return this.beat == null;\n  }\n\n  getBeatDurationStr(): string {\n    const beat = this.beat as Beat;\n\n    return getDurationStr(beat.intendedDurationMs);\n  }\n\n  shouldShowChildSumDuration(): boolean {\n    return this.childSumDuration > 0;\n  }\n\n  getChildSumDurationStr(): string {\n    return '(' + getDurationStr(this.childSumDuration) + ') from children';\n  }\n\n  onCompletenessChange(newValue: any): void {\n    const beat = this.beat as Beat;\n    beat.completeness = newValue;\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true\n    } as BeatUpdate);\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "value",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "EnumOption",
            "id": "interface-EnumOption-d739302a6c077eb55ce6a1768f5d7877",
            "file": "src/app/apply-tag-nav/apply-tag-nav.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, OnInit, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, OnChanges} from '@angular/core';\nimport {Beat, Tag} from '../../protos';\nimport TagReference = Beat.TagReference;\nimport EnumValue = Tag.EnumValue;\nimport ITagReference = Beat.ITagReference;\n\nimport {debounce} from 'debounce';\n\ninterface EnumOption {\n  value: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-apply-tag-nav',\n  templateUrl: './apply-tag-nav.component.html',\n  styleUrls: ['./apply-tag-nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ApplyTagNavComponent implements OnInit, OnChanges {\n\n  constructor(private ref: ChangeDetectorRef) { }\n\n  @Input()\n  tagMap: Map<string, Tag>|null = null;\n\n  @Input()\n  tagReferences: ITagReference[] = [];\n\n  @Output() updateTagUses = new EventEmitter<ITagReference[]>();\n\n  remainingTagOptions: Tag[] = [];\n  alreadyReferencedTagIds: Set<string> = new Set<string>();\n  enumOptionsMap: Map<string, EnumOption[]> = new Map<string, EnumOption[]>();\n\n  selectedOptionId = '';\n\n  numericChange = debounce((tagId: string|undefined|null, inputEvent: any) => {\n    const newValue = inputEvent.target.value as number;\n\n    this.tagReferences.forEach((tagReference) => {\n      if (tagReference.tagId !== tagId) {\n        return;\n      }\n\n      tagReference.numericValue = newValue;\n    });\n\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }, 250);\n\n  ngOnInit(): void {\n    this.rebuildRemainingTagOptions();\n    this.ref.markForCheck();\n  }\n\n  ngOnChanges(): void {\n    this.rebuildRemainingTagOptions();\n\n    this.enumOptionsMap = new Map<string, EnumOption[]>();\n\n    this.tagMap?.forEach((tag) => {\n      const enumValues = tag?.enumValues as EnumValue[] || [];\n\n      const enumOptions = enumValues.map((value, index) => {\n        if (value.isDeprecated) {\n          return {} as EnumOption;\n        }\n\n        return {\n          label: value.label,\n          value: index + 1 // 0 is reserved for \"undecided\"\n        } as EnumOption;\n      }).filter(value => !!value.label);\n\n      this.enumOptionsMap.set(tag.id, enumOptions);\n    });\n\n    this.ref.markForCheck();\n  }\n\n  rebuildRemainingTagOptions(): void {\n    this.alreadyReferencedTagIds = new Set<string>();\n    this.tagReferences.forEach((reference) => {\n      this.alreadyReferencedTagIds.add(reference.tagId as string);\n    });\n\n    this.remainingTagOptions = [];\n    this.tagMap?.forEach((tag) => {\n      if (!this.alreadyReferencedTagIds.has(tag.id)) {\n        this.remainingTagOptions.push(tag);\n      }\n    });\n  }\n\n  selectOption(newId: string): void {\n    this.selectedOptionId = newId;\n  }\n\n  addTag(): void {\n    this.tagReferences.push({\n      tagId: this.selectedOptionId,\n    } as TagReference);\n\n    this.selectOption('');\n    this.rebuildRemainingTagOptions();\n\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }\n\n  getTagName(tagId: string|undefined|null): string {\n    const tag = this.tagMap?.get(tagId as string) as Tag;\n\n    return tag.name;\n  }\n\n  dereferenceTag(tagId: string|undefined|null): void {\n    this.tagReferences = this.tagReferences.filter((reference) => {\n      return reference.tagId !== tagId;\n    });\n\n    this.rebuildRemainingTagOptions();\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }\n\n  emitReferenceUpdate(): void {\n    this.updateTagUses.emit(this.tagReferences);\n  }\n\n  showNumericInput(tagId: string|undefined|null): boolean {\n    const tag = this.tagMap?.get(tagId as string);\n    return !!tag?.hasNumericValue;\n  }\n\n  showEnumSelect(tagId: string|undefined|null): boolean {\n    const tag = this.tagMap?.get(tagId as string);\n    return !!tag?.enumValues?.length;\n  }\n\n  getEnumOptions(tagId: string|undefined|null): EnumOption[] {\n    return this.enumOptionsMap.get(tagId as string) || [];\n  }\n\n  enumChange(tagId: string|undefined|null, changeEvent: any): void {\n    this.tagReferences.forEach((tagReference) => {\n      if (tagReference.tagId !== tagId) {\n        return;\n      }\n\n      tagReference.enumValue = changeEvent as number;\n    });\n\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "value",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "PreppedTimelineBlock",
            "id": "interface-PreppedTimelineBlock-daa40ad4ca0be3da7b515584801d85b0",
            "file": "src/app/timeline-chart/timeline-chart.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, AfterViewInit, Input, Output, OnInit, OnChanges} from '@angular/core';\nimport {getDurationStr} from '../duration-helpers';\nimport {Beat, Tag} from '../../protos';\nimport Completeness = Beat.Completeness;\nimport TagReference = Beat.TagReference;\n\nexport interface TimelineBlock {\n  id: string;\n  startSec: number;\n  endSec: number;\n  label: string;\n  depth: number;\n  completeness: Completeness;\n  tagReferences: TagReference[];\n}\n\ninterface PreppedTimelineBlock {\n  id: string;\n  width: number;\n  left: number;\n  color: string;\n  label: string;\n}\n\ninterface TimelineMarker {\n  left: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-timeline-chart',\n  templateUrl: './timeline-chart.component.html',\n  styleUrls: ['./timeline-chart.component.scss']\n})\nexport class TimelineChartComponent implements OnInit, OnChanges {\n\n  @Input()\n  timelineBlocks: TimelineBlock[] = [];\n\n  @Input()\n  relevantTags: Tag[] = [];\n\n  @Output() selectBeat = new EventEmitter<string>();\n\n  zoomLevel = 100;\n\n  preppedTimelineBlockRows: PreppedTimelineBlock[][] = [];\n  preppedTimelineMarkers: TimelineMarker[] = [];\n  minTimeSec = 0;\n  maxTimeSec = 0;\n\n  selectedTagId = '';\n  selectedTag: Tag|null = null;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.rebuildTimeline();\n  }\n\n  ngOnChanges(): void {\n    this.rebuildTimeline();\n  }\n\n  rebuildTimeline(): void {\n    if (!this.timelineBlocks.length) {\n      return;\n    }\n\n    this.minTimeSec = this.timelineBlocks[0].startSec;\n    this.maxTimeSec = this.timelineBlocks[0].endSec;\n\n    this.timelineBlocks.forEach((block) => {\n      this.minTimeSec = Math.min(block.startSec, this.minTimeSec);\n      this.maxTimeSec = Math.max(block.endSec, this.maxTimeSec);\n    });\n\n    const depthMap = new Map<number, PreppedTimelineBlock[]>();\n\n    this.timelineBlocks.forEach((block) => {\n      if (!depthMap.has(block.depth)) {\n        depthMap.set(block.depth, []);\n      }\n\n      const width = (block.endSec - block.startSec) / (this.maxTimeSec - this.minTimeSec) * 100;\n      const left = (block.startSec - this.minTimeSec)  / (this.maxTimeSec - this.minTimeSec) * 100;\n\n      const relevantTagRef = block.tagReferences\n        .filter((reference) => reference.tagId === this.selectedTagId)[0] || null;\n\n      let color = '#ccc';\n      if (!this.selectedTag) {\n        switch (block.completeness) {\n          case Beat.Completeness.FINAL:\n            color = 'rgb(0, 128, 0)';\n            break;\n          case Beat.Completeness.POLISHED:\n            color = 'rgb(173, 255, 47)';\n            break;\n          case Beat.Completeness.INITIAL_DRAFT:\n            color = 'rgb(255, 255, 0)';\n            break;\n          case Beat.Completeness.BRAINSTORM:\n            color = 'rgb(255, 128, 0)';\n            break;\n          case Beat.Completeness.NOT_STARTED:\n            color = 'rgb(255, 0, 0)';\n            break;\n        }\n      } else {\n        if (!!relevantTagRef) {\n          color = '#ff0000';\n        }\n      }\n\n      let label = block.label;\n      if (!!relevantTagRef && (relevantTagRef.numericValue || relevantTagRef?.enumValue)) {\n        if (relevantTagRef.numericValue) {\n          label += ' (' + relevantTagRef.numericValue + ')';\n        }\n        if (relevantTagRef.enumValue) {\n          label += ' (' + (this.selectedTag as Tag).enumValues[relevantTagRef.enumValue - 1].label + ')';\n        }\n      }\n\n\n      depthMap.get(block.depth)?.push({\n        id: block.id,\n        width,\n        left,\n        color,\n        label\n      } as PreppedTimelineBlock);\n    });\n\n    const newRows: PreppedTimelineBlock[][] = [];\n\n    const allDepths = Array.from(depthMap.keys()).sort();\n    allDepths.forEach((depth) => {\n      newRows.push(depthMap.get(depth) as PreppedTimelineBlock[]);\n    });\n\n    this.preppedTimelineBlockRows = newRows;\n\n    this.rebuildTimelineMarkers();\n  }\n\n  rebuildTimelineMarkers(): void {\n    const numMarkers = Math.round(this.zoomLevel / 25);\n    this.preppedTimelineMarkers = [];\n    for (let i = 0; i < numMarkers; i++) {\n      const time = (i / numMarkers) * 0.9 * (this.maxTimeSec - this.minTimeSec) + this.minTimeSec;\n      const left = 100 * (i / numMarkers);\n      this.preppedTimelineMarkers.push({\n        left,\n        label: getDurationStr(time * 1000),\n      } as TimelineMarker);\n    }\n  }\n\n  zoomOut(): void {\n    this.zoomLevel = Math.max(100, this.zoomLevel / 2);\n    this.rebuildTimelineMarkers();\n  }\n\n  zoomIn(): void {\n    this.zoomLevel = 2.0 * this.zoomLevel;\n    this.rebuildTimelineMarkers();\n  }\n\n  formatPercentString(value: number): string {\n    return '' + value + '%';\n  }\n\n  tagSelectionChange(value: string): void {\n    this.selectedTagId = value;\n    this.selectedTag = this.relevantTags.filter((tag) => tag.id === value)[0] || null;\n    this.rebuildTimeline();\n  }\n}\n",
            "properties": [
                {
                    "name": "color",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "left",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "width",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "StorageSubscription",
            "id": "interface-StorageSubscription-4ddd1b1e4771cc3369577cbcc9221257",
            "file": "src/app/storage.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {StorageMap} from '@ngx-pwa/local-storage';\nimport * as hash from 'object-hash';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface StorageSubscription {\n  subscriptionKey: string;\n  storageKey: string;\n  lastHashValue: string;\n  callback: (updatedValue: any) => void;\n}\n\nconst POLL_FREQUENCY = 250;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  // subscriptions\n  private subscriptions: Map<string, StorageSubscription> = new Map();\n\n  constructor(private storage: StorageMap) {\n    setInterval(async () => {\n      for (const subscription of this.subscriptions.values()) {\n        await this.checkSubscription(subscription);\n      }\n    }, POLL_FREQUENCY);\n  }\n\n  async get(key: string): Promise<any> {\n    return await this.storage.get(key).toPromise();\n  }\n\n  async set(key: string, value: any, isSubscribable: boolean = false): Promise<void> {\n\n    await this.storage.set(key, value).toPromise();\n\n    if (isSubscribable) {\n      // Store the hash value, so that other tabs can poll for the value and detect changes\n      // that they didn't necessarily make\n      const hashValue = hash(value, {algorithm: 'sha1'});\n      await this.storage.set(this.getHashKey(key), hashValue).toPromise();\n    }\n  }\n\n  generateSubscription(storageKey: string, callback: (updatedValue: any) => void): string {\n    const subscriptionUuid = uuidv4();\n\n    const newSubscription = {\n      storageKey,\n      callback,\n      subscriptionKey: subscriptionUuid,\n      lastHashValue: ''\n    } as StorageSubscription;\n\n    this.subscriptions.set(subscriptionUuid, newSubscription);\n\n    // Kick off subscription so there's not a weird POLL_FREQUENCY delay\n    setTimeout(async () => {\n      await this.checkSubscription(newSubscription);\n    }, 1);\n\n    return subscriptionUuid;\n  }\n\n  cancelSubscription(subscriptionKey: string): void {\n    this.subscriptions.delete(subscriptionKey);\n  }\n\n  async checkSubscription(subscription: StorageSubscription): Promise<void> {\n    const fetchedHashValue = await this.storage.get(this.getHashKey(subscription.storageKey)).toPromise();\n    if (!fetchedHashValue) {\n      console.error('Subscription checked on storage key ' + subscription.storageKey\n        + ', please make sure it is being set with isSubscribable=true');\n      return;\n    }\n\n    const newHashValue = fetchedHashValue as string;\n    if (newHashValue === subscription.lastHashValue) {\n      return;\n    }\n\n    subscription.callback(\n      await this.get(subscription.storageKey)\n    );\n\n    subscription.lastHashValue = newHashValue;\n\n    this.subscriptions.set(subscription.subscriptionKey, subscription);\n  }\n\n  getHashKey(key: string): string {\n    return key + '-sha1';\n  }\n\n  async clearAll(): Promise<void> {\n    await this.storage.clear().toPromise();\n  }\n\n  async delete(key: string, isSubscribable: boolean = false): Promise<void> {\n    if (isSubscribable) {\n      // Notify subscriptions that the value no longer exists\n      await this.storage.set(this.getHashKey(key), 'nolongervalid').toPromise();\n    }\n\n    await this.storage.delete(key).toPromise();\n  }\n}\n",
            "properties": [
                {
                    "name": "callback",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "lastHashValue",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "storageKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "subscriptionKey",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "StructureTemplateListView",
            "id": "interface-StructureTemplateListView-29ef98847d39cbaaedaaf06f0f5f7658",
            "file": "src/app/structure-template.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport {IStructureTemplate, StructureTemplate} from '../protos';\nimport {StorageService} from './storage.service';\nimport StructureTemplateBeat = StructureTemplate.StructureTemplateBeat;\n\n// Minimal details about a template to show in list view\nexport interface StructureTemplateListView {\n  id: string;\n  name: string;\n}\n\nconst ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY = 'allStructureTemplatesListView';\nconst STRUCTURE_TEMPLATE_KEY_PREFIX = 'structureTemplate-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StructureTemplateService {\n\n  constructor(private storageService: StorageService) { }\n\n  async getAllStructureTemplates(): Promise<StructureTemplate[]> {\n    const allEntries = await this.getAllTemplatesListView();\n\n    const allTemplates: StructureTemplate[] = [];\n    for (const entry of allEntries) {\n      const fetchedTemplate = await this.getStructureTemplate(entry.id);\n      if (fetchedTemplate != null) {\n        allTemplates.push(\n          fetchedTemplate\n        );\n      }\n    }\n\n    return allTemplates.filter((value) => !!value);\n  }\n\n  async getAllTemplatesListView(): Promise<StructureTemplateListView[]> {\n    return (await this.storageService.get(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY) || []) as StructureTemplateListView[];\n  }\n\n  async setAllTemplatesListView(structureTemplates: IStructureTemplate[]): Promise<void> {\n    const listView = structureTemplates.map((structureTemplate: IStructureTemplate) => {\n      return {\n        id: structureTemplate.id,\n        name: structureTemplate.name,\n      } as StructureTemplateListView;\n    });\n\n    await this.storageService.set(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY, listView, true);\n  }\n\n  subscribeToTemplateListView(handler: (newTemplateListView: StructureTemplateListView[]) => void): string {\n    return this.storageService.generateSubscription(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY, (fetchedValue) => {\n      handler((fetchedValue || []) as StructureTemplateListView[]);\n    });\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  getTemplateKey(uuid: string): string {\n    return STRUCTURE_TEMPLATE_KEY_PREFIX + uuid;\n  }\n\n  async getStructureTemplate(uuid: string): Promise<StructureTemplate|null> {\n    const fetchedData = (await this.storageService.get(this.getTemplateKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find structure template: ' + uuid);\n      return null;\n    }\n\n    return StructureTemplate.decode(\n      fetchedData\n    );\n  }\n\n  async setAllStructureTemplates(structureTemplates: IStructureTemplate[]): Promise<void> {\n    await this.setAllTemplatesListView(structureTemplates);\n\n    for (const structureTemplate of structureTemplates) {\n      await this.setStructureTemplate(structureTemplate as StructureTemplate);\n    }\n  }\n\n  async setStructureTemplate(structureTemplate: StructureTemplate, affectsListView: boolean = false): Promise<void> {\n    await this.storageService.set(\n      this.getTemplateKey(structureTemplate.id),\n      StructureTemplate.encode(structureTemplate).finish(),\n      true\n    );\n\n    if (affectsListView) {\n      await this.refreshAllTemplatesListView();\n    }\n  }\n\n  subscribeToTemplate(templateId: string, handler: (newTemplate: StructureTemplate) => void): string {\n    return this.storageService.generateSubscription(this.getTemplateKey(templateId), (fetchedValue) => {\n      handler(\n        StructureTemplate.decode(\n          fetchedValue as Uint8Array\n        )\n      );\n    });\n  }\n\n  async refreshAllTemplatesListView(): Promise<void> {\n    const allTemplates = await this.getAllStructureTemplates();\n\n    await this.setAllTemplatesListView(\n      allTemplates.filter((template) => !!template)\n    );\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    await this.storageService.delete(\n      this.getTemplateKey(templateId),\n      true\n    );\n\n    const listViewEligible = (await this.getAllTemplatesListView())\n      .filter((structureTemplate) => {\n        return structureTemplate.id !== templateId;\n    });\n\n    await this.setAllTemplatesListView(listViewEligible);\n  }\n\n  // Creates a new structure template, and returns the uuid of the new entry\n  async createNewStructureTemplate(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newStructureTemplate = StructureTemplate.create({\n      id: uuid,\n      name: 'My new template',\n      description: 'Description goes here',\n      beats: [\n        StructureTemplateBeat.create({\n          description: 'This is the first beat',\n          intendedDurationMs: 5\n        })\n      ]\n    });\n\n    await this.setStructureTemplate(newStructureTemplate);\n\n    const allStructureTemplates = await this.getAllStructureTemplates();\n    allStructureTemplates.push(newStructureTemplate);\n\n    await this.setAllTemplatesListView(allStructureTemplates);\n\n    return uuid;\n  }\n\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "StructureTemplateUpdate",
            "id": "interface-StructureTemplateUpdate-90a189ad992e2d017728a0320f829c39",
            "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output} from '@angular/core';\nimport {StructureTemplate} from '../../../protos';\nimport {ContentChange} from 'ngx-quill/lib/quill-editor.component';\nimport {DeltaOperation} from 'quill';\nimport StructureTemplateBeat = StructureTemplate.StructureTemplateBeat;\n\nimport {debounce} from 'debounce';\n\nexport interface StructureTemplateUpdate {\n  structureTemplate: StructureTemplate;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-structure-template-details',\n  templateUrl: './structure-template-details.component.html',\n  styleUrls: ['./structure-template-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StructureTemplateDetailsComponent implements OnChanges {\n\n  constructor(private ref: ChangeDetectorRef) {}\n  @Input()\n  structureTemplate: StructureTemplate|null = null;\n\n  @Output() templateUpdated = new EventEmitter<StructureTemplateUpdate>();\n\n  quillContent: DeltaOperation[] = [];\n  errorMessage = '';\n  lastStructureTemplateInput: StructureTemplate|null = null;\n\n  onContentChanged = debounce((contentChangeEvent: ContentChange) => {\n    this.parseContent(contentChangeEvent.text + '\\n');\n  }, 200);\n\n  ngOnChanges(): void {\n    if (this.areStructureTemplatesEqual(this.lastStructureTemplateInput, this.structureTemplate)) {\n      // No reason to update\n      return;\n    }\n\n    this.lastStructureTemplateInput = this.structureTemplate;\n    this.refreshQuillContent();\n  }\n\n  refreshQuillContent(): void {\n    this.quillContent = [];\n\n    this.quillContent.push(\n      getQuillHeader('Name')\n    );\n\n    this.quillContent.push({\n      insert: this.structureTemplate?.name + '\\n',\n      attributes: {},\n    });\n\n    this.quillContent.push(\n      getQuillHeader('Description')\n    );\n\n    this.quillContent.push({\n      insert: this.structureTemplate?.description + '\\n',\n      attributes: {},\n    });\n\n    this.quillContent.push(\n      getQuillHeader('Beats')\n    );\n\n    if (!!this.structureTemplate?.beats) {\n      const beats = this.structureTemplate.beats;\n      for (let i = 0; i < beats.length; i++) {\n\n        this.quillContent.push(\n          getQuillSubHeader('Description')\n        );\n\n        this.quillContent.push({\n          insert: beats[i].description + '\\n',\n          attributes: {},\n        });\n\n        this.quillContent.push(\n          getQuillSubHeader('Duration')\n        );\n\n        this.quillContent.push({\n          insert: beats[i].intendedDurationMs + '\\n',\n          attributes: {},\n        });\n\n        if (i + 1 < beats.length) {\n          this.quillContent.push(\n            getQuillSeparator()\n          );\n        }\n      }\n    }\n    this.ref.markForCheck();\n  }\n\n  isEmpty(): boolean {\n    return this.structureTemplate == null;\n  }\n\n  parseContent(newContent: string): void {\n\n    const fieldMap = parseFields(newContent, false);\n\n    let parsedBeats: Map<string, string>[] = [];\n    if (fieldMap.has('Beats')) {\n      parsedBeats = splitRepeatedFields(fieldMap.get('Beats') || '')\n        .map((beatText) => {\n        return parseFields(beatText, true);\n      }).filter(Boolean);\n    }\n\n    this.errorMessage = this.getErrorMessage(fieldMap, parsedBeats);\n    if (this.errorMessage !== '') {\n      this.ref.markForCheck();\n      return;\n    }\n\n    const newStructureTemplate = StructureTemplate.create({\n      id: this.structureTemplate?.id,\n      name: fieldMap.get('Name'),\n      description: fieldMap.get('Description'),\n      beats: parsedBeats.map((beatMap) => {\n        return StructureTemplateBeat.create({\n          description: beatMap.get('Description'),\n          intendedDurationMs: parseInt(beatMap.get('Duration') || '', 10)\n        });\n      })\n    });\n\n    if (this.areStructureTemplatesEqual(newStructureTemplate, this.structureTemplate)) {\n      // No meaningful difference\n      return;\n    }\n\n    this.lastStructureTemplateInput = newStructureTemplate;\n\n    this.templateUpdated.emit({\n      structureTemplate: newStructureTemplate,\n      modifiesListView: newStructureTemplate.name !== this.structureTemplate?.name\n    } as StructureTemplateUpdate);\n\n    this.ref.markForCheck();\n  }\n\n  getErrorMessage(fieldMap: Map<string, string>, parsedBeats: Map<string, string>[]): string {\n    if (!fieldMap.has('Name')) {\n      return 'Missing \"Name\" field';\n    }\n\n    if (fieldMap.get('Name')?.trim().length === 0) {\n      return '\"Name\" cannot be empty';\n    }\n\n    if (!fieldMap.has('Description')) {\n      return 'Missing \"Description\" field';\n    }\n\n    for (const beat of parsedBeats) {\n      if (!beat.has('Description')) {\n        return 'Beat missing \"Description\" field';\n      }\n\n      if (!beat.has('Duration')) {\n        return 'Beat missing \"Duration\" field';\n      }\n\n      if (! parseInt(beat.get('Duration')?.trim() || '', 10)) {\n        return 'Cannot parse \"Duration\" value to integer';\n      }\n    }\n\n    return '';\n  }\n\n  areStructureTemplatesEqual(one: StructureTemplate|null, two: StructureTemplate|null): boolean {\n    if (one == null && two == null) {\n      return true;\n    }\n\n    if (one == null || two == null) {\n      return false;\n    }\n\n    if (one.name !== two.name) {\n      return false;\n    }\n\n    if (one.id !== two.id) {\n      return false;\n    }\n\n    if (one.description !== two.description) {\n      return false;\n    }\n\n    if (one.beats.length !== two.beats.length) {\n      return false;\n    }\n\n    const beatsLength = one.beats.length;\n    for (let i = 0; i < beatsLength; i++) {\n      if (one.beats[i].description !== two.beats[i].description) {\n        return false;\n      }\n      if (one.beats[i].intendedDurationMs !== two.beats[i].intendedDurationMs) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  repair(): void {\n    this.refreshQuillContent();\n  }\n\n  addBeat(): void {\n    this.structureTemplate?.beats.push(\n      StructureTemplateBeat.create({\n        description: 'My new beat',\n        intendedDurationMs: 12\n      })\n    );\n\n    this.templateUpdated.emit({\n      structureTemplate: this.structureTemplate,\n      modifiesListView: false\n    } as StructureTemplateUpdate);\n    this.refreshQuillContent();\n  }\n}\n\nfunction parseFields(raw: string, isSubfields: boolean): Map<string, string> {\n  const regexStr = isSubfields\n    ? '--([^-]+)--\\n([^-]+)'\n    : '==([^=]+)==\\n([^=]+)';\n\n  const rx = RegExp(regexStr, 'gm');\n\n  const fieldMap: Map<string, string> = new Map();\n\n  let match;\n  // tslint:disable-next-line:no-conditional-assignment\n  while ((match = rx.exec(raw)) !== null) {\n    const key = match[1].trim();\n    const value = match[2].trim();\n    fieldMap.set(key, value);\n  }\n\n  return fieldMap;\n}\n\nfunction splitRepeatedFields(raw: string): string[] {\n  return raw.split(/\\n[-]+--\\n/);\n}\n\nfunction getQuillHeader(headerName: string): DeltaOperation {\n  return {\n    insert: '\\n== ' + headerName + ' ==\\n',\n    attributes: {\n      bold: true\n    }\n  };\n}\n\nfunction getQuillSubHeader(headerName: string): DeltaOperation {\n  return {\n    insert: '\\n-- ' + headerName + ' --\\n',\n    attributes: {\n      italic: true\n    }\n  };\n}\n\nfunction getQuillSeparator(): DeltaOperation {\n  return {\n    insert: '\\n' + '-'.repeat(20) + '\\n',\n    attributes: {\n      italic: true\n    }\n  };\n}\n",
            "properties": [
                {
                    "name": "modifiesListView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "structureTemplate",
                    "type": "StructureTemplate",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TagListView",
            "id": "interface-TagListView-4118a57a39630aa9877d8643e2f7b73e",
            "file": "src/app/tag.service.ts",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport {StorageService} from './storage.service';\nimport {ITag, Tag} from '../protos';\n\n// Minimal details about a template to show in list view\nexport interface TagListView {\n  id: string;\n  name: string;\n}\n\nconst ALL_TAG_LIST_KEY = 'allTagList';\nconst ALL_TAG_MAP_KEY = 'allTagMap';\nconst TAG_KEY_PREFIX = 'tag-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagService {\n\n  constructor(private storageService: StorageService) { }\n\n  async getAllTags(): Promise<Tag[]> {\n    const allEntries = await this.getAllTagsListView();\n\n    const allTags: Tag[] = [];\n\n    for (const entry of allEntries) {\n      const fetchedTag = await this.getTag(entry.id);\n      if (fetchedTag != null) {\n        allTags.push(\n          fetchedTag\n        );\n      }\n    }\n\n    return allTags;\n  }\n\n  async getSpecificTags(tagIds: string[]): Promise<Tag[]> {\n    const tags: Tag[] = [];\n\n    for (const tagId of tagIds) {\n      const fetchedTag = await this.getTag(tagId);\n\n      if (!!fetchedTag) {\n        tags.push(fetchedTag);\n      }\n    }\n    return tags;\n  }\n\n  async getTagMap(): Promise<Map<string, Tag>> {\n    return (await this.storageService.get(ALL_TAG_MAP_KEY) as Map<string, Tag>) || new Map<string, Tag>();\n  }\n\n  async setTagMap(tagMap: Map<string, Tag>): Promise<void> {\n    return await this.storageService.set(ALL_TAG_MAP_KEY, tagMap, true);\n  }\n\n  async getAllTagsListView(): Promise<TagListView[]> {\n    return (await this.storageService.get(ALL_TAG_LIST_KEY) || []) as TagListView[];\n  }\n\n  getTagKey(uuid: string): string {\n    return TAG_KEY_PREFIX + uuid;\n  }\n\n  async getTag(uuid: string): Promise<Tag|null> {\n    const fetchedData = (await this.storageService.get(this.getTagKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find structure template: ' + uuid);\n      return null;\n    }\n\n    return Tag.decode(\n      fetchedData\n    );\n  }\n\n  subscribeToTagListView(handler: (newTagListView: TagListView[]) => void): string {\n    return this.storageService.generateSubscription(ALL_TAG_LIST_KEY, (fetchedValue) => {\n      handler((fetchedValue || []) as TagListView[]);\n    });\n  }\n\n  subscribeToTagMapView(handler: (newTagMapView: Map<string, Tag>) => void): string {\n    return this.storageService.generateSubscription(ALL_TAG_MAP_KEY, (fetchedValue) => {\n      handler(fetchedValue || new Map<string, Tag>());\n    });\n  }\n\n  subscribeToTag(tagId: string, handler: (newTag: Tag|null) => void): string {\n    return this.storageService.generateSubscription(this.getTagKey(tagId), (fetchedValue) => {\n      handler(\n        Tag.decode(\n          fetchedValue as Uint8Array\n        )\n      );\n    });\n  }\n\n  async deleteTag(tagId: string): Promise<void> {\n    await this.storageService.delete(\n      this.getTagKey(tagId),\n      true\n    );\n\n    const tagMap = await this.getTagMap();\n    tagMap.delete(tagId);\n    await this.setTagMap(tagMap);\n\n    const listViewEligible = (await this.getAllTagsListView())\n      .filter((tagListView) => {\n        return tagListView.id !== tagId;\n      });\n\n    await this.setAllTagsListView(listViewEligible);\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  async setAllTagsListView(tags: ITag[]): Promise<void> {\n    const listView = tags.map((tag: ITag) => {\n      return {\n        id: tag.id,\n        name: tag.name,\n      } as TagListView;\n    });\n\n    await this.storageService.set(ALL_TAG_LIST_KEY, listView, true);\n  }\n\n  async refreshAllTagsListView(): Promise<void> {\n    const allTags = await this.getAllTags();\n\n    await this.setAllTagsListView(\n      allTags\n    );\n  }\n\n  async setAllTags(tags: ITag[]): Promise<void> {\n    await this.setAllTagsListView(tags);\n\n    for (const tag of tags) {\n      await this.setTag(tag as Tag);\n    }\n  }\n\n  async setTag(tag: Tag, affectsListView: boolean = false): Promise<void> {\n    await this.storageService.set(\n      this.getTagKey(tag.id),\n      Tag.encode(tag).finish(),\n      true\n    );\n\n    const tagMap = await this.getTagMap();\n    tagMap.set(tag.id, tag);\n    await this.setTagMap(tagMap);\n\n    if (affectsListView) {\n      await this.refreshAllTagsListView();\n    }\n  }\n\n  // Creates a new structure template, and returns the uuid of the new entry\n  async createNewTag(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newTag = Tag.create({\n      id: uuid,\n      name: 'My new tag',\n      description: 'Description goes here',\n      hasNumericValue: false,\n    });\n\n    await this.setTag(newTag);\n\n    const allTags = await this.getAllTags();\n    allTags.push(newTag);\n\n    await this.setAllTagsListView(allTags);\n\n    return uuid;\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TagUpdate",
            "id": "interface-TagUpdate-02d26d01f70183a14eb73853c0dec6c0",
            "file": "src/app/tag-page/tag-details/tag-details.component.ts",
            "type": "interface",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Tag} from '../../../protos';\nimport {MatCheckboxChange} from '@angular/material/checkbox';\n\nimport {debounce} from 'debounce';\n\nexport interface TagUpdate {\n  tag: Tag;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-tag-details',\n  templateUrl: './tag-details.component.html',\n  styleUrls: ['./tag-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TagDetailsComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  tag: Tag|null = null;\n\n  @Output() tagUpdated = new EventEmitter<TagUpdate>();\n\n  onNameInput = debounce((event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.name = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: true,\n    } as TagUpdate);\n  }, 200);\n\n  onDescriptionInput = debounce((event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.description = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }, 200);\n\n  setEnumLabel = debounce((index: number, event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.enumValues[index].label = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }, 200);\n\n  ngOnInit(): void {\n  }\n\n  hasNumericValue(): boolean {\n    return this.tag?.hasNumericValue ?? false;\n  }\n\n  onHasNumericValueCheckbox(event: MatCheckboxChange): void {\n    const tag = this.tag as Tag;\n\n    tag.hasNumericValue = event.checked;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }\n\n  isEmpty(): boolean {\n    return this.tag == null;\n  }\n\n  setDeprecatedEnum(index: number, event: MatCheckboxChange): void {\n    const isDeprecated = !event.checked;\n\n    const tag = this.tag as Tag;\n\n    tag.enumValues[index].isDeprecated = isDeprecated;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }\n\n  addEnumValue(): void {\n    const enumValue = {\n      label: 'My enum option',\n      isDeprecated: false,\n    } as Tag.EnumValue;\n\n    const tag = this.tag as Tag;\n\n    tag.enumValues.push(enumValue);\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }\n}\n",
            "properties": [
                {
                    "name": "modifiesListView",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tag",
                    "type": "Tag",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TimelineBlock",
            "id": "interface-TimelineBlock-daa40ad4ca0be3da7b515584801d85b0",
            "file": "src/app/timeline-chart/timeline-chart.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, AfterViewInit, Input, Output, OnInit, OnChanges} from '@angular/core';\nimport {getDurationStr} from '../duration-helpers';\nimport {Beat, Tag} from '../../protos';\nimport Completeness = Beat.Completeness;\nimport TagReference = Beat.TagReference;\n\nexport interface TimelineBlock {\n  id: string;\n  startSec: number;\n  endSec: number;\n  label: string;\n  depth: number;\n  completeness: Completeness;\n  tagReferences: TagReference[];\n}\n\ninterface PreppedTimelineBlock {\n  id: string;\n  width: number;\n  left: number;\n  color: string;\n  label: string;\n}\n\ninterface TimelineMarker {\n  left: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-timeline-chart',\n  templateUrl: './timeline-chart.component.html',\n  styleUrls: ['./timeline-chart.component.scss']\n})\nexport class TimelineChartComponent implements OnInit, OnChanges {\n\n  @Input()\n  timelineBlocks: TimelineBlock[] = [];\n\n  @Input()\n  relevantTags: Tag[] = [];\n\n  @Output() selectBeat = new EventEmitter<string>();\n\n  zoomLevel = 100;\n\n  preppedTimelineBlockRows: PreppedTimelineBlock[][] = [];\n  preppedTimelineMarkers: TimelineMarker[] = [];\n  minTimeSec = 0;\n  maxTimeSec = 0;\n\n  selectedTagId = '';\n  selectedTag: Tag|null = null;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.rebuildTimeline();\n  }\n\n  ngOnChanges(): void {\n    this.rebuildTimeline();\n  }\n\n  rebuildTimeline(): void {\n    if (!this.timelineBlocks.length) {\n      return;\n    }\n\n    this.minTimeSec = this.timelineBlocks[0].startSec;\n    this.maxTimeSec = this.timelineBlocks[0].endSec;\n\n    this.timelineBlocks.forEach((block) => {\n      this.minTimeSec = Math.min(block.startSec, this.minTimeSec);\n      this.maxTimeSec = Math.max(block.endSec, this.maxTimeSec);\n    });\n\n    const depthMap = new Map<number, PreppedTimelineBlock[]>();\n\n    this.timelineBlocks.forEach((block) => {\n      if (!depthMap.has(block.depth)) {\n        depthMap.set(block.depth, []);\n      }\n\n      const width = (block.endSec - block.startSec) / (this.maxTimeSec - this.minTimeSec) * 100;\n      const left = (block.startSec - this.minTimeSec)  / (this.maxTimeSec - this.minTimeSec) * 100;\n\n      const relevantTagRef = block.tagReferences\n        .filter((reference) => reference.tagId === this.selectedTagId)[0] || null;\n\n      let color = '#ccc';\n      if (!this.selectedTag) {\n        switch (block.completeness) {\n          case Beat.Completeness.FINAL:\n            color = 'rgb(0, 128, 0)';\n            break;\n          case Beat.Completeness.POLISHED:\n            color = 'rgb(173, 255, 47)';\n            break;\n          case Beat.Completeness.INITIAL_DRAFT:\n            color = 'rgb(255, 255, 0)';\n            break;\n          case Beat.Completeness.BRAINSTORM:\n            color = 'rgb(255, 128, 0)';\n            break;\n          case Beat.Completeness.NOT_STARTED:\n            color = 'rgb(255, 0, 0)';\n            break;\n        }\n      } else {\n        if (!!relevantTagRef) {\n          color = '#ff0000';\n        }\n      }\n\n      let label = block.label;\n      if (!!relevantTagRef && (relevantTagRef.numericValue || relevantTagRef?.enumValue)) {\n        if (relevantTagRef.numericValue) {\n          label += ' (' + relevantTagRef.numericValue + ')';\n        }\n        if (relevantTagRef.enumValue) {\n          label += ' (' + (this.selectedTag as Tag).enumValues[relevantTagRef.enumValue - 1].label + ')';\n        }\n      }\n\n\n      depthMap.get(block.depth)?.push({\n        id: block.id,\n        width,\n        left,\n        color,\n        label\n      } as PreppedTimelineBlock);\n    });\n\n    const newRows: PreppedTimelineBlock[][] = [];\n\n    const allDepths = Array.from(depthMap.keys()).sort();\n    allDepths.forEach((depth) => {\n      newRows.push(depthMap.get(depth) as PreppedTimelineBlock[]);\n    });\n\n    this.preppedTimelineBlockRows = newRows;\n\n    this.rebuildTimelineMarkers();\n  }\n\n  rebuildTimelineMarkers(): void {\n    const numMarkers = Math.round(this.zoomLevel / 25);\n    this.preppedTimelineMarkers = [];\n    for (let i = 0; i < numMarkers; i++) {\n      const time = (i / numMarkers) * 0.9 * (this.maxTimeSec - this.minTimeSec) + this.minTimeSec;\n      const left = 100 * (i / numMarkers);\n      this.preppedTimelineMarkers.push({\n        left,\n        label: getDurationStr(time * 1000),\n      } as TimelineMarker);\n    }\n  }\n\n  zoomOut(): void {\n    this.zoomLevel = Math.max(100, this.zoomLevel / 2);\n    this.rebuildTimelineMarkers();\n  }\n\n  zoomIn(): void {\n    this.zoomLevel = 2.0 * this.zoomLevel;\n    this.rebuildTimelineMarkers();\n  }\n\n  formatPercentString(value: number): string {\n    return '' + value + '%';\n  }\n\n  tagSelectionChange(value: string): void {\n    this.selectedTagId = value;\n    this.selectedTag = this.relevantTags.filter((tag) => tag.id === value)[0] || null;\n    this.rebuildTimeline();\n  }\n}\n",
            "properties": [
                {
                    "name": "completeness",
                    "type": "Completeness",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "depth",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "endSec",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "id",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "startSec",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "tagReferences",
                    "type": "TagReference[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "TimelineMarker",
            "id": "interface-TimelineMarker-daa40ad4ca0be3da7b515584801d85b0",
            "file": "src/app/timeline-chart/timeline-chart.component.ts",
            "type": "interface",
            "sourceCode": "import {Component, EventEmitter, AfterViewInit, Input, Output, OnInit, OnChanges} from '@angular/core';\nimport {getDurationStr} from '../duration-helpers';\nimport {Beat, Tag} from '../../protos';\nimport Completeness = Beat.Completeness;\nimport TagReference = Beat.TagReference;\n\nexport interface TimelineBlock {\n  id: string;\n  startSec: number;\n  endSec: number;\n  label: string;\n  depth: number;\n  completeness: Completeness;\n  tagReferences: TagReference[];\n}\n\ninterface PreppedTimelineBlock {\n  id: string;\n  width: number;\n  left: number;\n  color: string;\n  label: string;\n}\n\ninterface TimelineMarker {\n  left: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-timeline-chart',\n  templateUrl: './timeline-chart.component.html',\n  styleUrls: ['./timeline-chart.component.scss']\n})\nexport class TimelineChartComponent implements OnInit, OnChanges {\n\n  @Input()\n  timelineBlocks: TimelineBlock[] = [];\n\n  @Input()\n  relevantTags: Tag[] = [];\n\n  @Output() selectBeat = new EventEmitter<string>();\n\n  zoomLevel = 100;\n\n  preppedTimelineBlockRows: PreppedTimelineBlock[][] = [];\n  preppedTimelineMarkers: TimelineMarker[] = [];\n  minTimeSec = 0;\n  maxTimeSec = 0;\n\n  selectedTagId = '';\n  selectedTag: Tag|null = null;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.rebuildTimeline();\n  }\n\n  ngOnChanges(): void {\n    this.rebuildTimeline();\n  }\n\n  rebuildTimeline(): void {\n    if (!this.timelineBlocks.length) {\n      return;\n    }\n\n    this.minTimeSec = this.timelineBlocks[0].startSec;\n    this.maxTimeSec = this.timelineBlocks[0].endSec;\n\n    this.timelineBlocks.forEach((block) => {\n      this.minTimeSec = Math.min(block.startSec, this.minTimeSec);\n      this.maxTimeSec = Math.max(block.endSec, this.maxTimeSec);\n    });\n\n    const depthMap = new Map<number, PreppedTimelineBlock[]>();\n\n    this.timelineBlocks.forEach((block) => {\n      if (!depthMap.has(block.depth)) {\n        depthMap.set(block.depth, []);\n      }\n\n      const width = (block.endSec - block.startSec) / (this.maxTimeSec - this.minTimeSec) * 100;\n      const left = (block.startSec - this.minTimeSec)  / (this.maxTimeSec - this.minTimeSec) * 100;\n\n      const relevantTagRef = block.tagReferences\n        .filter((reference) => reference.tagId === this.selectedTagId)[0] || null;\n\n      let color = '#ccc';\n      if (!this.selectedTag) {\n        switch (block.completeness) {\n          case Beat.Completeness.FINAL:\n            color = 'rgb(0, 128, 0)';\n            break;\n          case Beat.Completeness.POLISHED:\n            color = 'rgb(173, 255, 47)';\n            break;\n          case Beat.Completeness.INITIAL_DRAFT:\n            color = 'rgb(255, 255, 0)';\n            break;\n          case Beat.Completeness.BRAINSTORM:\n            color = 'rgb(255, 128, 0)';\n            break;\n          case Beat.Completeness.NOT_STARTED:\n            color = 'rgb(255, 0, 0)';\n            break;\n        }\n      } else {\n        if (!!relevantTagRef) {\n          color = '#ff0000';\n        }\n      }\n\n      let label = block.label;\n      if (!!relevantTagRef && (relevantTagRef.numericValue || relevantTagRef?.enumValue)) {\n        if (relevantTagRef.numericValue) {\n          label += ' (' + relevantTagRef.numericValue + ')';\n        }\n        if (relevantTagRef.enumValue) {\n          label += ' (' + (this.selectedTag as Tag).enumValues[relevantTagRef.enumValue - 1].label + ')';\n        }\n      }\n\n\n      depthMap.get(block.depth)?.push({\n        id: block.id,\n        width,\n        left,\n        color,\n        label\n      } as PreppedTimelineBlock);\n    });\n\n    const newRows: PreppedTimelineBlock[][] = [];\n\n    const allDepths = Array.from(depthMap.keys()).sort();\n    allDepths.forEach((depth) => {\n      newRows.push(depthMap.get(depth) as PreppedTimelineBlock[]);\n    });\n\n    this.preppedTimelineBlockRows = newRows;\n\n    this.rebuildTimelineMarkers();\n  }\n\n  rebuildTimelineMarkers(): void {\n    const numMarkers = Math.round(this.zoomLevel / 25);\n    this.preppedTimelineMarkers = [];\n    for (let i = 0; i < numMarkers; i++) {\n      const time = (i / numMarkers) * 0.9 * (this.maxTimeSec - this.minTimeSec) + this.minTimeSec;\n      const left = 100 * (i / numMarkers);\n      this.preppedTimelineMarkers.push({\n        left,\n        label: getDurationStr(time * 1000),\n      } as TimelineMarker);\n    }\n  }\n\n  zoomOut(): void {\n    this.zoomLevel = Math.max(100, this.zoomLevel / 2);\n    this.rebuildTimelineMarkers();\n  }\n\n  zoomIn(): void {\n    this.zoomLevel = 2.0 * this.zoomLevel;\n    this.rebuildTimelineMarkers();\n  }\n\n  formatPercentString(value: number): string {\n    return '' + value + '%';\n  }\n\n  tagSelectionChange(value: string): void {\n    this.selectedTagId = value;\n    this.selectedTag = this.relevantTags.filter((tag) => tag.id === value)[0] || null;\n    this.rebuildTimeline();\n  }\n}\n",
            "properties": [
                {
                    "name": "label",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "left",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "BeatsService",
            "id": "injectable-BeatsService-d063eed01fb059eb4dd1ea15b2e98f47",
            "file": "src/app/beats.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "addParentToChildren",
                    "args": [
                        {
                            "name": "beatMap",
                            "type": "Map<string | BeatMapView>"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "children",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 342,
                    "modifierKind": [
                        112,
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatMap",
                            "type": "Map<string | BeatMapView>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "appendReadView",
                    "args": [
                        {
                            "name": "beatId",
                            "type": "string"
                        },
                        {
                            "name": "currentReadView",
                            "type": "BeatReadView[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 312,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentReadView",
                            "type": "BeatReadView[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "appendTimelineView",
                    "args": [
                        {
                            "name": "beatId",
                            "type": "string"
                        },
                        {
                            "name": "currentTimelineView",
                            "type": "TimelineBlock[]"
                        },
                        {
                            "name": "currentDepth",
                            "type": "number"
                        },
                        {
                            "name": "currentStartSec",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 272,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentTimelineView",
                            "type": "TimelineBlock[]",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentDepth",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currentStartSec",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "cancelSubscription",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 258,
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewBeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "deleteBeat",
                    "args": [
                        {
                            "name": "beatId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchReadView",
                    "args": [
                        {
                            "name": "beatId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<BeatReadView[]>",
                    "typeParameters": [],
                    "line": 304,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchTimelineView",
                    "args": [
                        {
                            "name": "beatId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<TimelineBlock[]>",
                    "typeParameters": [],
                    "line": 262,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateBeatMap",
                    "args": [
                        {
                            "name": "beats",
                            "type": "IBeat[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Map<string, BeatMapView>",
                    "typeParameters": [],
                    "line": 200,
                    "modifierKind": [
                        112
                    ],
                    "jsdoctags": [
                        {
                            "name": "beats",
                            "type": "IBeat[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllBeats",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Beat[]>",
                    "typeParameters": [],
                    "line": 179,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getBeat",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Beat | null>",
                    "typeParameters": [],
                    "line": 166,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBeatKey",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        112,
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBeatMap",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Map<string, BeatMapView>>",
                    "typeParameters": [],
                    "line": 229,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getInitialMapVersion",
                    "args": [
                        {
                            "name": "beat",
                            "type": "IBeat"
                        }
                    ],
                    "optional": false,
                    "returnType": "BeatMapView",
                    "typeParameters": [],
                    "line": 36,
                    "modifierKind": [
                        112,
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "beat",
                            "type": "IBeat",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeIdFromParents",
                    "args": [
                        {
                            "name": "beatMap",
                            "type": "Map<string | BeatMapView>"
                        },
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "children",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "modifierKind": [
                        112,
                        115
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatMap",
                            "type": "Map<string | BeatMapView>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAllBeats",
                    "args": [
                        {
                            "name": "beats",
                            "type": "IBeat[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beats",
                            "type": "IBeat[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBeat",
                    "args": [
                        {
                            "name": "beat",
                            "type": "Beat"
                        },
                        {
                            "name": "affectsMapView",
                            "type": "boolean",
                            "defaultValue": "false"
                        },
                        {
                            "name": "affectsLastUpdated",
                            "type": "boolean",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 114,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beat",
                            "type": "Beat",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsMapView",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsLastUpdated",
                            "type": "boolean",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBeatMap",
                    "args": [
                        {
                            "name": "beatMap",
                            "type": "Map<string | BeatMapView>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 196,
                    "modifierKind": [
                        112,
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatMap",
                            "type": "Map<string | BeatMapView>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToBeat",
                    "args": [
                        {
                            "name": "beatId",
                            "type": "string"
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newBeat",
                                    "type": "Beat | null"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 239,
                    "jsdoctags": [
                        {
                            "name": "beatId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newBeat",
                                    "type": "Beat | null"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToBeatMapView",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newBeatMapView",
                                    "type": "Map<string | BeatMapView>"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 233,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newBeatMapView",
                                    "type": "Map<string | BeatMapView>"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {StorageService} from './storage.service';\nimport {Beat, IBeat} from '../protos';\nimport {epochMsToTimestamp, timestampToEpochMs} from './timestamp-helpers';\nimport {v4 as uuidv4} from 'uuid';\nimport {TimelineBlock} from './timeline-chart/timeline-chart.component';\nimport TagReference = Beat.TagReference;\n\nexport interface BeatMapView {\n  id: string;\n  name: string;\n  lastUpdated: number;\n  parentBeats: string[]; // IDs of any beats which include this one in the structure or brainstorm\n  intendedDurationMs: number;\n  completeness: Beat.Completeness;\n}\n\nexport interface BeatReadView {\n  id: string;\n  name: string;\n  prose: string;\n  showExpanded: boolean;\n  completeness: Beat.Completeness;\n}\n\nconst ALL_BEAT_MAP_KEY = 'allBeatMap';\nconst BEAT_KEY_PREFIX = 'beat-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BeatsService {\n\n  constructor(private storageService: StorageService) { }\n\n  private static getInitialMapVersion(beat: IBeat): BeatMapView {\n    return {\n      id: beat.id,\n      name: beat.synopsis,\n      lastUpdated: timestampToEpochMs(beat.lastUpdated),\n      parentBeats: [],\n      intendedDurationMs: beat.intendedDurationMs,\n      completeness: beat.completeness\n    } as BeatMapView;\n  }\n\n  private static getBeatKey(uuid: string): string {\n    return BEAT_KEY_PREFIX + uuid;\n  }\n\n  async setAllBeats(beats: IBeat[]): Promise<void> {\n    await this.setBeatMap(\n      this.generateBeatMap(beats)\n    );\n\n    for (const beat of beats) {\n      await this.setBeat(beat as Beat, false, false);\n    }\n  }\n\n  async createNewBeat(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newBeat = Beat.create({\n      id: uuid,\n      synopsis: 'My new beat',\n      prose: '',\n      intendedDurationMs: 60 * 1000,\n      structure: [],\n      brainstorm: [],\n    });\n\n    await this.setBeat(newBeat, true, true);\n\n    return uuid;\n  }\n\n  async deleteBeat(beatId: string): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n    let beatMap = await this.getBeatMap();\n\n    // Remove any references to this beat as child\n    const parentIds = beatMap.get(beatId)?.parentBeats as string[];\n    for (const parentId of parentIds) {\n      const parentBeat = await this.getBeat(parentId) as Beat;\n      parentBeat.brainstorm = parentBeat.brainstorm.filter(brainstormId => brainstormId !== beatId);\n      parentBeat.structure = parentBeat.structure.filter(structureId => structureId !== beatId);\n      await this.setBeat(parentBeat, true, true);\n    }\n\n    // Re-fetch the beat map, to pick up all the recent changes\n    beatMap = await this.getBeatMap();\n\n    // Remove this beat as \"parent\" in any children\n    BeatsService.removeIdFromParents(\n      beatMap,\n      beatId,\n      (beat.structure || [])\n    );\n    BeatsService.removeIdFromParents(\n      beatMap,\n      beatId,\n      (beat.brainstorm || [])\n    );\n    beatMap.delete(beatId);\n    await this.setBeatMap(beatMap);\n\n    await this.storageService.delete(\n      BeatsService.getBeatKey(beatId),\n      true\n    );\n  }\n\n  async setBeat(beat: Beat, affectsMapView: boolean = false, affectsLastUpdated: boolean = true): Promise<void> {\n    if (affectsLastUpdated) {\n      beat.lastUpdated = epochMsToTimestamp(Date.now());\n    }\n\n    if (affectsMapView) {\n      const originalBeat = await this.getBeat(beat.id) as Beat;\n      const beatMap = await this.getBeatMap();\n\n      const originalBrainstorm = (originalBeat?.brainstorm || []);\n      const originalStructure = (originalBeat?.structure || []);\n\n      // Determine if there are any changes in the children\n      if (!allStringsInBothArrays(beat.brainstorm, originalBrainstorm)\n        || !allStringsInBothArrays(beat.structure, originalStructure)) {\n        BeatsService.removeIdFromParents(\n          beatMap,\n          beat.id,\n          originalBrainstorm\n        );\n        BeatsService.removeIdFromParents(\n          beatMap,\n          beat.id,\n          originalStructure\n        );\n\n        BeatsService.addParentToChildren(\n          beatMap,\n          beat.id,\n          beat.brainstorm\n        );\n        BeatsService.addParentToChildren(\n          beatMap,\n          beat.id,\n          beat.structure\n        );\n      }\n\n      const mapView = BeatsService.getInitialMapVersion(beat);\n      mapView.parentBeats = beatMap.get(beat.id)?.parentBeats || [];\n\n      beatMap.set(beat.id, mapView);\n      await this.setBeatMap(beatMap);\n    }\n\n    await this.storageService.set(\n      BeatsService.getBeatKey(beat.id),\n      Beat.encode(beat).finish(),\n      true\n    );\n  }\n\n  async getBeat(uuid: string): Promise<Beat|null> {\n    const fetchedData = (await this.storageService.get(BeatsService.getBeatKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find beat: ' + uuid);\n      return null;\n    }\n\n    return Beat.decode(\n      fetchedData\n    );\n  }\n\n  async getAllBeats(): Promise<Beat[]> {\n    const beatMap = await this.getBeatMap();\n\n    const allBeats: Beat[] = [];\n\n    for (const uuid of beatMap.keys()) {\n      const fetchedBeat = await this.getBeat(uuid);\n      if (fetchedBeat != null) {\n        allBeats.push(\n          fetchedBeat\n        );\n      }\n    }\n\n    return allBeats;\n  }\n\n  private async setBeatMap(beatMap: Map<string, BeatMapView>): Promise<void> {\n    await this.storageService.set(ALL_BEAT_MAP_KEY, beatMap, true);\n  }\n\n  private generateBeatMap(beats: IBeat[]): Map<string, BeatMapView> {\n    const beatMap = new Map<string, BeatMapView>();\n\n    beats.forEach((beat: IBeat) => {\n      beatMap.set(\n        beat.id as string,\n        BeatsService.getInitialMapVersion(beat)\n      );\n    });\n\n    // Set parent references\n    beats.forEach((beat: IBeat) => {\n      const id = beat.id as string;\n\n      BeatsService.addParentToChildren(\n        beatMap,\n        id,\n        (beat.brainstorm || [])\n      );\n      BeatsService.addParentToChildren(\n        beatMap,\n        id,\n        (beat.structure || [])\n      );\n    });\n\n    return beatMap;\n  }\n\n  async getBeatMap(): Promise<Map<string, BeatMapView>> {\n    return (await this.storageService.get(ALL_BEAT_MAP_KEY) || new Map()) as Map<string, BeatMapView>;\n  }\n\n  subscribeToBeatMapView(handler: (newBeatMapView: Map<string, BeatMapView>) => void): string {\n    return this.storageService.generateSubscription(ALL_BEAT_MAP_KEY, (fetchedValue) => {\n      handler(fetchedValue || new Map<string, BeatMapView>());\n    });\n  }\n\n  subscribeToBeat(beatId: string, handler: (newBeat: Beat|null) => void): string {\n    return this.storageService.generateSubscription(\n      BeatsService.getBeatKey(beatId),\n      (fetchedValue) => {\n        if (!fetchedValue) {\n          // Beat no longer found, this could occur from being deleted in\n          // another tab or component\n          return handler(null);\n        }\n\n        handler(\n          Beat.decode(\n            fetchedValue as Uint8Array\n          )\n        );\n      }\n    );\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  async fetchTimelineView(beatId: string): Promise<TimelineBlock[]> {\n    const timelineView: TimelineBlock[] = [];\n\n    await this.appendTimelineView(beatId, timelineView, 0, 0);\n\n    return timelineView.sort((a, b) => {\n      return a.depth - b.depth;\n    });\n  }\n\n  async appendTimelineView(\n    beatId: string,\n    currentTimelineView: TimelineBlock[],\n    currentDepth: number,\n    currentStartSec: number): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n\n    if (!beat) {\n      return;\n    }\n\n    const beatTimelineView = {\n      id: beat.id,\n      depth: currentDepth,\n      row: 'Depth ' + currentDepth,\n      label: beat.synopsis,\n      startSec: currentStartSec,\n      endSec: currentStartSec + (beat.intendedDurationMs / 1000),\n      completeness: beat.completeness,\n      tagReferences: beat.tagReferences as TagReference[]\n    } as TimelineBlock;\n\n    currentTimelineView.push(beatTimelineView);\n\n    let offsetSec = 0;\n    for (const childBeatId of beat.structure) {\n      const childBeat = await this.getBeat(childBeatId) as Beat;\n      await this.appendTimelineView(childBeatId, currentTimelineView, currentDepth + 1, offsetSec);\n      offsetSec += childBeat.intendedDurationMs / 1000;\n    }\n  }\n\n  async fetchReadView(beatId: string): Promise<BeatReadView[]> {\n    const readView: BeatReadView[] = [];\n\n    await this.appendReadView(beatId, readView);\n\n    return readView;\n  }\n\n  async appendReadView(beatId: string, currentReadView: BeatReadView[]): Promise<void> {\n    const beat = await this.getBeat(beatId) as Beat;\n\n    if (!beat) {\n      return;\n    }\n\n    const beatReadView = {\n      id: beat.id,\n      name: beat.synopsis,\n      prose: beat.prose,\n      showExpanded: (beat.structure.length === 0),\n      completeness: beat.completeness\n    } as BeatReadView;\n\n    currentReadView.push(beatReadView);\n\n    // Recurse through child beats\n    for (const childBeat of beat.structure) {\n      await this.appendReadView(childBeat, currentReadView);\n    }\n  }\n\n  private static removeIdFromParents(beatMap: Map<string, BeatMapView>, id: string, children: string[]): void {\n    children.forEach(childId => {\n      const childBeat = beatMap.get(childId) as BeatMapView;\n      childBeat.parentBeats = childBeat.parentBeats.filter(parentId => parentId !== id);\n    });\n  }\n\n  private static addParentToChildren(beatMap: Map<string, BeatMapView>, id: string, children: string[]): void {\n    children.forEach(childId => {\n      const childBeat = beatMap.get(childId) as BeatMapView;\n      childBeat.parentBeats.push(id);\n    });\n  }\n}\n\nfunction allStringsInBothArrays(array1: string[], array2: string[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n\n  return array1.every((value) => {\n    return array2.indexOf(value) >= 0;\n  });\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "BrainstormTemplateService",
            "id": "injectable-BrainstormTemplateService-4a6b6977c2ae369435fb435fbc58d50a",
            "file": "src/app/brainstorm-template.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelSubscription",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewBrainstormTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 117,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "deleteTemplate",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllBrainstormTemplates",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<BrainstormTemplate[]>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getAllTemplatesListView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<BrainstormTemplateListView[]>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getBrainstormTemplate",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<BrainstormTemplate | null>",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTemplateKey",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 57,
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAllTemplatesListView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 94,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setAllBrainstormTemplates",
                    "args": [
                        {
                            "name": "brainstormTemplates",
                            "type": "IBrainstormTemplate[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "brainstormTemplates",
                            "type": "IBrainstormTemplate[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAllTemplatesListView",
                    "args": [
                        {
                            "name": "brainstormTemplates",
                            "type": "IBrainstormTemplate[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "brainstormTemplates",
                            "type": "IBrainstormTemplate[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBrainstormTemplate",
                    "args": [
                        {
                            "name": "brainstormTemplate",
                            "type": "BrainstormTemplate"
                        },
                        {
                            "name": "affectsListView",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 82,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "brainstormTemplate",
                            "type": "BrainstormTemplate",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsListView",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTemplate",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string"
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplate",
                                    "type": "BrainstormTemplate"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 142,
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplate",
                                    "type": "BrainstormTemplate"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTemplateListView",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplateListView",
                                    "type": "BrainstormTemplateListView[]"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 136,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplateListView",
                                    "type": "BrainstormTemplateListView[]"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport {StorageService} from './storage.service';\nimport {BrainstormTemplate, IBrainstormTemplate} from '../protos';\n\n// Minimal details about a template to show in list view\nexport interface BrainstormTemplateListView {\n  id: string;\n  label: string;\n}\n\nconst ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY = 'allBrainstormTemplatesListView';\nconst BRAINSTORM_TEMPLATE_KEY_PREFIX = 'brainstormTemplate-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BrainstormTemplateService {\n\n  constructor(private storageService: StorageService) { }\n\n  async getAllBrainstormTemplates(): Promise<BrainstormTemplate[]> {\n    const allEntries = await this.getAllTemplatesListView();\n\n    const allTemplates: BrainstormTemplate[] = [];\n    for (const entry of allEntries) {\n      const fetchedTemplate = await this.getBrainstormTemplate(entry.id);\n      if (fetchedTemplate != null) {\n        allTemplates.push(\n          fetchedTemplate\n        );\n      }\n    }\n\n    return allTemplates.filter((value) => !!value);\n  }\n\n  async getAllTemplatesListView(): Promise<BrainstormTemplateListView[]> {\n    return (await this.storageService.get(ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY) || []) as BrainstormTemplateListView[];\n  }\n\n  async setAllTemplatesListView(brainstormTemplates: IBrainstormTemplate[]): Promise<void> {\n    const listView = brainstormTemplates.map((brainstormTemplate: IBrainstormTemplate) => {\n      return {\n        id: brainstormTemplate.id,\n        label: brainstormTemplate.label,\n      } as BrainstormTemplateListView;\n    });\n\n    await this.storageService.set(ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY, listView, true);\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  getTemplateKey(uuid: string): string {\n    return BRAINSTORM_TEMPLATE_KEY_PREFIX + uuid;\n  }\n\n  async getBrainstormTemplate(uuid: string): Promise<BrainstormTemplate|null> {\n    const fetchedData = (await this.storageService.get(this.getTemplateKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find brainstorm template: ' + uuid);\n      return null;\n    }\n\n    return BrainstormTemplate.decode(\n      fetchedData\n    );\n  }\n\n  async setAllBrainstormTemplates(brainstormTemplates: IBrainstormTemplate[]): Promise<void> {\n    await this.setAllTemplatesListView(brainstormTemplates);\n\n    for (const brainstormTemplate of brainstormTemplates) {\n      await this.setBrainstormTemplate(brainstormTemplate as BrainstormTemplate);\n    }\n  }\n\n  async setBrainstormTemplate(brainstormTemplate: BrainstormTemplate, affectsListView: boolean = false): Promise<void> {\n    await this.storageService.set(\n      this.getTemplateKey(brainstormTemplate.id),\n      BrainstormTemplate.encode(brainstormTemplate).finish(),\n      true\n    );\n\n    if (affectsListView) {\n      await this.refreshAllTemplatesListView();\n    }\n  }\n\n  async refreshAllTemplatesListView(): Promise<void> {\n    const allTemplates = await this.getAllBrainstormTemplates();\n\n    await this.setAllTemplatesListView(\n      allTemplates.filter((template) => !!template)\n    );\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    await this.storageService.delete(\n      this.getTemplateKey(templateId),\n      true\n    );\n\n    const listViewEligible = (await this.getAllTemplatesListView())\n      .filter((brainstormTemplate) => {\n        return brainstormTemplate.id !== templateId;\n      });\n\n    await this.setAllTemplatesListView(listViewEligible);\n  }\n\n  // Creates a new structure template, and returns the uuid of the new entry\n  async createNewBrainstormTemplate(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newBrainstormTemplate = BrainstormTemplate.create({\n      id: uuid,\n      label: 'My new template',\n      template: 'This is the placeholder content that will appear when a user selects this.\\n\\nYou could pose a question here, or give an exercise to explore'\n    });\n\n    await this.setBrainstormTemplate(newBrainstormTemplate);\n\n    const allBrainstormTemplates = await this.getAllBrainstormTemplates();\n    allBrainstormTemplates.push(newBrainstormTemplate);\n\n    await this.setAllTemplatesListView(allBrainstormTemplates);\n\n    return uuid;\n  }\n\n  subscribeToTemplateListView(handler: (newTemplateListView: BrainstormTemplateListView[]) => void): string {\n    return this.storageService.generateSubscription(ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY, (fetchedValue) => {\n      handler((fetchedValue || []) as BrainstormTemplateListView[]);\n    });\n  }\n\n  subscribeToTemplate(templateId: string, handler: (newTemplate: BrainstormTemplate) => void): string {\n    return this.storageService.generateSubscription(this.getTemplateKey(templateId), (fetchedValue) => {\n      handler(\n        BrainstormTemplate.decode(\n          fetchedValue as Uint8Array\n        )\n      );\n    });\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "MonolithicDataService",
            "id": "injectable-MonolithicDataService-a219ae137eecd52c629a3d6933fc7c37",
            "file": "src/app/monolithic-data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelSubscriptionToWorkspaceName",
                    "args": [
                        {
                            "name": "subscriptionId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "jsdoctags": [
                        {
                            "name": "subscriptionId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 78,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getWorkspaceName",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "loadWorkspace",
                    "args": [
                        {
                            "name": "workspace",
                            "type": "WritingWorkspace"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "workspace",
                            "type": "WritingWorkspace",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newWorkspace",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 27,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<WritingWorkspace>",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setWorkspaceName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToWorkspaceName",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "workspaceName",
                                    "type": "string"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 68,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "workspaceName",
                                    "type": "string"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {WritingWorkspace} from '../protos';\nimport {WorkspaceMetadataService} from './workspace-metadata.service';\nimport {StructureTemplateService} from './structure-template.service';\nimport {StorageService} from './storage.service';\nimport {TagService} from './tag.service';\nimport {BeatsService} from './beats.service';\nimport {BrainstormTemplateService} from './brainstorm-template.service';\n\nconst WORKSPACE_NAME_KEY = 'workspaceName';\n\n// This is the monolithic service that'll handle all the story data.\n//\n// This will certainly get broken up into smaller bits later on.\n@Injectable({\n  providedIn: 'root'\n})\nexport class MonolithicDataService {\n\n  constructor(private storageService: StorageService,\n              private workspaceMetadataService: WorkspaceMetadataService,\n              private structureTemplateService: StructureTemplateService,\n              private tagService: TagService,\n              private beatService: BeatsService,\n              private brainstormTemplateService: BrainstormTemplateService) { }\n\n  async newWorkspace(name: string): Promise<void> {\n    await this.clear();\n    await this.loadWorkspace(WritingWorkspace.create({\n      name,\n    }));\n  }\n\n  // Function to load workspace into local memory.\n  async loadWorkspace(workspace: WritingWorkspace): Promise<void> {\n    await this.clear();\n    await this.setWorkspaceName(workspace.name);\n    await this.workspaceMetadataService.setWorkspaceMetadata(workspace.metadata || null);\n    await this.structureTemplateService.setAllStructureTemplates(workspace.structureTemplates || []);\n    await this.tagService.setAllTags(workspace.tags || []);\n    await this.beatService.setAllBeats(workspace.beats || []);\n    await this.brainstormTemplateService.setAllBrainstormTemplates(workspace.brainstormTemplates || []);\n  }\n\n  // Function to pull workspace from local memory.\n  async saveWorkspace(): Promise<WritingWorkspace> {\n    const workspace = WritingWorkspace.create();\n\n    workspace.name = await this.getWorkspaceName();\n    workspace.metadata = await this.workspaceMetadataService.getWorkspaceMetadata(true);\n    workspace.structureTemplates = await this.structureTemplateService.getAllStructureTemplates();\n    workspace.tags = await this.tagService.getAllTags();\n    workspace.beats = await this.beatService.getAllBeats();\n    workspace.brainstormTemplates = await this.brainstormTemplateService.getAllBrainstormTemplates();\n\n    return Promise.resolve(workspace);\n  }\n\n  async setWorkspaceName(name: string): Promise<void> {\n    await this.storageService.set(WORKSPACE_NAME_KEY, name, true);\n  }\n\n  async getWorkspaceName(): Promise<string> {\n    return (await this.storageService.get(WORKSPACE_NAME_KEY) as string)\n      || '';\n  }\n\n  subscribeToWorkspaceName(handler: (workspaceName: string) => void): string {\n    return this.storageService.generateSubscription(WORKSPACE_NAME_KEY, (result) => {\n      handler(result as string);\n    });\n  }\n\n  cancelSubscriptionToWorkspaceName(subscriptionId: string): void {\n    this.storageService.cancelSubscription(subscriptionId);\n  }\n\n  async clear(): Promise<void> {\n    await this.storageService.clearAll();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    },
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService"
                    },
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService"
                    },
                    {
                        "name": "tagService",
                        "type": "TagService"
                    },
                    {
                        "name": "beatService",
                        "type": "BeatsService"
                    },
                    {
                        "name": "brainstormTemplateService",
                        "type": "BrainstormTemplateService"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagService",
                        "type": "TagService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "beatService",
                        "type": "BeatsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "brainstormTemplateService",
                        "type": "BrainstormTemplateService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StorageService",
            "id": "injectable-StorageService-4ddd1b1e4771cc3369577cbcc9221257",
            "file": "src/app/storage.service.ts",
            "properties": [
                {
                    "name": "subscriptions",
                    "defaultValue": "new Map()",
                    "type": "Map<string | StorageSubscription>",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [
                {
                    "name": "cancelSubscription",
                    "args": [
                        {
                            "name": "subscriptionKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "subscriptionKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkSubscription",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "StorageSubscription"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 71,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "StorageSubscription",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clearAll",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "isSubscribable",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 101,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSubscribable",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateSubscription",
                    "args": [
                        {
                            "name": "storageKey",
                            "type": "string"
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "function": [
                                {
                                    "name": "updatedValue",
                                    "type": "any"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47,
                    "jsdoctags": [
                        {
                            "name": "storageKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "callback",
                            "type": "function",
                            "function": [
                                {
                                    "name": "updatedValue",
                                    "type": "any"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<any>",
                    "typeParameters": [],
                    "line": 31,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getHashKey",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 93,
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "set",
                    "args": [
                        {
                            "name": "key",
                            "type": "string"
                        },
                        {
                            "name": "value",
                            "type": "any"
                        },
                        {
                            "name": "isSubscribable",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 35,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "value",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSubscribable",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {StorageMap} from '@ngx-pwa/local-storage';\nimport * as hash from 'object-hash';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface StorageSubscription {\n  subscriptionKey: string;\n  storageKey: string;\n  lastHashValue: string;\n  callback: (updatedValue: any) => void;\n}\n\nconst POLL_FREQUENCY = 250;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StorageService {\n\n  // subscriptions\n  private subscriptions: Map<string, StorageSubscription> = new Map();\n\n  constructor(private storage: StorageMap) {\n    setInterval(async () => {\n      for (const subscription of this.subscriptions.values()) {\n        await this.checkSubscription(subscription);\n      }\n    }, POLL_FREQUENCY);\n  }\n\n  async get(key: string): Promise<any> {\n    return await this.storage.get(key).toPromise();\n  }\n\n  async set(key: string, value: any, isSubscribable: boolean = false): Promise<void> {\n\n    await this.storage.set(key, value).toPromise();\n\n    if (isSubscribable) {\n      // Store the hash value, so that other tabs can poll for the value and detect changes\n      // that they didn't necessarily make\n      const hashValue = hash(value, {algorithm: 'sha1'});\n      await this.storage.set(this.getHashKey(key), hashValue).toPromise();\n    }\n  }\n\n  generateSubscription(storageKey: string, callback: (updatedValue: any) => void): string {\n    const subscriptionUuid = uuidv4();\n\n    const newSubscription = {\n      storageKey,\n      callback,\n      subscriptionKey: subscriptionUuid,\n      lastHashValue: ''\n    } as StorageSubscription;\n\n    this.subscriptions.set(subscriptionUuid, newSubscription);\n\n    // Kick off subscription so there's not a weird POLL_FREQUENCY delay\n    setTimeout(async () => {\n      await this.checkSubscription(newSubscription);\n    }, 1);\n\n    return subscriptionUuid;\n  }\n\n  cancelSubscription(subscriptionKey: string): void {\n    this.subscriptions.delete(subscriptionKey);\n  }\n\n  async checkSubscription(subscription: StorageSubscription): Promise<void> {\n    const fetchedHashValue = await this.storage.get(this.getHashKey(subscription.storageKey)).toPromise();\n    if (!fetchedHashValue) {\n      console.error('Subscription checked on storage key ' + subscription.storageKey\n        + ', please make sure it is being set with isSubscribable=true');\n      return;\n    }\n\n    const newHashValue = fetchedHashValue as string;\n    if (newHashValue === subscription.lastHashValue) {\n      return;\n    }\n\n    subscription.callback(\n      await this.get(subscription.storageKey)\n    );\n\n    subscription.lastHashValue = newHashValue;\n\n    this.subscriptions.set(subscription.subscriptionKey, subscription);\n  }\n\n  getHashKey(key: string): string {\n    return key + '-sha1';\n  }\n\n  async clearAll(): Promise<void> {\n    await this.storage.clear().toPromise();\n  }\n\n  async delete(key: string, isSubscribable: boolean = false): Promise<void> {\n    if (isSubscribable) {\n      // Notify subscriptions that the value no longer exists\n      await this.storage.set(this.getHashKey(key), 'nolongervalid').toPromise();\n    }\n\n    await this.storage.delete(key).toPromise();\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storage",
                        "type": "StorageMap"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "storage",
                        "type": "StorageMap",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "StructureTemplateService",
            "id": "injectable-StructureTemplateService-29ef98847d39cbaaedaaf06f0f5f7658",
            "file": "src/app/structure-template.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelSubscription",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewStructureTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 134,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "deleteTemplate",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 119,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllStructureTemplates",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<StructureTemplate[]>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getAllTemplatesListView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<StructureTemplateListView[]>",
                    "typeParameters": [],
                    "line": 39,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getStructureTemplate",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<StructureTemplate | null>",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTemplateKey",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 64,
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshAllTemplatesListView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 111,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setAllStructureTemplates",
                    "args": [
                        {
                            "name": "structureTemplates",
                            "type": "IStructureTemplate[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 81,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "structureTemplates",
                            "type": "IStructureTemplate[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAllTemplatesListView",
                    "args": [
                        {
                            "name": "structureTemplates",
                            "type": "IStructureTemplate[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 43,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "structureTemplates",
                            "type": "IStructureTemplate[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setStructureTemplate",
                    "args": [
                        {
                            "name": "structureTemplate",
                            "type": "StructureTemplate"
                        },
                        {
                            "name": "affectsListView",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 89,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "structureTemplate",
                            "type": "StructureTemplate",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsListView",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTemplate",
                    "args": [
                        {
                            "name": "templateId",
                            "type": "string"
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplate",
                                    "type": "StructureTemplate"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 101,
                    "jsdoctags": [
                        {
                            "name": "templateId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplate",
                                    "type": "StructureTemplate"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTemplateListView",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplateListView",
                                    "type": "StructureTemplateListView[]"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTemplateListView",
                                    "type": "StructureTemplateListView[]"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport {IStructureTemplate, StructureTemplate} from '../protos';\nimport {StorageService} from './storage.service';\nimport StructureTemplateBeat = StructureTemplate.StructureTemplateBeat;\n\n// Minimal details about a template to show in list view\nexport interface StructureTemplateListView {\n  id: string;\n  name: string;\n}\n\nconst ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY = 'allStructureTemplatesListView';\nconst STRUCTURE_TEMPLATE_KEY_PREFIX = 'structureTemplate-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StructureTemplateService {\n\n  constructor(private storageService: StorageService) { }\n\n  async getAllStructureTemplates(): Promise<StructureTemplate[]> {\n    const allEntries = await this.getAllTemplatesListView();\n\n    const allTemplates: StructureTemplate[] = [];\n    for (const entry of allEntries) {\n      const fetchedTemplate = await this.getStructureTemplate(entry.id);\n      if (fetchedTemplate != null) {\n        allTemplates.push(\n          fetchedTemplate\n        );\n      }\n    }\n\n    return allTemplates.filter((value) => !!value);\n  }\n\n  async getAllTemplatesListView(): Promise<StructureTemplateListView[]> {\n    return (await this.storageService.get(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY) || []) as StructureTemplateListView[];\n  }\n\n  async setAllTemplatesListView(structureTemplates: IStructureTemplate[]): Promise<void> {\n    const listView = structureTemplates.map((structureTemplate: IStructureTemplate) => {\n      return {\n        id: structureTemplate.id,\n        name: structureTemplate.name,\n      } as StructureTemplateListView;\n    });\n\n    await this.storageService.set(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY, listView, true);\n  }\n\n  subscribeToTemplateListView(handler: (newTemplateListView: StructureTemplateListView[]) => void): string {\n    return this.storageService.generateSubscription(ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY, (fetchedValue) => {\n      handler((fetchedValue || []) as StructureTemplateListView[]);\n    });\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  getTemplateKey(uuid: string): string {\n    return STRUCTURE_TEMPLATE_KEY_PREFIX + uuid;\n  }\n\n  async getStructureTemplate(uuid: string): Promise<StructureTemplate|null> {\n    const fetchedData = (await this.storageService.get(this.getTemplateKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find structure template: ' + uuid);\n      return null;\n    }\n\n    return StructureTemplate.decode(\n      fetchedData\n    );\n  }\n\n  async setAllStructureTemplates(structureTemplates: IStructureTemplate[]): Promise<void> {\n    await this.setAllTemplatesListView(structureTemplates);\n\n    for (const structureTemplate of structureTemplates) {\n      await this.setStructureTemplate(structureTemplate as StructureTemplate);\n    }\n  }\n\n  async setStructureTemplate(structureTemplate: StructureTemplate, affectsListView: boolean = false): Promise<void> {\n    await this.storageService.set(\n      this.getTemplateKey(structureTemplate.id),\n      StructureTemplate.encode(structureTemplate).finish(),\n      true\n    );\n\n    if (affectsListView) {\n      await this.refreshAllTemplatesListView();\n    }\n  }\n\n  subscribeToTemplate(templateId: string, handler: (newTemplate: StructureTemplate) => void): string {\n    return this.storageService.generateSubscription(this.getTemplateKey(templateId), (fetchedValue) => {\n      handler(\n        StructureTemplate.decode(\n          fetchedValue as Uint8Array\n        )\n      );\n    });\n  }\n\n  async refreshAllTemplatesListView(): Promise<void> {\n    const allTemplates = await this.getAllStructureTemplates();\n\n    await this.setAllTemplatesListView(\n      allTemplates.filter((template) => !!template)\n    );\n  }\n\n  async deleteTemplate(templateId: string): Promise<void> {\n    await this.storageService.delete(\n      this.getTemplateKey(templateId),\n      true\n    );\n\n    const listViewEligible = (await this.getAllTemplatesListView())\n      .filter((structureTemplate) => {\n        return structureTemplate.id !== templateId;\n    });\n\n    await this.setAllTemplatesListView(listViewEligible);\n  }\n\n  // Creates a new structure template, and returns the uuid of the new entry\n  async createNewStructureTemplate(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newStructureTemplate = StructureTemplate.create({\n      id: uuid,\n      name: 'My new template',\n      description: 'Description goes here',\n      beats: [\n        StructureTemplateBeat.create({\n          description: 'This is the first beat',\n          intendedDurationMs: 5\n        })\n      ]\n    });\n\n    await this.setStructureTemplate(newStructureTemplate);\n\n    const allStructureTemplates = await this.getAllStructureTemplates();\n    allStructureTemplates.push(newStructureTemplate);\n\n    await this.setAllTemplatesListView(allStructureTemplates);\n\n    return uuid;\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "TagService",
            "id": "injectable-TagService-4118a57a39630aa9877d8643e2f7b73e",
            "file": "src/app/tag.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelSubscription",
                    "args": [
                        {
                            "name": "subscription",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "jsdoctags": [
                        {
                            "name": "subscription",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewTag",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 170,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "deleteTag",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 104,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllTags",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Tag[]>",
                    "typeParameters": [],
                    "line": 23,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getAllTagsListView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<TagListView[]>",
                    "typeParameters": [],
                    "line": 61,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getSpecificTags",
                    "args": [
                        {
                            "name": "tagIds",
                            "type": "string[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Tag[]>",
                    "typeParameters": [],
                    "line": 40,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tagIds",
                            "type": "string[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTag",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<Tag | null>",
                    "typeParameters": [],
                    "line": 69,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTagKey",
                    "args": [
                        {
                            "name": "uuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 65,
                    "jsdoctags": [
                        {
                            "name": "uuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTagMap",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<Map<string, Tag>>",
                    "typeParameters": [],
                    "line": 53,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "refreshAllTagsListView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 137,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setAllTags",
                    "args": [
                        {
                            "name": "tags",
                            "type": "ITag[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 145,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "ITag[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAllTagsListView",
                    "args": [
                        {
                            "name": "tags",
                            "type": "ITag[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 126,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tags",
                            "type": "ITag[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTag",
                    "args": [
                        {
                            "name": "tag",
                            "type": "Tag"
                        },
                        {
                            "name": "affectsListView",
                            "type": "boolean",
                            "defaultValue": "false"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 153,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tag",
                            "type": "Tag",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsListView",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTagMap",
                    "args": [
                        {
                            "name": "tagMap",
                            "type": "Map<string | Tag>"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tagMap",
                            "type": "Map<string | Tag>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTag",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string"
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTag",
                                    "type": "Tag | null"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 94,
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTag",
                                    "type": "Tag | null"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTagListView",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTagListView",
                                    "type": "TagListView[]"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTagListView",
                                    "type": "TagListView[]"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToTagMapView",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTagMapView",
                                    "type": "Map<string | Tag>"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 88,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "newTagMapView",
                                    "type": "Map<string | Tag>"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport {StorageService} from './storage.service';\nimport {ITag, Tag} from '../protos';\n\n// Minimal details about a template to show in list view\nexport interface TagListView {\n  id: string;\n  name: string;\n}\n\nconst ALL_TAG_LIST_KEY = 'allTagList';\nconst ALL_TAG_MAP_KEY = 'allTagMap';\nconst TAG_KEY_PREFIX = 'tag-';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TagService {\n\n  constructor(private storageService: StorageService) { }\n\n  async getAllTags(): Promise<Tag[]> {\n    const allEntries = await this.getAllTagsListView();\n\n    const allTags: Tag[] = [];\n\n    for (const entry of allEntries) {\n      const fetchedTag = await this.getTag(entry.id);\n      if (fetchedTag != null) {\n        allTags.push(\n          fetchedTag\n        );\n      }\n    }\n\n    return allTags;\n  }\n\n  async getSpecificTags(tagIds: string[]): Promise<Tag[]> {\n    const tags: Tag[] = [];\n\n    for (const tagId of tagIds) {\n      const fetchedTag = await this.getTag(tagId);\n\n      if (!!fetchedTag) {\n        tags.push(fetchedTag);\n      }\n    }\n    return tags;\n  }\n\n  async getTagMap(): Promise<Map<string, Tag>> {\n    return (await this.storageService.get(ALL_TAG_MAP_KEY) as Map<string, Tag>) || new Map<string, Tag>();\n  }\n\n  async setTagMap(tagMap: Map<string, Tag>): Promise<void> {\n    return await this.storageService.set(ALL_TAG_MAP_KEY, tagMap, true);\n  }\n\n  async getAllTagsListView(): Promise<TagListView[]> {\n    return (await this.storageService.get(ALL_TAG_LIST_KEY) || []) as TagListView[];\n  }\n\n  getTagKey(uuid: string): string {\n    return TAG_KEY_PREFIX + uuid;\n  }\n\n  async getTag(uuid: string): Promise<Tag|null> {\n    const fetchedData = (await this.storageService.get(this.getTagKey(uuid))) as Uint8Array;\n\n    if (!fetchedData) {\n      console.error('Could not find structure template: ' + uuid);\n      return null;\n    }\n\n    return Tag.decode(\n      fetchedData\n    );\n  }\n\n  subscribeToTagListView(handler: (newTagListView: TagListView[]) => void): string {\n    return this.storageService.generateSubscription(ALL_TAG_LIST_KEY, (fetchedValue) => {\n      handler((fetchedValue || []) as TagListView[]);\n    });\n  }\n\n  subscribeToTagMapView(handler: (newTagMapView: Map<string, Tag>) => void): string {\n    return this.storageService.generateSubscription(ALL_TAG_MAP_KEY, (fetchedValue) => {\n      handler(fetchedValue || new Map<string, Tag>());\n    });\n  }\n\n  subscribeToTag(tagId: string, handler: (newTag: Tag|null) => void): string {\n    return this.storageService.generateSubscription(this.getTagKey(tagId), (fetchedValue) => {\n      handler(\n        Tag.decode(\n          fetchedValue as Uint8Array\n        )\n      );\n    });\n  }\n\n  async deleteTag(tagId: string): Promise<void> {\n    await this.storageService.delete(\n      this.getTagKey(tagId),\n      true\n    );\n\n    const tagMap = await this.getTagMap();\n    tagMap.delete(tagId);\n    await this.setTagMap(tagMap);\n\n    const listViewEligible = (await this.getAllTagsListView())\n      .filter((tagListView) => {\n        return tagListView.id !== tagId;\n      });\n\n    await this.setAllTagsListView(listViewEligible);\n  }\n\n  cancelSubscription(subscription: string): void {\n    this.storageService.cancelSubscription(subscription);\n  }\n\n  async setAllTagsListView(tags: ITag[]): Promise<void> {\n    const listView = tags.map((tag: ITag) => {\n      return {\n        id: tag.id,\n        name: tag.name,\n      } as TagListView;\n    });\n\n    await this.storageService.set(ALL_TAG_LIST_KEY, listView, true);\n  }\n\n  async refreshAllTagsListView(): Promise<void> {\n    const allTags = await this.getAllTags();\n\n    await this.setAllTagsListView(\n      allTags\n    );\n  }\n\n  async setAllTags(tags: ITag[]): Promise<void> {\n    await this.setAllTagsListView(tags);\n\n    for (const tag of tags) {\n      await this.setTag(tag as Tag);\n    }\n  }\n\n  async setTag(tag: Tag, affectsListView: boolean = false): Promise<void> {\n    await this.storageService.set(\n      this.getTagKey(tag.id),\n      Tag.encode(tag).finish(),\n      true\n    );\n\n    const tagMap = await this.getTagMap();\n    tagMap.set(tag.id, tag);\n    await this.setTagMap(tagMap);\n\n    if (affectsListView) {\n      await this.refreshAllTagsListView();\n    }\n  }\n\n  // Creates a new structure template, and returns the uuid of the new entry\n  async createNewTag(): Promise<string> {\n    const uuid = uuidv4();\n\n    const newTag = Tag.create({\n      id: uuid,\n      name: 'My new tag',\n      description: 'Description goes here',\n      hasNumericValue: false,\n    });\n\n    await this.setTag(newTag);\n\n    const allTags = await this.getAllTags();\n    allTags.push(newTag);\n\n    await this.setAllTagsListView(allTags);\n\n    return uuid;\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "WorkspaceMetadataService",
            "id": "injectable-WorkspaceMetadataService-6d5ba43f9559db75dc9beb6538354841",
            "file": "src/app/workspace-metadata.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "cancelSubscriptionToWorkspaceMetadata",
                    "args": [
                        {
                            "name": "subscriptionKey",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "jsdoctags": [
                        {
                            "name": "subscriptionKey",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createNewWritingSession",
                    "args": [],
                    "optional": false,
                    "returnType": "WritingSession",
                    "typeParameters": [],
                    "line": 118
                },
                {
                    "name": "getCurrentSession",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<WritingSession | null>",
                    "typeParameters": [],
                    "line": 124,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getWorkspaceMetadata",
                    "args": [
                        {
                            "name": "appendCurrentSession",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<WritingWorkspaceMetadata>",
                    "typeParameters": [],
                    "line": 42,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "appendCurrentSession",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "saveCurrentSessionToHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setWorkspaceMetadata",
                    "args": [
                        {
                            "name": "workspaceMetadata",
                            "type": "IWritingWorkspaceMetadata | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 60,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "workspaceMetadata",
                            "type": "IWritingWorkspaceMetadata | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "subscribeToWorkspaceMetadata",
                    "args": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "workspaceMetadata",
                                    "type": "WritingWorkspaceMetadata"
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 28,
                    "jsdoctags": [
                        {
                            "name": "handler",
                            "type": "function",
                            "function": [
                                {
                                    "name": "workspaceMetadata",
                                    "type": "WritingWorkspaceMetadata"
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSessionHeartbeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<WritingSession>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport {\n  Duration,\n  IDuration,\n  ITimestamp,\n  IWritingSession,\n  IWritingWorkspaceMetadata,\n  Timestamp,\n  WritingSession,\n  WritingWorkspaceMetadata} from '../protos';\nimport {StorageService} from './storage.service';\n\nconst CURRENT_SESSION_KEY = 'currentSession';\nconst LAST_HEARTBEAT_KEY = 'lastHeartbeat';\nconst LAST_ACTIVE_HEARTBEAT_KEY = 'lastActiveHeartbeat';\nconst WRITING_WORKSPACE_METADATA_KEY = 'workspaceMetadata';\n\nconst SESSION_TIMEOUT_MS = 1000 *  60; // Allow 1 minute of the browser being closed before you mark session as inactive\nconst SESSION_ACTIVE_TIMEOUT_MS = 5000; // Allow 5 seconds of the tool being not-visible before we mark as inactive\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkspaceMetadataService {\n\n  constructor(private storageService: StorageService) { }\n\n  subscribeToWorkspaceMetadata(handler: (workspaceMetadata: WritingWorkspaceMetadata) => void): string {\n    return this.storageService.generateSubscription(WRITING_WORKSPACE_METADATA_KEY, (result) => {\n      if (result) {\n        handler(WritingWorkspaceMetadata.decode(result as Uint8Array));\n      } else {\n        handler(WritingWorkspaceMetadata.create());\n      }\n    });\n  }\n\n  cancelSubscriptionToWorkspaceMetadata(subscriptionKey: string): void {\n    this.storageService.cancelSubscription(subscriptionKey);\n  }\n\n  async getWorkspaceMetadata(appendCurrentSession: boolean): Promise<WritingWorkspaceMetadata> {\n    const fetchedData = (await this.storageService.get(WRITING_WORKSPACE_METADATA_KEY)) as Uint8Array;\n    let workspaceMetadata;\n    if (fetchedData) {\n      workspaceMetadata = WritingWorkspaceMetadata.decode(fetchedData);\n    } else {\n      workspaceMetadata = WritingWorkspaceMetadata.create();\n    }\n\n    if (appendCurrentSession) {\n      const currentSession = await this.getCurrentSession() as IWritingSession;\n\n      workspaceMetadata.sessionHistory = [currentSession].concat(workspaceMetadata.sessionHistory);\n    }\n\n    return workspaceMetadata;\n  }\n\n  async setWorkspaceMetadata(workspaceMetadata: IWritingWorkspaceMetadata|null): Promise<void> {\n    if (!workspaceMetadata) {\n      workspaceMetadata = WritingWorkspaceMetadata.create();\n    }\n\n    await this.storageService.set(\n      WRITING_WORKSPACE_METADATA_KEY,\n      WritingWorkspaceMetadata.encode(workspaceMetadata).finish(),\n      true\n    );\n  }\n\n  async saveCurrentSessionToHistory(): Promise<void> {\n    await this.setWorkspaceMetadata(\n      await this.getWorkspaceMetadata(true)\n    );\n  }\n\n  // Let the app know the current writing session is still active.\n  async updateSessionHeartbeat(): Promise<WritingSession> {\n    const isActive = document.visibilityState === 'visible';\n\n    let currentSession = await this.getCurrentSession();\n    const lastHeartbeat = await this.storageService.get(LAST_HEARTBEAT_KEY) as number;\n    const lastActiveHeartbeat = await this.storageService.get(LAST_ACTIVE_HEARTBEAT_KEY) as number;\n\n    if (!currentSession) {\n      currentSession = this.createNewWritingSession();\n    } else if (Date.now() - lastHeartbeat > SESSION_TIMEOUT_MS) {\n      // Last session is stale, add it to history and initialize a new one\n      await this.saveCurrentSessionToHistory();\n\n      currentSession = this.createNewWritingSession();\n    }\n\n    currentSession.duration = getDurationBetweenTimestamps(\n      currentSession.start as ITimestamp,\n      getTimestampFromEpochMS(Date.now())\n    );\n\n    if (isActive) {\n      const activeDelta = Date.now() - lastActiveHeartbeat;\n      if (activeDelta < SESSION_ACTIVE_TIMEOUT_MS) {\n        const activeDuration = currentSession.activeDuration || Duration.create({seconds: 0, nanos: 0});\n\n        currentSession.activeDuration = incrementDuration(activeDuration, activeDelta);\n      }\n\n      await this.storageService.set(LAST_ACTIVE_HEARTBEAT_KEY, Date.now());\n    }\n\n    const encoded = WritingSession.encode(currentSession).finish();\n    await this.storageService.set(CURRENT_SESSION_KEY, encoded);\n    await this.storageService.set(LAST_HEARTBEAT_KEY, Date.now());\n\n    return currentSession;\n  }\n\n  createNewWritingSession(): WritingSession {\n    const session = WritingSession.create();\n    session.start = getTimestampFromEpochMS(Date.now());\n    return session;\n  }\n\n  async getCurrentSession(): Promise<WritingSession|null> {\n    const current = await this.storageService.get(CURRENT_SESSION_KEY);\n    if (!current) {\n      return null;\n    }\n\n    return WritingSession.decode(current as Uint8Array);\n  }\n}\n\n\nfunction getTimestampFromEpochMS(epochMS: number): Timestamp {\n  return Timestamp.create({\n    seconds: Math.floor(epochMS / 1000),\n    nanos: (epochMS % 1000) * 1e6\n  });\n}\n\nfunction getDurationBetweenTimestamps(start: ITimestamp, end: ITimestamp): Duration {\n  let nanosDiff = (end.nanos as number) - (start.nanos as number);\n  let secondsDiff = (end.seconds as number) - (start.seconds as number);\n\n  while (nanosDiff < 0) {\n    secondsDiff -= 1;\n    nanosDiff += 1e9;\n  }\n  while (nanosDiff > 1e9) {\n    nanosDiff -= 1e9;\n    secondsDiff += 1;\n  }\n  return Duration.create({\n    seconds: secondsDiff,\n    nanos: nanosDiff\n  });\n}\n\nfunction incrementDuration(duration: IDuration, deltaMs: number): IDuration {\n  let nanos = (duration.nanos || 0) + (deltaMs * 1e6);\n  let seconds = (duration.seconds || 0);\n\n  while (nanos > 1e9) {\n    nanos -= 1e9;\n    seconds = (seconds as number) + 1;\n  }\n  return Duration.create({\n    seconds,\n    nanos\n  });\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "storageService",
                        "type": "StorageService"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-ee2067dfb1c303f41003aea7d82d51e0",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  async navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl);\n  }\n\n  async getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText();\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-76010a5d67848199d7a39c7464685b28",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'revision'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  title = 'revision';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n:host {\n  display: flex;\n  flex-flow: column;\n  height: 100%;\n}\n\nnb-layout-header {\n  border-bottom: 1px solid black;\n  display: flex;\n  padding: 0 8px;\n  vertical-align: middle;\n\n  h1 {\n    flex: 1;\n    margin: 8px 0;\n  }\n\n  .timer {\n    flex: 1;\n    margin: auto;\n  }\n\n  a {\n    margin: auto;\n    padding: 0 8px;\n  }\n}\n\n.body {\n  margin: 8px 32px;\n  flex: 1;\n}\n\nnb-layout-column {\n  padding: 0 !important;\n}\n",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<nb-layout>\n\n  <nb-layout-header fixed>\n    <h1>\n      <a routerLink=\"/\" routerLinkActive=\"active\">\n        Revision\n      </a>\n    </h1>\n\n    <app-header-timer class=\"timer\"></app-header-timer>\n\n    <a routerLink=\"/data\" routerLinkActive=\"active\">\n      Data\n    </a>\n  </nb-layout-header>\n\n  <nb-layout-column>\n    <router-outlet></router-outlet>\n  </nb-layout-column>\n</nb-layout>\n"
        },
        {
            "name": "ApplyStructureNavComponent",
            "id": "component-ApplyStructureNavComponent-d0f7f931bc73f3fc0768ce180c4a25df",
            "file": "src/app/apply-structure-nav/apply-structure-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-apply-structure-nav",
            "styleUrls": [
                "./apply-structure-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./apply-structure-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "rescaledSelectedTemplate",
                    "defaultValue": "null",
                    "line": 22,
                    "type": "StructureTemplate | null"
                },
                {
                    "name": "selectedTemplateId",
                    "defaultValue": "''",
                    "line": 16
                },
                {
                    "name": "structureTemplateListView",
                    "defaultValue": "[]",
                    "line": 19,
                    "type": "StructureTemplateListView[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "applyTemplate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectTemplate",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "formatDurationMs",
                    "args": [
                        {
                            "name": "value",
                            "type": "number | null | undefined"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 41,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number | null | undefined",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBeats",
                    "args": [],
                    "optional": false,
                    "returnType": "StructureTemplateBeat[]",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {StructureTemplateListView} from '../structure-template.service';\nimport {StructureTemplate} from '../../protos';\nimport {getDurationStr} from '../duration-helpers';\nimport StructureTemplateBeat = StructureTemplate.StructureTemplateBeat;\n\n// Nav for applying a structure template to a particular beat.\n@Component({\n  selector: 'app-apply-structure-nav',\n  templateUrl: './apply-structure-nav.component.html',\n  styleUrls: ['./apply-structure-nav.component.scss'],\n})\nexport class ApplyStructureNavComponent implements OnInit {\n\n  @Input()\n  selectedTemplateId = '';\n\n  @Input()\n  structureTemplateListView: StructureTemplateListView[] = [];\n\n  @Input()\n  rescaledSelectedTemplate: StructureTemplate|null = null;\n\n  @Output() selectTemplate = new EventEmitter<string>();\n\n  @Output() applyTemplate = new EventEmitter<void>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getBeats(): StructureTemplateBeat[] {\n    if (!this.rescaledSelectedTemplate) {\n      return [];\n    }\n\n    return (this.rescaledSelectedTemplate.beats as StructureTemplateBeat[]) || [];\n  }\n\n  formatDurationMs(value: number|null|undefined): string {\n    if (!value) {\n      return '';\n    }\n\n    return getDurationStr(value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".edit-links {\n  display: flex;\n  margin-bottom: 8px;\n\n  span {\n    flex: 1;\n  }\n}\n\n.structure-nav-wrapper {\n  background: #ccc;\n  padding: 8px;\n\n  .structure-entry {\n    margin-bottom: 8px;\n    background: #fff;\n    border-radius: 4px;\n    padding: 8px;\n\n    &.selected {\n      border: 2px solid blue;\n    }\n  }\n}\n\n.selected-template {\n\n  .description {\n    margin: 8px;\n    padding-left: 16px;\n    font-style: italic;\n  }\n\n  .structure-beats-wrapper {\n    border-top: 1px solid black;\n    border-bottom: 1px solid black;\n    margin-left: 16px;\n    margin-bottom: 8px;\n\n    .structure-beat {\n      margin: 8px;\n    }\n  }\n}\n\n.action-row {\n  text-align: right;\n}\n",
                    "styleUrl": "./apply-structure-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 26
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"edit-links\">\n  <span>&nbsp;</span>\n  <a routerLink=\"/structure-templates\">Edit Structure Templates</a>\n</div>\n<div class=\"structure-nav-wrapper\">\n  <div\n    *ngFor=\"let structureTemplate of structureTemplateListView\"\n    class=\"structure-entry\"\n    [class.selected]=\"selectedTemplateId == structureTemplate.id\"\n    (click)=\"selectTemplate.emit(structureTemplate.id)\">\n    <div class=\"template-name\">{{structureTemplate.name}}</div>\n\n    <div\n      *ngIf=\"selectedTemplateId == structureTemplate.id\"\n      class=\"selected-template\">\n\n      <p class=\"description\">\n        {{rescaledSelectedTemplate?.description}}\n      </p>\n\n      <div class=\"structure-beats-wrapper\">\n        <div *ngFor=\"let beat of getBeats()\" class=\"structure-beat\">\n          {{beat.description}} ({{formatDurationMs(beat.intendedDurationMs)}})\n        </div>\n      </div>\n\n      <div class=\"action-row\">\n        <button\n          mat-raised-button color=\"primary\" (click)=\"applyTemplate.emit()\">\n          Apply Template\n        </button>\n      </div>\n\n    </div>\n\n  </div>\n</div>\n"
        },
        {
            "name": "ApplyTagNavComponent",
            "id": "component-ApplyTagNavComponent-d739302a6c077eb55ce6a1768f5d7877",
            "file": "src/app/apply-tag-nav/apply-tag-nav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-apply-tag-nav",
            "styleUrls": [
                "./apply-tag-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./apply-tag-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tagMap",
                    "defaultValue": "null",
                    "line": 25,
                    "type": "Map<string | Tag> | null"
                },
                {
                    "name": "tagReferences",
                    "defaultValue": "[]",
                    "line": 28,
                    "type": "ITagReference[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "updateTagUses",
                    "defaultValue": "new EventEmitter<ITagReference[]>()",
                    "line": 30,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "alreadyReferencedTagIds",
                    "defaultValue": "new Set<string>()",
                    "type": "Set<string>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "enumOptionsMap",
                    "defaultValue": "new Map<string, EnumOption[]>()",
                    "type": "Map<string | EnumOption[]>",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "numericChange",
                    "defaultValue": "debounce((tagId: string|undefined|null, inputEvent: any) => {\n    const newValue = inputEvent.target.value as number;\n\n    this.tagReferences.forEach((tagReference) => {\n      if (tagReference.tagId !== tagId) {\n        return;\n      }\n\n      tagReference.numericValue = newValue;\n    });\n\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }, 250)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "remainingTagOptions",
                    "defaultValue": "[]",
                    "type": "Tag[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "selectedOptionId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "addTag",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102
                },
                {
                    "name": "dereferenceTag",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "emitReferenceUpdate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 132
                },
                {
                    "name": "enumChange",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null"
                        },
                        {
                            "name": "changeEvent",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "changeEvent",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getEnumOptions",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "EnumOption[]",
                    "typeParameters": [],
                    "line": 146,
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTagName",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 115,
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54
                },
                {
                    "name": "rebuildRemainingTagOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84
                },
                {
                    "name": "selectOption",
                    "args": [
                        {
                            "name": "newId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "jsdoctags": [
                        {
                            "name": "newId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showEnumSelect",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 141,
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showNumericInput",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 136,
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string | undefined | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Input, Output, EventEmitter, ChangeDetectionStrategy, ChangeDetectorRef, OnChanges} from '@angular/core';\nimport {Beat, Tag} from '../../protos';\nimport TagReference = Beat.TagReference;\nimport EnumValue = Tag.EnumValue;\nimport ITagReference = Beat.ITagReference;\n\nimport {debounce} from 'debounce';\n\ninterface EnumOption {\n  value: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-apply-tag-nav',\n  templateUrl: './apply-tag-nav.component.html',\n  styleUrls: ['./apply-tag-nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ApplyTagNavComponent implements OnInit, OnChanges {\n\n  constructor(private ref: ChangeDetectorRef) { }\n\n  @Input()\n  tagMap: Map<string, Tag>|null = null;\n\n  @Input()\n  tagReferences: ITagReference[] = [];\n\n  @Output() updateTagUses = new EventEmitter<ITagReference[]>();\n\n  remainingTagOptions: Tag[] = [];\n  alreadyReferencedTagIds: Set<string> = new Set<string>();\n  enumOptionsMap: Map<string, EnumOption[]> = new Map<string, EnumOption[]>();\n\n  selectedOptionId = '';\n\n  numericChange = debounce((tagId: string|undefined|null, inputEvent: any) => {\n    const newValue = inputEvent.target.value as number;\n\n    this.tagReferences.forEach((tagReference) => {\n      if (tagReference.tagId !== tagId) {\n        return;\n      }\n\n      tagReference.numericValue = newValue;\n    });\n\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }, 250);\n\n  ngOnInit(): void {\n    this.rebuildRemainingTagOptions();\n    this.ref.markForCheck();\n  }\n\n  ngOnChanges(): void {\n    this.rebuildRemainingTagOptions();\n\n    this.enumOptionsMap = new Map<string, EnumOption[]>();\n\n    this.tagMap?.forEach((tag) => {\n      const enumValues = tag?.enumValues as EnumValue[] || [];\n\n      const enumOptions = enumValues.map((value, index) => {\n        if (value.isDeprecated) {\n          return {} as EnumOption;\n        }\n\n        return {\n          label: value.label,\n          value: index + 1 // 0 is reserved for \"undecided\"\n        } as EnumOption;\n      }).filter(value => !!value.label);\n\n      this.enumOptionsMap.set(tag.id, enumOptions);\n    });\n\n    this.ref.markForCheck();\n  }\n\n  rebuildRemainingTagOptions(): void {\n    this.alreadyReferencedTagIds = new Set<string>();\n    this.tagReferences.forEach((reference) => {\n      this.alreadyReferencedTagIds.add(reference.tagId as string);\n    });\n\n    this.remainingTagOptions = [];\n    this.tagMap?.forEach((tag) => {\n      if (!this.alreadyReferencedTagIds.has(tag.id)) {\n        this.remainingTagOptions.push(tag);\n      }\n    });\n  }\n\n  selectOption(newId: string): void {\n    this.selectedOptionId = newId;\n  }\n\n  addTag(): void {\n    this.tagReferences.push({\n      tagId: this.selectedOptionId,\n    } as TagReference);\n\n    this.selectOption('');\n    this.rebuildRemainingTagOptions();\n\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }\n\n  getTagName(tagId: string|undefined|null): string {\n    const tag = this.tagMap?.get(tagId as string) as Tag;\n\n    return tag.name;\n  }\n\n  dereferenceTag(tagId: string|undefined|null): void {\n    this.tagReferences = this.tagReferences.filter((reference) => {\n      return reference.tagId !== tagId;\n    });\n\n    this.rebuildRemainingTagOptions();\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }\n\n  emitReferenceUpdate(): void {\n    this.updateTagUses.emit(this.tagReferences);\n  }\n\n  showNumericInput(tagId: string|undefined|null): boolean {\n    const tag = this.tagMap?.get(tagId as string);\n    return !!tag?.hasNumericValue;\n  }\n\n  showEnumSelect(tagId: string|undefined|null): boolean {\n    const tag = this.tagMap?.get(tagId as string);\n    return !!tag?.enumValues?.length;\n  }\n\n  getEnumOptions(tagId: string|undefined|null): EnumOption[] {\n    return this.enumOptionsMap.get(tagId as string) || [];\n  }\n\n  enumChange(tagId: string|undefined|null, changeEvent: any): void {\n    this.tagReferences.forEach((tagReference) => {\n      if (tagReference.tagId !== tagId) {\n        return;\n      }\n\n      tagReference.enumValue = changeEvent as number;\n    });\n\n    this.ref.markForCheck();\n\n    this.emitReferenceUpdate();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".edit-links {\n  display: flex;\n  margin-bottom: 8px;\n\n  span {\n    flex: 1;\n  }\n}\n\n.tag-option-wrapper {\n  background: #ccc;\n  padding: 8px;\n  overflow-y: scroll;\n  max-height: 200px;\n\n  .tag-option {\n    margin-bottom: 8px;\n    background: #fff;\n    border: 1px solid #fff;\n    border-radius: 4px;\n    padding: 8px;\n\n    &.selected {\n      border: 2px solid blue;\n    }\n  }\n}\n\n\n.selected-tag {\n  .description {\n    margin: 8px;\n    padding-left: 16px;\n    font-style: italic;\n  }\n}\n\n.action-row {\n  text-align: right;\n}\n\n.selected-tags-wrapper {\n  background: #ccc;\n  padding: 8px;\n  overflow-y: scroll;\n  max-height: 200px;\n\n  .tag-reference {\n    margin-bottom: 8px;\n    background: #fff;\n    border: 1px solid #fff;\n    border-radius: 4px;\n    padding: 8px;\n\n    .title-row {\n      display: flex;\n      span {\n        flex: 1;\n        margin: auto;\n      }\n    }\n\n    .number-input, .enum-input {\n      display: block;\n    }\n  }\n}\n",
                    "styleUrl": "./apply-tag-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"edit-links\">\n  <span>&nbsp;</span>\n  <a routerLink=\"/tags\">Edit Tags</a>\n</div>\n\n<h4>Options</h4>\n<div class=\"tag-option-wrapper\">\n  <div *ngFor=\"let tagOption of remainingTagOptions\"\n       class=\"tag-option\"\n       [class.selected]=\"tagOption.id == selectedOptionId\"\n       (click)=\"selectOption(tagOption.id)\"\n  >\n    {{tagOption.name}}\n\n    <div *ngIf=\"selectedOptionId == tagOption.id\" class=\"selected-tag\">\n      <p class=\"description\">\n        {{tagOption.description}}\n      </p>\n\n      <div class=\"action-row\">\n        <button\n          mat-raised-button color=\"primary\" (click)=\"addTag()\">\n          Add\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<h4>Selected Tags</h4>\n<div class=\"selected-tags-wrapper\">\n  <div *ngFor=\"let tagReference of tagReferences\" class=\"tag-reference\">\n    <div class=\"title-row\">\n      <span>{{getTagName(tagReference.tagId)}}</span>\n      <button\n        mat-icon-button\n        class=\"dereference-button\"\n        (click)=\"dereferenceTag(tagReference.tagId)\"><mat-icon>delete</mat-icon></button>\n    </div>\n    <div *ngIf=\"showNumericInput(tagReference.tagId)\" class=\"number-input\">\n      <input type=\"number\"\n             [value]=\"tagReference.numericValue\"\n             (input)=\"numericChange(tagReference.tagId, $event)\">\n    </div>\n\n    <mat-form-field *ngIf=\"showEnumSelect(tagReference.tagId)\" class=\"enum-input\">\n      <mat-label>Value</mat-label>\n      <mat-select [value]=\"tagReference.enumValue\" (valueChange)=\"enumChange(tagReference.tagId, $event)\">\n        <mat-option\n          *ngFor=\"let option of getEnumOptions(tagReference.tagId)\"\n          [value]=\"option.value\"\n        >\n          {{option.label}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n</div>\n"
        },
        {
            "name": "BeatActionNavComponent",
            "id": "component-BeatActionNavComponent-f9dd733c61ab0989fa139f89ec54144b",
            "file": "src/app/beat-action-nav/beat-action-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-beat-action-nav",
            "styleUrls": [
                "./beat-action-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./beat-action-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedTabIndex",
                    "defaultValue": "0",
                    "line": 11
                }
            ],
            "outputsClass": [
                {
                    "name": "tabIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "onInputChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'app-beat-action-nav',\n  templateUrl: './beat-action-nav.component.html',\n  styleUrls: ['./beat-action-nav.component.scss']\n})\nexport class BeatActionNavComponent implements OnInit {\n\n  @Input()\n  selectedTabIndex = 0;\n\n  @Output() tabIndexChange = new EventEmitter<number>();\n\n  collapsed = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onInputChange(event: any): void {\n    this.tabIndexChange.emit(event as number);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".action-row {\n  display: flex;\n\n  mat-select {\n    flex: 1;\n    margin: auto;\n  }\n  button {\n    margin: auto;\n  }\n}\n\n.action-wrapper {\n  width: 350px;\n}\n",
                    "styleUrl": "./beat-action-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"action-row\">\n  <mat-select *ngIf=\"!collapsed\" [value]=\"selectedTabIndex\" (valueChange)=\"onInputChange($event)\">\n    <mat-option [value]=\"0\">Beats</mat-option>\n    <mat-option [value]=\"1\">New Structure</mat-option>\n    <mat-option [value]=\"2\">New Brainstorm</mat-option>\n    <mat-option [value]=\"3\">Tags</mat-option>\n  </mat-select>\n  <button mat-icon-button (click)=\"collapsed = !collapsed\">\n    <mat-icon>{{collapsed ? 'chevron_left' : 'chevron_right'}}</mat-icon>\n  </button>\n</div>\n\n<div *ngIf=\"!collapsed\" class=\"action-wrapper\">\n  <ng-content></ng-content>\n</div>\n"
        },
        {
            "name": "BeatBrainstormTemplateNavComponent",
            "id": "component-BeatBrainstormTemplateNavComponent-e67586ef5f46c9245ebe21dc35f958c1",
            "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-beat-brainstorm-template-nav",
            "styleUrls": [
                "./beat-brainstorm-template-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./beat-brainstorm-template-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "brainstormTemplateListView",
                    "defaultValue": "[]",
                    "line": 16,
                    "type": "BrainstormTemplateListView[]"
                },
                {
                    "name": "selectedBrainstormTemplate",
                    "defaultValue": "null",
                    "line": 19,
                    "type": "BrainstormTemplate | null"
                },
                {
                    "name": "selectedTemplateId",
                    "defaultValue": "''",
                    "line": 13
                }
            ],
            "outputsClass": [
                {
                    "name": "applyTemplate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectTemplate",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {BrainstormTemplateListView} from '../brainstorm-template.service';\nimport {BrainstormTemplate} from '../../protos';\n\n@Component({\n  selector: 'app-beat-brainstorm-template-nav',\n  templateUrl: './beat-brainstorm-template-nav.component.html',\n  styleUrls: ['./beat-brainstorm-template-nav.component.scss']\n})\nexport class BeatBrainstormTemplateNavComponent implements OnInit {\n\n  @Input()\n  selectedTemplateId = '';\n\n  @Input()\n  brainstormTemplateListView: BrainstormTemplateListView[] = [];\n\n  @Input()\n  selectedBrainstormTemplate: BrainstormTemplate|null = null;\n\n  @Output() selectTemplate = new EventEmitter<string>();\n\n  @Output() applyTemplate = new EventEmitter<void>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".edit-links {\n  display: flex;\n  margin-bottom: 8px;\n\n  span {\n    flex: 1;\n  }\n}\n\n.description {\n  margin-top: 16px;\n  white-space: pre-line;\n  font-style: italic;\n}\n\n.brainstorm-nav-wrapper {\n  background: #ccc;\n  padding: 8px;\n\n  .brainstorm-entry {\n    margin-bottom: 8px;\n    background: #fff;\n    border-radius: 4px;\n    padding: 8px;\n\n    &.selected {\n      border: 2px solid blue;\n    }\n  }\n}\n\n\n.action-row {\n  text-align: right;\n}\n",
                    "styleUrl": "./beat-brainstorm-template-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"edit-links\">\n  <span>&nbsp;</span>\n  <a routerLink=\"/brainstorm-templates\">Edit Brainstorm Templates</a>\n</div>\n<div class=\"brainstorm-nav-wrapper\">\n <div *ngFor=\"let brainstormTemplate of brainstormTemplateListView\"\n      class=\"brainstorm-entry\"\n      [class.selected]=\"selectedTemplateId == brainstormTemplate.id\"\n      (click)=\"selectTemplate.emit(brainstormTemplate.id)\">\n   <div class=\"template-name\">{{brainstormTemplate.label}}</div>\n\n   <div\n     *ngIf=\"selectedTemplateId == brainstormTemplate.id\"\n     class=\"selected-template\">\n\n     <p class=\"description\">{{selectedBrainstormTemplate?.template}}</p>\n\n     <div class=\"action-row\">\n       <button\n         mat-raised-button color=\"primary\" (click)=\"applyTemplate.emit()\">\n         Apply Template\n       </button>\n     </div>\n\n   </div>\n </div>\n</div>\n"
        },
        {
            "name": "BeatNavComponent",
            "id": "component-BeatNavComponent-30635529bb1c4688aa988c4e5009eba8",
            "file": "src/app/beat-nav/beat-nav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-beat-nav",
            "styleUrls": [
                "./beat-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./beat-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "beatListView",
                    "defaultValue": "[]",
                    "line": 17,
                    "type": "BeatMapView[]"
                },
                {
                    "name": "collapsed",
                    "defaultValue": "false",
                    "line": 20
                },
                {
                    "name": "selectedBeatId",
                    "defaultValue": "''",
                    "line": 14
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteBeat",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 26,
                    "type": "EventEmitter"
                },
                {
                    "name": "newBeat",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectBeat",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "toggleCollapsed",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "canDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "formatDurationMs",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "onToggleCollapsed",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "toggleIcon",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 47
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {BeatMapView} from '../beats.service';\nimport {getDurationStr} from '../duration-helpers';\n\n@Component({\n  selector: 'app-beat-nav',\n  templateUrl: './beat-nav.component.html',\n  styleUrls: ['./beat-nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BeatNavComponent implements OnInit {\n\n  @Input()\n  selectedBeatId = '';\n\n  @Input()\n  beatListView: BeatMapView[] = [];\n\n  @Input()\n  collapsed = false;\n\n  @Output() newBeat = new EventEmitter<void>();\n\n  @Output() selectBeat = new EventEmitter<string>();\n\n  @Output() deleteBeat = new EventEmitter<void>();\n\n  @Output() toggleCollapsed = new EventEmitter<boolean>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  canDelete(): boolean {\n    return (this.selectedBeatId || '').length > 0;\n  }\n\n  formatDurationMs(value: number): string {\n    return getDurationStr(value);\n  }\n\n  onToggleCollapsed(): void {\n    this.toggleCollapsed.emit(!this.collapsed);\n  }\n\n  toggleIcon(): string {\n    if (this.collapsed) {\n      return 'chevron_right';\n    }\n    return 'chevron_left';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".left-rail {\n  border-right: 1px solid black;\n\n  width: 250px;\n  padding-right: 16px;\n\n  &.collapsed {\n    width: inherit;\n  }\n}\n",
                    "styleUrl": "./beat-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"left-rail\" [class.collapsed]=\"collapsed\">\n  <div class=\"button-row\">\n    <button mat-icon-button (click)=\"onToggleCollapsed()\">\n      <mat-icon>{{toggleIcon()}}</mat-icon>\n    </button>\n    <ng-container *ngIf=\"!collapsed\">\n      <button mat-icon-button (click)=\"newBeat.emit()\">\n        <mat-icon>add_circle</mat-icon>\n      </button>\n      <button\n        mat-icon-button\n        (click)=\"deleteBeat.emit()\"\n        [disabled]=\"!canDelete()\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </ng-container>\n  </div>\n  <mat-action-list *ngIf=\"!collapsed\" dense>\n    <button\n      *ngFor=\"let beat of beatListView\"\n      mat-list-item\n      (click)=\"selectBeat.emit(beat.id)\">\n      <mat-icon\n        *ngIf=\"beat.id === selectedBeatId\"\n        matListIcon>\n        arrow_right\n      </mat-icon>\n      <div mat-line>{{beat.name}} ({{formatDurationMs(beat.intendedDurationMs)}})</div>\n      <div mat-line>{{beat.lastUpdated | date: 'short'}}</div>\n    </button>\n  </mat-action-list>\n</div>\n"
        },
        {
            "name": "BeatPageComponent",
            "id": "component-BeatPageComponent-0bc25cfd0b0ad5a766bb81714d3f02ad",
            "file": "src/app/beat-page/beat-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-beat-page",
            "styleUrls": [
                "./beat-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./beat-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "beatListView",
                    "defaultValue": "[]",
                    "type": "BeatMapView[]",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "beatMapView",
                    "defaultValue": "new Map()",
                    "type": "Map<string | BeatMapView>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "beatMapViewSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "beatNavCollapsed",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "brainstormListView",
                    "defaultValue": "[]",
                    "type": "BeatMapView[]",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "brainstormTemplateListView",
                    "defaultValue": "[]",
                    "type": "BrainstormTemplateListView[]",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "brainstormTemplateListViewSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "parentListView",
                    "defaultValue": "[]",
                    "type": "BeatMapView[]",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "rescaledStructureTemplate",
                    "defaultValue": "null",
                    "type": "StructureTemplate | null",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "selectedBeat",
                    "defaultValue": "null",
                    "type": "Beat | null",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedBeatId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "selectedBeatSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "selectedBrainstormTemplate",
                    "defaultValue": "null",
                    "type": "BrainstormTemplate | null",
                    "optional": false,
                    "description": "<p>Brainstorm Templates </p>\n",
                    "line": 54
                },
                {
                    "name": "selectedBrainstormTemplateSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "selectedBrainstormTemplateUuid",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "selectedChildBeat",
                    "defaultValue": "null",
                    "type": "Beat | null",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "selectedChildBeatId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "selectedChildBeatSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "selectedTabIndex",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 65
                },
                {
                    "name": "selectedTemplate",
                    "defaultValue": "null",
                    "type": "StructureTemplate | null",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "selectedTemplateSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "selectedTemplateUuid",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Structure templates </p>\n",
                    "line": 43
                },
                {
                    "name": "structureListView",
                    "defaultValue": "[]",
                    "type": "BeatMapView[]",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "structureTemplateListView",
                    "defaultValue": "[]",
                    "type": "StructureTemplateListView[]",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "structureTemplateListViewSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "tagMap",
                    "defaultValue": "new Map<string, Tag>()",
                    "type": "Map<string | Tag>",
                    "optional": false,
                    "description": "",
                    "line": 63
                },
                {
                    "name": "tagMapSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Tag Map </p>\n",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "applyBrainstormTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 381,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "applyStructureTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 335,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "buildRelatedListViews",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "deleteBeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 177,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "deleteChildBeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 266,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "getChildSumDuration",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 277
                },
                {
                    "name": "moveChildBeat",
                    "args": [
                        {
                            "name": "moveEvent",
                            "type": "BeatDropEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 241,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "moveEvent",
                            "type": "BeatDropEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newBeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 142,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "newChildBeat",
                    "args": [
                        {
                            "name": "whichList",
                            "type": "BeatSubList"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 195,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "whichList",
                            "type": "BeatSubList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75
                },
                {
                    "name": "onBeatUpdated",
                    "args": [
                        {
                            "name": "updatedBeat",
                            "type": "BeatUpdate"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 184,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "updatedBeat",
                            "type": "BeatUpdate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openReadView",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 364,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "rescaleStructureTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 308
                },
                {
                    "name": "selectBeat",
                    "args": [
                        {
                            "name": "newUuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 147,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newUuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectBrainstormTemplate",
                    "args": [
                        {
                            "name": "newId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 368,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectChildBeat",
                    "args": [
                        {
                            "name": "selectedChildId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 219,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedChildId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectParentBeat",
                    "args": [
                        {
                            "name": "parentUuid",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 171,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "parentUuid",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectStructureTemplate",
                    "args": [
                        {
                            "name": "newId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 294,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "tabChange",
                    "args": [
                        {
                            "name": "newIndex",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 273,
                    "jsdoctags": [
                        {
                            "name": "newIndex",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleBeatNavCollapsed",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 411,
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateTagUses",
                    "args": [
                        {
                            "name": "tagReferences",
                            "type": "ITagReference[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 404,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tagReferences",
                            "type": "ITagReference[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {BeatMapView, BeatsService} from '../beats.service';\nimport {Beat, BrainstormTemplate, StructureTemplate, Tag} from '../../protos';\nimport {BeatUpdate} from '../beat-prose-edit/beat-prose-edit.component';\nimport {BeatDropEvent, BeatSubList} from '../beat-related-beat-nav/beat-related-beat-nav.component';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {StructureTemplateListView, StructureTemplateService} from '../structure-template.service';\nimport StructureTemplateBeat = StructureTemplate.StructureTemplateBeat;\nimport {BrainstormTemplateListView, BrainstormTemplateService} from '../brainstorm-template.service';\nimport {TagService} from '../tag.service';\nimport TagReference = Beat.TagReference;\nimport ITagReference = Beat.ITagReference;\n\n@Component({\n  selector: 'app-beat-page',\n  templateUrl: './beat-page.component.html',\n  styleUrls: ['./beat-page.component.scss']\n})\nexport class BeatPageComponent implements OnInit, OnDestroy {\n\n  beatMapView: Map<string, BeatMapView> = new Map();\n  beatListView: BeatMapView[] = [];\n  beatMapViewSubscription = '';\n\n  beatNavCollapsed = false;\n\n  selectedBeatId = '';\n\n  parentListView: BeatMapView[] = [];\n\n  selectedBeat: Beat|null = null;\n  selectedBeatSubscription = '';\n\n  brainstormListView: BeatMapView[] = [];\n  structureListView: BeatMapView[] = [];\n\n  selectedChildBeatId = '';\n\n  selectedChildBeat: Beat|null = null;\n  selectedChildBeatSubscription = '';\n\n  /** Structure templates */\n  selectedTemplateUuid = '';\n\n  selectedTemplate: StructureTemplate|null = null;\n  rescaledStructureTemplate: StructureTemplate|null = null;\n  selectedTemplateSubscription = '';\n\n  structureTemplateListView: StructureTemplateListView[] = [];\n  structureTemplateListViewSubscription = '';\n\n\n  /** Brainstorm Templates */\n  selectedBrainstormTemplate: BrainstormTemplate|null = null;\n  selectedBrainstormTemplateUuid = '';\n  selectedBrainstormTemplateSubscription = '';\n\n  brainstormTemplateListView: BrainstormTemplateListView[] = [];\n  brainstormTemplateListViewSubscription = '';\n\n  /** Tag Map */\n  tagMapSubscription = '';\n  tagMap: Map<string, Tag> = new Map<string, Tag>();\n\n  selectedTabIndex = 0;\n\n  constructor(\n    private beatsService: BeatsService,\n    private ref: ChangeDetectorRef,\n    private structureTemplateService: StructureTemplateService,\n    private brainstormTemplateService: BrainstormTemplateService,\n    private tagService: TagService,\n    private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    // Read the selected beat ID from the route\n    this.route.params.subscribe(async (value) => {\n      const selectedId = value.id as string;\n      if (this.selectedBeatId !== selectedId && !!selectedId) {\n        await this.selectBeat(selectedId);\n      }\n    });\n\n    this.beatMapViewSubscription = this.beatsService.subscribeToBeatMapView((newValue) => {\n      this.beatMapView = newValue;\n\n      this.beatListView = Array.from(newValue.values())\n        .filter(entry => entry.parentBeats.length === 0) // Only retain top-level beats\n        .sort((a, b) => {\n        return b.lastUpdated - a.lastUpdated;\n      });\n\n      this.buildRelatedListViews();\n\n      this.ref.markForCheck();\n    });\n\n    this.structureTemplateListViewSubscription = this.structureTemplateService.subscribeToTemplateListView((newValue) => {\n      this.structureTemplateListView = newValue;\n      this.ref.markForCheck();\n    });\n\n    this.brainstormTemplateListViewSubscription = this.brainstormTemplateService.subscribeToTemplateListView((newValue) => {\n      this.brainstormTemplateListView = newValue;\n      this.ref.markForCheck();\n    });\n\n    this.tagMapSubscription = this.tagService.subscribeToTagMapView((newValue) => {\n      this.tagMap = newValue;\n      this.ref.markForCheck();\n    })\n  }\n\n  ngOnDestroy(): void {\n    this.beatsService.cancelSubscription(this.beatMapViewSubscription);\n    this.beatsService.cancelSubscription(this.selectedBeatSubscription);\n    this.beatsService.cancelSubscription(this.selectedChildBeatSubscription);\n    this.structureTemplateService.cancelSubscription(this.selectedTemplateSubscription);\n    this.structureTemplateService.cancelSubscription(this.structureTemplateListViewSubscription);\n    this.brainstormTemplateService.cancelSubscription(this.selectedBrainstormTemplateSubscription);\n    this.brainstormTemplateService.cancelSubscription(this.brainstormTemplateListViewSubscription);\n  }\n\n  private buildRelatedListViews(): void {\n    if (this.selectedBeat == null) {\n      this.brainstormListView = [];\n      this.structureListView = [];\n      this.parentListView = [];\n    } else {\n      this.brainstormListView = (this.selectedBeat.brainstorm || [])\n        .map((id) => this.beatMapView.get(id) as BeatMapView)\n        .filter(Boolean);\n      this.structureListView = (this.selectedBeat.structure || [])\n        .map((id) => this.beatMapView.get(id) as BeatMapView)\n        .filter(Boolean);\n      this.parentListView = (this.beatMapView.get(this.selectedBeatId)?.parentBeats || [])\n        .map((id) => this.beatMapView.get(id) as BeatMapView)\n        .filter(Boolean);\n    }\n  }\n\n  async newBeat(): Promise<void> {\n    const newUuid = await this.beatsService.createNewBeat();\n    await this.selectBeat(newUuid);\n  }\n\n  async selectBeat(newUuid: string): Promise<void> {\n    await this.selectChildBeat('');\n\n    this.selectedBeatId = newUuid;\n    this.selectedBeat = null;\n\n    this.beatsService.cancelSubscription(this.selectedBeatSubscription);\n    if (!!newUuid.length) {\n      this.selectedBeatSubscription = this.beatsService.subscribeToBeat(newUuid, (newValue) => {\n        this.selectedBeat = newValue;\n        this.buildRelatedListViews();\n        this.ref.markForCheck();\n      });\n      this.selectedBeat = await this.beatsService.getBeat(newUuid);\n      this.beatNavCollapsed = true;\n    } else {\n      this.beatNavCollapsed = false;\n    }\n\n    await this.router.navigate(['/beats', { id: newUuid }]);\n\n    this.ref.markForCheck();\n  }\n\n  async selectParentBeat(parentUuid: string): Promise<void> {\n    const newChildId = this.selectedBeatId;\n    await this.selectBeat(parentUuid);\n    await this.selectChildBeat(newChildId);\n  }\n\n  async deleteBeat(): Promise<void> {\n    await this.beatsService.deleteBeat(\n      this.selectedBeatId\n    );\n    await this.selectBeat('');\n  }\n\n  async onBeatUpdated(updatedBeat: BeatUpdate): Promise<void> {\n    await this.beatsService.setBeat(\n      updatedBeat.beat,\n      updatedBeat.modifiesListView,\n      true);\n\n    if (updatedBeat.modifiesListView) {\n      this.rescaleStructureTemplate();\n    }\n  }\n\n  async newChildBeat(whichList: BeatSubList): Promise<void> {\n    const newUuid = await this.beatsService.createNewBeat();\n\n    const beat = this.selectedBeat as Beat;\n\n    if (whichList === BeatSubList.Structure) {\n      const structure = beat.structure || [];\n      structure.unshift(newUuid);\n      beat.structure = structure;\n    } else {\n      const brainstorm = beat.brainstorm || [];\n      brainstorm.unshift(newUuid);\n      beat.brainstorm = brainstorm;\n    }\n\n    await this.beatsService.setBeat(\n      beat,\n      true,\n      true\n    );\n\n    await this.selectChildBeat(newUuid);\n  }\n\n  async selectChildBeat(selectedChildId: string): Promise<void> {\n    this.selectedChildBeat = null;\n    this.beatsService.cancelSubscription(this.selectedChildBeatSubscription);\n\n    if (selectedChildId === this.selectedChildBeatId) {\n      this.selectedChildBeatId = ''; // Treat as deselecting\n    } else {\n      this.selectedChildBeatId = selectedChildId;\n    }\n\n    if (!!this.selectedChildBeatId.length) {\n      this.selectedChildBeatSubscription = this.beatsService.subscribeToBeat(this.selectedChildBeatId, (newValue) => {\n        this.selectedChildBeat = newValue;\n        this.buildRelatedListViews();\n        this.ref.markForCheck();\n      });\n      this.selectedChildBeat = await this.beatsService.getBeat(this.selectedChildBeatId);\n    }\n\n    this.ref.markForCheck();\n  }\n\n  async moveChildBeat(moveEvent: BeatDropEvent): Promise<void> {\n    const beat = this.selectedBeat as Beat;\n\n    let uuidToMove: string;\n    if (moveEvent.sourceList === BeatSubList.Structure) {\n      uuidToMove = beat.structure.splice(moveEvent.sourceIndex, 1)[0];\n    } else {\n      uuidToMove = beat.brainstorm.splice(moveEvent.sourceIndex, 1)[0];\n    }\n\n    if (moveEvent.targetList === BeatSubList.Structure) {\n      beat.structure.splice(moveEvent.targetIndex, 0, uuidToMove);\n    } else {\n      beat.brainstorm.splice(moveEvent.targetIndex, 0, uuidToMove);\n    }\n\n    await this.beatsService.setBeat(\n      beat,\n      true,\n      true\n    );\n\n    this.ref.markForCheck();\n  }\n\n  async deleteChildBeat(): Promise<void> {\n    const uuidToDelete = this.selectedChildBeatId;\n    this.selectedChildBeatId = '';\n\n    await this.beatsService.deleteBeat(uuidToDelete);\n  }\n\n  tabChange(newIndex: number): void {\n    this.selectedTabIndex = newIndex;\n  }\n\n  getChildSumDuration(): number {\n\n    if (!this.selectedBeat) {\n      return 0;\n    }\n\n    let sum = 0;\n    this.selectedBeat.structure.forEach(childId => {\n      const childBeatView = this.beatMapView.get(childId);\n      if (childBeatView) {\n        sum += childBeatView.intendedDurationMs;\n      }\n    });\n\n    return sum;\n  }\n\n  async selectStructureTemplate(newId: string): Promise<void> {\n    this.selectedTemplateUuid = newId;\n\n    this.structureTemplateService.cancelSubscription(this.selectedTemplateSubscription);\n    this.selectedTemplateSubscription = this.structureTemplateService.subscribeToTemplate(newId, (newValue) => {\n      this.selectedTemplate = newValue;\n\n      this.rescaleStructureTemplate();\n      this.ref.markForCheck();\n    });\n\n    this.ref.markForCheck();\n  }\n\n  rescaleStructureTemplate(): void {\n    this.rescaledStructureTemplate = this.selectedTemplate;\n\n    if (!this.rescaledStructureTemplate) {\n      return;\n    }\n\n    const currentIntendedDuration = this.selectedBeat?.intendedDurationMs;\n    let templateSumDuration = 0;\n    (this.selectedTemplate?.beats || []).forEach(beat => {\n      templateSumDuration += (beat.intendedDurationMs as number);\n    });\n\n    if (!templateSumDuration || !currentIntendedDuration) {\n      return;\n    }\n\n    const scale = currentIntendedDuration / templateSumDuration;\n    (this.selectedTemplate?.beats || []).forEach(beat => {\n      if (!!beat) {\n        const originalDuration = beat?.intendedDurationMs as number;\n        beat.intendedDurationMs = Math.floor(originalDuration * scale);\n      }\n    });\n    this.ref.markForCheck();\n  }\n\n  async applyStructureTemplate(): Promise<void> {\n    const parentBeat = this.selectedBeat as Beat;\n\n    // Move everything from structure -> brainstorm\n    parentBeat.brainstorm = parentBeat.brainstorm.concat(parentBeat.structure);\n    parentBeat.structure = [];\n\n    // Create all relevant beats\n    const templateBeats = this.rescaledStructureTemplate?.beats as StructureTemplateBeat[];\n    for (const templateBeat of templateBeats) {\n      const newUuid = await this.beatsService.createNewBeat();\n\n      parentBeat.structure.push(newUuid);\n\n      const childBeat = await this.beatsService.getBeat(newUuid) as Beat;\n      childBeat.synopsis = templateBeat.description;\n      childBeat.intendedDurationMs = templateBeat.intendedDurationMs;\n\n      await this.beatsService.setBeat(childBeat, true);\n    }\n\n    await this.beatsService.setBeat(parentBeat, true);\n\n    await this.selectStructureTemplate('');\n    await this.selectChildBeat(parentBeat.structure[0]);\n    this.selectedTabIndex = 0;\n    this.ref.markForCheck();\n  }\n\n  async openReadView(): Promise<void> {\n    await this.router.navigate(['/read', { id: this.selectedBeatId }]);\n  }\n\n  async selectBrainstormTemplate(newId: string): Promise<void> {\n    this.selectedBrainstormTemplateUuid = newId;\n\n    this.brainstormTemplateService.cancelSubscription(this.selectedBrainstormTemplateSubscription);\n    this.selectedBrainstormTemplateSubscription = this.brainstormTemplateService.subscribeToTemplate(newId, (newValue) => {\n      this.selectedBrainstormTemplate = newValue;\n\n      this.ref.markForCheck();\n    });\n\n    this.ref.markForCheck();\n  }\n\n  async applyBrainstormTemplate(): Promise<void> {\n    const parentBeat = this.selectedBeat as Beat;\n    const brainstormTemplate = this.selectedBrainstormTemplate as BrainstormTemplate;\n\n    const newBeatUuid = await this.beatsService.createNewBeat();\n\n    parentBeat.brainstorm.push(newBeatUuid);\n\n    const childBeat = await this.beatsService.getBeat(newBeatUuid) as Beat;\n    childBeat.intendedDurationMs = 0;\n    childBeat.synopsis = brainstormTemplate.label;\n    childBeat.prose = brainstormTemplate.template;\n\n    await this.beatsService.setBeat(childBeat, true);\n    await this.beatsService.setBeat(parentBeat, true);\n\n    await this.selectChildBeat(newBeatUuid);\n    await this.selectBrainstormTemplate('');\n\n    this.selectedTabIndex = 0;\n    this.ref.markForCheck();\n  }\n\n  async updateTagUses(tagReferences: ITagReference[]): Promise<void> {\n    const parentBeat = this.selectedBeat as Beat;\n    parentBeat.tagReferences = tagReferences;\n\n    await this.beatsService.setBeat(parentBeat);\n  }\n\n  toggleBeatNavCollapsed(newValue: boolean): void {\n    this.beatNavCollapsed = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".content-wrapper {\n  display: flex;\n}\n\n.story-nav {\n  flex: 0 250px;\n}\n\n.story-prose {\n  flex: 1;\n  margin-left: 16px;\n  margin-right: 16px;\n\n  .button-row {\n    display: flex;\n    margin-bottom: 8px;\n    height: 36px;\n\n    .spacer {\n      flex: 1;\n    }\n\n    span {\n      margin: auto;\n    }\n\n    button {\n      margin-left: 8px;\n      max-width: 150px;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n}\n\nmat-tab-group {\n  max-width: 300px;\n}\n\n.beat-nav {\n  flex: 0 300px;\n}\n",
                    "styleUrl": "./beat-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "beatsService",
                        "type": "BeatsService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService"
                    },
                    {
                        "name": "brainstormTemplateService",
                        "type": "BrainstormTemplateService"
                    },
                    {
                        "name": "tagService",
                        "type": "TagService"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 65,
                "jsdoctags": [
                    {
                        "name": "beatsService",
                        "type": "BeatsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "brainstormTemplateService",
                        "type": "BrainstormTemplateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagService",
                        "type": "TagService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"content-wrapper\">\n  <app-beat-nav\n    [collapsed]=\"beatNavCollapsed\"\n    [selectedBeatId]=\"selectedBeatId\"\n    [beatListView]=\"beatListView\"\n    (newBeat)=\"newBeat()\"\n    (selectBeat)=\"selectBeat($event)\"\n    (deleteBeat)=\"deleteBeat()\"\n    (toggleCollapsed)=\"toggleBeatNavCollapsed($event)\"></app-beat-nav>\n\n  <div class=\"story-prose\">\n    <div class=\"button-row\">\n      <button *ngIf=\"!!selectedBeat\" mat-stroked-button (click)=\"openReadView()\">\n        Read\n      </button>\n      <span class=\"spacer\">&nbsp;</span>\n      <span *ngIf=\"parentListView.length > 0\">\n        Parent Beat(s):\n      </span>\n      <button\n        *ngFor=\"let parentBeat of parentListView\"\n        mat-stroked-button\n        (click)=\"selectParentBeat(parentBeat.id)\"\n        >\n        {{parentBeat.name}}\n      </button>\n    </div>\n    <app-beat-prose-edit\n      [beat]=\"selectedBeat\"\n      [childSumDuration]=\"getChildSumDuration()\"\n      (onBeatUpdated)=\"onBeatUpdated($event)\"></app-beat-prose-edit>\n  </div>\n\n  <ng-container *ngIf=\"!!selectedBeat\">\n    <div\n      *ngIf=\"!!selectedChildBeatId\"\n      class=\"story-prose\">\n      <div class=\"button-row\">\n        <span class=\"spacer\">&nbsp;</span>\n        <button\n          mat-stroked-button\n          (click)=\"selectBeat(selectedChildBeatId)\"\n        >Edit</button>\n      </div>\n      <app-beat-prose-edit\n        [beat]=\"selectedChildBeat\"\n        (onBeatUpdated)=\"onBeatUpdated($event)\"></app-beat-prose-edit>\n    </div>\n\n    <app-beat-action-nav\n      [selectedTabIndex]=\"selectedTabIndex\"\n      (tabIndexChange)=\"tabChange($event)\">\n      <app-beat-related-beat-nav\n        *ngIf=\"selectedTabIndex == 0\"\n        class=\"beat-nav\"\n        [selectedBeatId]=\"selectedChildBeatId\"\n        [brainstormListView]=\"brainstormListView\"\n        [structureListView]=\"structureListView\"\n        (newBeat)=\"newChildBeat($event)\"\n        (selectBeat)=\"selectChildBeat($event)\"\n        (moveBeat)=\"moveChildBeat($event)\"\n        (deleteBeat)=\"deleteChildBeat()\"></app-beat-related-beat-nav>\n      <app-apply-structure-nav\n        *ngIf=\"selectedTabIndex == 1\"\n        [selectedTemplateId]=\"selectedTemplateUuid\"\n        [structureTemplateListView]=\"structureTemplateListView\"\n        [rescaledSelectedTemplate]=\"rescaledStructureTemplate\"\n        (selectTemplate)=\"selectStructureTemplate($event)\"\n        (applyTemplate)=\"applyStructureTemplate()\"\n      ></app-apply-structure-nav>\n      <app-beat-brainstorm-template-nav\n        *ngIf=\"selectedTabIndex == 2\"\n        [selectedTemplateId]=\"selectedBrainstormTemplateUuid\"\n        [selectedBrainstormTemplate]=\"selectedBrainstormTemplate\"\n        [brainstormTemplateListView]=\"brainstormTemplateListView\"\n        (selectTemplate)=\"selectBrainstormTemplate($event)\"\n        (applyTemplate)=\"applyBrainstormTemplate()\"\n      ></app-beat-brainstorm-template-nav>\n      <app-apply-tag-nav\n        *ngIf=\"selectedTabIndex == 3\"\n        [tagMap]=\"tagMap\"\n        [tagReferences]=\"selectedBeat?.tagReferences || []\"\n        (updateTagUses)=\"updateTagUses($event)\"></app-apply-tag-nav>\n    </app-beat-action-nav>\n  </ng-container>\n\n</div>\n"
        },
        {
            "name": "BeatProseEditComponent",
            "id": "component-BeatProseEditComponent-21b84596a307155e9639fc9da2b917c9",
            "file": "src/app/beat-prose-edit/beat-prose-edit.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-beat-prose-edit",
            "styleUrls": [
                "./beat-prose-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./beat-prose-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "beat",
                    "defaultValue": "null",
                    "line": 29,
                    "type": "Beat | null"
                },
                {
                    "name": "childSumDuration",
                    "defaultValue": "0",
                    "line": 32
                }
            ],
            "outputsClass": [
                {
                    "name": "onBeatUpdated",
                    "defaultValue": "new EventEmitter<BeatUpdate>()",
                    "line": 34,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "completenessOptions",
                    "defaultValue": "[\n      {\n        value: Completeness.NOT_STARTED,\n        label: 'Not Started'\n      },\n      {\n        value: Completeness.BRAINSTORM,\n        label: 'Brainstorm'\n      },\n      {\n        value: Completeness.INITIAL_DRAFT,\n        label: 'Initial Draft'\n      },\n      {\n        value: Completeness.POLISHED,\n        label: 'Polished'\n      },\n      {\n        value: Completeness.FINAL,\n        label: 'Final'\n      }\n    ] as CompletenessOption[]",
                    "type": "CompletenessOption[]",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "onDurationInput",
                    "defaultValue": "debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    const durationStr = event.target.value as string;\n    let parseDurationSec;\n\n    const splitDurationStr = durationStr.split(':');\n    if (splitDurationStr.length === 1) {\n      parseDurationSec = parseInt(splitDurationStr[0], 10) * 60;\n    } else {\n      parseDurationSec = parseFloat(splitDurationStr[1]) + 60 * parseInt(splitDurationStr[0], 10);\n    }\n\n    if (isNaN(parseDurationSec) || splitDurationStr.length > 2) {\n      return;\n    }\n\n    beat.intendedDurationMs = 1000 * parseDurationSec;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true\n    } as BeatUpdate);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "onProseChanged",
                    "defaultValue": "debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    beat.prose = event.text;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: false,\n    } as BeatUpdate);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "onSynopsisInput",
                    "defaultValue": "debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    beat.synopsis = event.target.value;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true,\n    } as BeatUpdate);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "getBeatDurationStr",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 113
                },
                {
                    "name": "getChildSumDurationStr",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 123
                },
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 109
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106
                },
                {
                    "name": "onCompletenessChange",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "shouldShowChildSumDuration",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 119
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Beat} from '../../protos';\n\nimport {debounce} from 'debounce';\nimport {getDurationStr} from '../duration-helpers';\nimport Completeness = Beat.Completeness;\n\nexport interface BeatUpdate {\n  beat: Beat;\n  modifiesListView: boolean;\n}\n\ninterface CompletenessOption {\n  value: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-beat-prose-edit',\n  templateUrl: './beat-prose-edit.component.html',\n  styleUrls: ['./beat-prose-edit.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BeatProseEditComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  beat: Beat|null = null;\n\n  @Input()\n  childSumDuration = 0;\n\n  @Output() onBeatUpdated = new EventEmitter<BeatUpdate>();\n\n  onSynopsisInput = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    beat.synopsis = event.target.value;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true,\n    } as BeatUpdate);\n  }, 200);\n\n  onProseChanged = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    beat.prose = event.text;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: false,\n    } as BeatUpdate);\n  }, 200);\n\n  onDurationInput = debounce((event: any) => {\n    const beat = this.beat as Beat;\n\n    const durationStr = event.target.value as string;\n    let parseDurationSec;\n\n    const splitDurationStr = durationStr.split(':');\n    if (splitDurationStr.length === 1) {\n      parseDurationSec = parseInt(splitDurationStr[0], 10) * 60;\n    } else {\n      parseDurationSec = parseFloat(splitDurationStr[1]) + 60 * parseInt(splitDurationStr[0], 10);\n    }\n\n    if (isNaN(parseDurationSec) || splitDurationStr.length > 2) {\n      return;\n    }\n\n    beat.intendedDurationMs = 1000 * parseDurationSec;\n\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true\n    } as BeatUpdate);\n  }, 200);\n\n  completenessOptions: CompletenessOption[] = [\n      {\n        value: Completeness.NOT_STARTED,\n        label: 'Not Started'\n      },\n      {\n        value: Completeness.BRAINSTORM,\n        label: 'Brainstorm'\n      },\n      {\n        value: Completeness.INITIAL_DRAFT,\n        label: 'Initial Draft'\n      },\n      {\n        value: Completeness.POLISHED,\n        label: 'Polished'\n      },\n      {\n        value: Completeness.FINAL,\n        label: 'Final'\n      }\n    ] as CompletenessOption[];\n\n  ngOnInit(): void {\n  }\n\n  isEmpty(): boolean {\n    return this.beat == null;\n  }\n\n  getBeatDurationStr(): string {\n    const beat = this.beat as Beat;\n\n    return getDurationStr(beat.intendedDurationMs);\n  }\n\n  shouldShowChildSumDuration(): boolean {\n    return this.childSumDuration > 0;\n  }\n\n  getChildSumDurationStr(): string {\n    return '(' + getDurationStr(this.childSumDuration) + ') from children';\n  }\n\n  onCompletenessChange(newValue: any): void {\n    const beat = this.beat as Beat;\n    beat.completeness = newValue;\n    this.onBeatUpdated.emit({\n      beat,\n      modifiesListView: true\n    } as BeatUpdate);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".full-width {\n  width: 100%;\n\n  display: flex;\n\n  mat-form-field, div {\n    flex: 1;\n    margin: auto;\n  }\n\n  div {\n    margin-left: 16px;\n  }\n}\n",
                    "styleUrl": "./beat-prose-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 24
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h3 *ngIf=\"isEmpty()\">no beat selected</h3>\n\n<ng-container *ngIf=\"!isEmpty()\">\n  <mat-form-field class=\"full-width\">\n    <mat-label>One-Liner Synopsis</mat-label>\n    <input\n      matInput\n      placeholder=\"Beat synopsis\"\n      [value]=\"beat?.synopsis\"\n      (input)=\"onSynopsisInput($event)\"/>\n  </mat-form-field>\n  <div class=\"full-width\">\n    <mat-form-field>\n      <mat-label>Completeness</mat-label>\n      <mat-select\n        [value]=\"beat?.completeness\"\n        (valueChange)=\"onCompletenessChange($event)\">\n        <mat-option\n          *ngFor=\"let option of completenessOptions\"\n          [value]=\"option.value\">\n          {{option.label}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n  </div>\n  <div class=\"full-width\">\n    <mat-form-field>\n      <mat-label>Duration (mm:ss)</mat-label>\n      <input\n        matInput\n        placeholder=\"Duration\"\n        [value]=\"getBeatDurationStr()\"\n        (input)=\"onDurationInput($event)\"/>\n    </mat-form-field>\n    <div *ngIf=\"shouldShowChildSumDuration()\">\n      {{getChildSumDurationStr()}}\n    </div>\n  </div>\n\n  <quill-editor\n    [ngModel]=\"beat?.prose\"\n    format=\"text\"\n    [formats]=\"[]\"\n    (onContentChanged)=\"onProseChanged($event)\"\n  >\n    <div quill-editor-toolbar>\n      &nbsp;\n    </div>\n  </quill-editor>\n</ng-container>\n"
        },
        {
            "name": "BeatRelatedBeatNavComponent",
            "id": "component-BeatRelatedBeatNavComponent-6f3a80590d674c2cdb8e009b6f1baba7",
            "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-beat-related-beat-nav",
            "styleUrls": [
                "./beat-related-beat-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./beat-related-beat-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "brainstormListView",
                    "defaultValue": "[]",
                    "line": 38,
                    "type": "BeatMapView[]"
                },
                {
                    "name": "selectedBeatId",
                    "defaultValue": "''",
                    "line": 35
                },
                {
                    "name": "structureListView",
                    "defaultValue": "[]",
                    "line": 41,
                    "type": "BeatMapView[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteBeat",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 49,
                    "type": "EventEmitter"
                },
                {
                    "name": "moveBeat",
                    "defaultValue": "new EventEmitter<BeatDropEvent>()",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "newBeat",
                    "defaultValue": "new EventEmitter<BeatSubList>()",
                    "line": 43,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectBeat",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "beatDropLists",
                    "defaultValue": "[]",
                    "type": "BeatDropList[]",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "canDelete",
                    "args": [
                        {
                            "name": "listType",
                            "type": "BeatSubList"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 81,
                    "jsdoctags": [
                        {
                            "name": "listType",
                            "type": "BeatSubList",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createDropLists",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<BeatMapView[]>"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "CdkDragDrop<BeatMapView[]>",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatCompleteness",
                    "args": [
                        {
                            "name": "value",
                            "type": "Beat.Completeness"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 108,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "Beat.Completeness",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatDurationMs",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 104,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, OnInit, Output} from '@angular/core';\nimport {BeatMapView} from '../beats.service';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {getDurationStr} from '../duration-helpers';\nimport {Beat} from '../../protos';\n\ninterface BeatDropList {\n  id: string;\n  label: string;\n  items: BeatMapView[];\n  listType: BeatSubList;\n}\n\nexport enum BeatSubList {\n  Brainstorm,\n  Structure,\n}\n\nexport interface BeatDropEvent {\n  targetList: BeatSubList;\n  targetIndex: number;\n  sourceList: BeatSubList;\n  sourceIndex: number;\n}\n\n@Component({\n  selector: 'app-beat-related-beat-nav',\n  templateUrl: './beat-related-beat-nav.component.html',\n  styleUrls: ['./beat-related-beat-nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BeatRelatedBeatNavComponent implements OnInit, OnChanges {\n\n  @Input()\n  selectedBeatId = '';\n\n  @Input()\n  brainstormListView: BeatMapView[] = [];\n\n  @Input()\n  structureListView: BeatMapView[] = [];\n\n  @Output() newBeat = new EventEmitter<BeatSubList>();\n\n  @Output() selectBeat = new EventEmitter<string>();\n\n  @Output() moveBeat  = new EventEmitter<BeatDropEvent>();\n\n  @Output() deleteBeat = new EventEmitter<void>();\n\n  beatDropLists: BeatDropList[] = [];\n\n  constructor(private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.createDropLists();\n  }\n\n  ngOnChanges(): void {\n    this.createDropLists();\n  }\n\n  private createDropLists(): void {\n    this.beatDropLists = [\n      {\n        id: 'structure-list',\n        label: 'Structure',\n        items: this.structureListView,\n        listType: BeatSubList.Structure,\n      } as BeatDropList,\n      {\n        id: 'brainstorm-list',\n        label: 'Brainstorm',\n        items: this.brainstormListView,\n        listType: BeatSubList.Brainstorm,\n      } as BeatDropList,\n    ];\n    this.ref.markForCheck();\n  }\n\n  canDelete(listType: BeatSubList): boolean {\n    if (listType === BeatSubList.Structure) {\n      return (this.structureListView || []).filter((entry) => entry.id === this.selectedBeatId).length > 0;\n    }\n\n    return (this.brainstormListView || []).filter((entry) => entry.id === this.selectedBeatId).length > 0;\n  }\n\n  drop(event: CdkDragDrop<BeatMapView[]>): void {\n    const targetList = event.container.id;\n    const sourceList = event.previousContainer.id;\n\n    const targetIndex = event.currentIndex;\n    const sourceIndex = event.previousIndex;\n\n    this.moveBeat.emit({\n      sourceList: (sourceList === 'structure-list') ? BeatSubList.Structure : BeatSubList.Brainstorm,\n      targetList: (targetList === 'structure-list') ? BeatSubList.Structure : BeatSubList.Brainstorm,\n      sourceIndex,\n      targetIndex,\n    } as BeatDropEvent);\n  }\n\n  formatDurationMs(value: number): string {\n    return getDurationStr(value);\n  }\n\n  formatCompleteness(value: Beat.Completeness): string {\n    switch (value) {\n      case Beat.Completeness.NOT_STARTED:\n        return 'Not Started';\n      case Beat.Completeness.BRAINSTORM:\n        return 'Brainstorm';\n      case Beat.Completeness.INITIAL_DRAFT:\n        return 'Initial Draft';\n      case Beat.Completeness.POLISHED:\n        return 'Polished';\n      case Beat.Completeness.FINAL:\n        return 'Final';\n    }\n    return 'Unknown';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".list-container {\n\n  .beat-list {\n    border: 1px solid black;\n    background: #fff;\n    border-radius: 4px;\n    display: block;\n    margin-bottom: 24px;\n  }\n\n  .empty-message {\n    padding: 16px 8px;\n    font-style: italic;\n  }\n\n  .beat-item {\n    padding: 16px 8px;\n    border-bottom: 1px solid #777;\n    background: #fff;\n    box-sizing: border-box;\n    cursor: pointer;\n\n    .beat-details {\n      font-style: italic;\n      margin-left: 24px;\n    }\n  }\n\n  .beat-item.selected {\n    border-left: 4px solid blue;\n    padding-left: 4px;\n  }\n\n  .beat-item:last-child {\n    border-bottom: none;\n  }\n}\n\n.list-header {\n  display: flex;\n\n  h2 {\n    flex: 1;\n    margin: auto;\n  }\n\n  button {\n    margin: auto;\n  }\n}\n\n.cdk-drag-preview {\n  padding: 16px 8px;\n  background: white;\n  box-sizing: border-box;\n  border: 1px solid #777;\n  border-radius: 4px;\n  box-shadow: 0 5px 5px -3px rgba(0, 0, 0, 0.2),\n              0 8px 10px 1px rgba(0, 0, 0, 0.14),\n              0 3px 14px 2px rgba(0, 0, 0, 0.12);\n}\n\n.cdk-drag-placeholder {\n  opacity: 0;\n}\n\n.cdk-drag-animating {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n\n.beat-list.cdk-drop-list-dragging .beat-item:not(.cdk-drag-placeholder) {\n  transition: transform 250ms cubic-bezier(0, 0, 0.2, 1);\n}\n",
                    "styleUrl": "./beat-related-beat-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 51,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div cdkDropListGroup>\n  <div *ngFor=\"let list of beatDropLists\" class=\"list-container\">\n    <div class=\"list-header\">\n      <h2>{{list.label}}</h2>\n      <button mat-icon-button (click)=\"newBeat.emit(list.listType)\">\n        <mat-icon>add_circle</mat-icon>\n      </button>\n      <button\n        mat-icon-button\n        [disabled]=\"!canDelete(list.listType)\"\n        (click)=\"deleteBeat.emit()\">\n        <mat-icon>delete</mat-icon>\n      </button>\n    </div>\n\n\n    <div\n      cdkDropList\n      [id]=\"list.id\"\n      [cdkDropListData]=\"list.items\"\n      class=\"beat-list\"\n      (cdkDropListDropped)=\"drop($event)\">\n      <div *ngIf=\"list.items.length == 0\" class=\"empty-message\">No items</div>\n      <div\n        *ngFor=\"let beat of list.items\"\n        class=\"beat-item\" cdkDrag\n        [class.selected]=\"beat.id == selectedBeatId\"\n        (click)=\"selectBeat.emit(beat.id)\">\n        <div>\n          {{beat.name}}\n        </div>\n        <div class=\"beat-details\">\n          ({{formatDurationMs(beat.intendedDurationMs)}}) {{formatCompleteness(beat.completeness)}}\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "BrainstormTemplateDetailsComponent",
            "id": "component-BrainstormTemplateDetailsComponent-d20ccb1ce8da872c5a37607ca49dfdf0",
            "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-brainstorm-template-details",
            "styleUrls": [
                "./brainstorm-template-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./brainstorm-template-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "brainstormTemplate",
                    "defaultValue": "null",
                    "line": 21,
                    "type": "BrainstormTemplate | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "brainstormTemplateUpdated",
                    "defaultValue": "new EventEmitter<BrainstormTemplateUpdate>()",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onLabelInput",
                    "defaultValue": "debounce((event: any) => {\n    const brainstormTemplate = this.brainstormTemplate as BrainstormTemplate;\n\n    brainstormTemplate.label = event.target.value;\n\n    this.brainstormTemplateUpdated.emit({\n      brainstormTemplate,\n      modifiesListView: true,\n    } as BrainstormTemplateUpdate);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "onTemplateInput",
                    "defaultValue": "debounce((event: any) => {\n    const brainstormTemplate = this.brainstormTemplate as BrainstormTemplate;\n\n    brainstormTemplate.template = event.target.value;\n\n    this.brainstormTemplateUpdated.emit({\n      brainstormTemplate,\n      modifiesListView: false,\n    } as BrainstormTemplateUpdate);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {BrainstormTemplate} from '../../../protos';\n\nimport {debounce} from 'debounce';\n\nexport interface BrainstormTemplateUpdate {\n  brainstormTemplate: BrainstormTemplate;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-brainstorm-template-details',\n  templateUrl: './brainstorm-template-details.component.html',\n  styleUrls: ['./brainstorm-template-details.component.scss']\n})\nexport class BrainstormTemplateDetailsComponent {\n\n  constructor() { }\n\n  @Input()\n  brainstormTemplate: BrainstormTemplate|null = null;\n\n  @Output() brainstormTemplateUpdated = new EventEmitter<BrainstormTemplateUpdate>();\n\n  onLabelInput = debounce((event: any) => {\n    const brainstormTemplate = this.brainstormTemplate as BrainstormTemplate;\n\n    brainstormTemplate.label = event.target.value;\n\n    this.brainstormTemplateUpdated.emit({\n      brainstormTemplate,\n      modifiesListView: true,\n    } as BrainstormTemplateUpdate);\n  }, 200);\n\n  onTemplateInput = debounce((event: any) => {\n    const brainstormTemplate = this.brainstormTemplate as BrainstormTemplate;\n\n    brainstormTemplate.template = event.target.value;\n\n    this.brainstormTemplateUpdated.emit({\n      brainstormTemplate,\n      modifiesListView: false,\n    } as BrainstormTemplateUpdate);\n  }, 200);\n\n  isEmpty(): boolean {\n    return this.brainstormTemplate == null;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./brainstorm-template-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 16
            },
            "templateData": "<h3 *ngIf=\"isEmpty()\">no template selected</h3>\n\n<ng-container *ngIf=\"!isEmpty()\">\n  <div class=\"row\">\n    <mat-form-field class=\"full-width\">\n      <mat-label>Label</mat-label>\n      <input\n        matInput\n        placeholder=\"Template label\"\n        [value]=\"brainstormTemplate?.label\"\n        (input)=\"onLabelInput($event)\"/>\n    </mat-form-field>\n  </div>\n\n  <div class=\"row\">\n    <mat-form-field class=\"full-width\">\n      <mat-label>Template</mat-label>\n      <textarea\n        matInput\n        placeholder=\"Template\"\n        [rows]=\"5\"\n        [value]=\"brainstormTemplate?.template\"\n        (input)=\"onTemplateInput($event)\"></textarea>\n    </mat-form-field>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "BrainstormTemplateNavComponent",
            "id": "component-BrainstormTemplateNavComponent-74357ad06bdc5baf4b2ecf777f1285c3",
            "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-brainstorm-template-nav",
            "styleUrls": [
                "./brainstorm-template-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./brainstorm-template-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "brainstormTemplateListView",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "BrainstormTemplateListView[]"
                },
                {
                    "name": "selectedTemplateId",
                    "defaultValue": "''",
                    "line": 12
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteTemplate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "generateStandardTemplates",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "newTemplate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectTemplate",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "canDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "createNewTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {BrainstormTemplateListView} from '../../brainstorm-template.service';\n\n@Component({\n  selector: 'app-brainstorm-template-nav',\n  templateUrl: './brainstorm-template-nav.component.html',\n  styleUrls: ['./brainstorm-template-nav.component.scss']\n})\nexport class BrainstormTemplateNavComponent implements OnInit {\n\n  @Input()\n  selectedTemplateId = '';\n\n  @Input()\n  brainstormTemplateListView: BrainstormTemplateListView[] = [];\n\n  @Output() newTemplate = new EventEmitter<void>();\n\n  @Output() selectTemplate = new EventEmitter<string>();\n\n  @Output() deleteTemplate = new EventEmitter<void>();\n\n  @Output() generateStandardTemplates = new EventEmitter<void>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  createNewTemplate(): void {\n    this.newTemplate.emit();\n  }\n\n  canDelete(): boolean {\n    return (this.selectedTemplateId || '').length > 0;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".left-rail {\n  width: 200px;\n}\n",
                    "styleUrl": "./brainstorm-template-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"left-rail\">\n  <div class=\"button-row\">\n    <button mat-icon-button (click)=\"createNewTemplate()\">\n      <mat-icon>add_circle</mat-icon>\n    </button>\n    <button\n      mat-icon-button\n      (click)=\"deleteTemplate.emit()\"\n      [disabled]=\"!canDelete()\">\n      <mat-icon>delete</mat-icon>\n    </button>\n    <button mat-icon-button (click)=\"generateStandardTemplates.emit()\">\n      <mat-icon>gesture</mat-icon>\n    </button>\n  </div>\n  <mat-action-list dense>\n    <button\n      *ngFor=\"let brainstormTemplate of brainstormTemplateListView\"\n      mat-list-item\n      (click)=\"selectTemplate.emit(brainstormTemplate.id)\">\n      <mat-icon\n        *ngIf=\"brainstormTemplate.id === selectedTemplateId\"\n        matListIcon>\n        arrow_right\n      </mat-icon>\n      {{brainstormTemplate.label}}\n    </button>\n  </mat-action-list>\n</div>\n"
        },
        {
            "name": "BrainstormTemplatePageComponent",
            "id": "component-BrainstormTemplatePageComponent-e69a53353fd9ff12a56711398beb3827",
            "file": "src/app/brainstorm-template-page/brainstorm-template-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-brainstorm-template-page",
            "styleUrls": [
                "./brainstorm-template-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./brainstorm-template-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "brainstormTemplateListView",
                    "defaultValue": "[]",
                    "type": "BrainstormTemplateListView[]",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "brainstormTemplateListViewSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectedTemplate",
                    "defaultValue": "null",
                    "type": "BrainstormTemplate | null",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedTemplateSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "selectedTemplateUuid",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 52,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "generateStandardTemplates",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 74,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "newTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 47,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                },
                {
                    "name": "onBrainstormTemplateUpdate",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "BrainstormTemplateUpdate"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "BrainstormTemplateUpdate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTemplate",
                    "args": [
                        {
                            "name": "newId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {BrainstormTemplateListView, BrainstormTemplateService} from '../brainstorm-template.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BrainstormTemplate, StructureTemplate} from '../../protos';\nimport {TagUpdate} from '../tag-page/tag-details/tag-details.component';\nimport {BrainstormTemplateUpdate} from './brainstorm-template-details/brainstorm-template-details.component';\n\n@Component({\n  selector: 'app-brainstorm-template-page',\n  templateUrl: './brainstorm-template-page.component.html',\n  styleUrls: ['./brainstorm-template-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BrainstormTemplatePageComponent implements OnInit, OnDestroy {\n\n  selectedTemplateUuid = '';\n\n  selectedTemplate: BrainstormTemplate|null = null;\n  selectedTemplateSubscription = '';\n\n  brainstormTemplateListView: BrainstormTemplateListView[] = [];\n  brainstormTemplateListViewSubscription = '';\n\n  constructor(private brainstormTemplateService: BrainstormTemplateService, private ref: ChangeDetectorRef, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    // Read the selected template ID from the route\n    this.route.params.subscribe(async (value) => {\n      const selectedId = value.id as string;\n      if (this.selectedTemplateUuid !== selectedId && !!selectedId) {\n        await this.selectTemplate(selectedId);\n      }\n    });\n\n    this.brainstormTemplateListViewSubscription = this.brainstormTemplateService.subscribeToTemplateListView((newValue) => {\n      this.brainstormTemplateListView = newValue;\n      this.ref.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.brainstormTemplateService.cancelSubscription(this.selectedTemplateSubscription);\n    this.brainstormTemplateService.cancelSubscription(this.brainstormTemplateListViewSubscription);\n  }\n\n\n  async newTemplate(): Promise<void> {\n    this.selectedTemplateUuid = await this.brainstormTemplateService.createNewBrainstormTemplate();\n    await this.selectTemplate(this.selectedTemplateUuid);\n  }\n\n  async deleteTemplate(): Promise<void> {\n    await this.brainstormTemplateService.deleteTemplate(this.selectedTemplateUuid);\n    this.selectedTemplateUuid = '';\n    this.selectedTemplate = null;\n    this.ref.markForCheck();\n  }\n\n  async selectTemplate(newId: string): Promise<void> {\n    this.selectedTemplateUuid = newId;\n\n    // Clear old subscription, setup new one\n    this.brainstormTemplateService.cancelSubscription(this.selectedTemplateSubscription);\n    this.selectedTemplateSubscription = this.brainstormTemplateService.subscribeToTemplate(newId, (newValue) => {\n      this.selectedTemplate = newValue;\n      this.ref.markForCheck();\n    });\n\n    await this.router.navigate(['/brainstorm-templates', { id: newId }]);\n\n    this.ref.markForCheck();\n  }\n\n  async generateStandardTemplates(): Promise<void> {\n    const themeTemplateId = await this.brainstormTemplateService.createNewBrainstormTemplate();\n\n    const themeTemplate = {\n      id: themeTemplateId,\n      label: 'Theme',\n      template: 'What is the aspect of the theme depicted in this beat? What thematic statement does this contribute?'\n    } as BrainstormTemplate;\n\n    await this.brainstormTemplateService.setBrainstormTemplate(themeTemplate, true);\n  }\n\n  async onBrainstormTemplateUpdate(newValue: BrainstormTemplateUpdate): Promise<void> {\n    await this.brainstormTemplateService.setBrainstormTemplate(newValue.brainstormTemplate, newValue.modifiesListView);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page {\n  height: 100%;\n  display: flex;\n}\n\n.details {\n  flex: 1;\n  margin-left: 24px;\n  padding-bottom: 48px;\n}\n",
                    "styleUrl": "./brainstorm-template-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "brainstormTemplateService",
                        "type": "BrainstormTemplateService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "brainstormTemplateService",
                        "type": "BrainstormTemplateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n  <app-brainstorm-template-nav\n    [selectedTemplateId]=\"selectedTemplateUuid\"\n    [brainstormTemplateListView]=\"brainstormTemplateListView\"\n    (newTemplate)=\"newTemplate()\"\n    (selectTemplate)=\"selectTemplate($event)\"\n    (deleteTemplate)=\"deleteTemplate()\"\n    (generateStandardTemplates)=\"generateStandardTemplates()\">\n  </app-brainstorm-template-nav>\n  <app-brainstorm-template-details\n    class=\"details\"\n    [brainstormTemplate]=\"selectedTemplate\"\n    (brainstormTemplateUpdated)=\"onBrainstormTemplateUpdate($event)\"\n  ></app-brainstorm-template-details>\n</div>\n"
        },
        {
            "name": "HeaderTimerComponent",
            "id": "component-HeaderTimerComponent-2d9b65fb60cd8135042228092b977ee5",
            "file": "src/app/header-timer/header-timer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-timer",
            "styleUrls": [
                "./header-timer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-timer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "sessionTimeStr",
                    "defaultValue": "'00:00'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "getNumberStr",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 52,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16
                },
                {
                    "name": "updateHeartbeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {WorkspaceMetadataService} from '../workspace-metadata.service';\n\n@Component({\n  selector: 'app-header-timer',\n  templateUrl: './header-timer.component.html',\n  styleUrls: ['./header-timer.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderTimerComponent implements OnInit {\n\n  sessionTimeStr = '00:00';\n\n  constructor(private workspaceMetadataService: WorkspaceMetadataService, private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    setInterval(async () => {\n      await this.updateHeartbeat();\n    }, 500);\n  }\n\n  async updateHeartbeat(): Promise<void> {\n    const currentSession = await this.workspaceMetadataService.updateSessionHeartbeat();\n\n    let sessionSecs = currentSession.duration?.seconds as number;\n    const activeSecs = currentSession.activeDuration?.seconds as number;\n\n    const activePercent = Math.round(activeSecs / sessionSecs * 100);\n\n    const sessionHrs = Math.floor(sessionSecs / 3600);\n    sessionSecs -= (3600 * sessionHrs);\n\n    const sessionMins = Math.floor(sessionSecs / 60);\n    sessionSecs -= (60 * sessionMins);\n\n    let stringValue = '';\n    if (sessionHrs) {\n      stringValue = sessionHrs.toString() + ':';\n    }\n\n    stringValue += this.getNumberStr(sessionMins) + ':' + this.getNumberStr(sessionSecs);\n\n    if (activeSecs > 0) {\n      stringValue += ' (' + activePercent + '% active)';\n    }\n\n    this.sessionTimeStr = stringValue;\n\n    this.ref.markForCheck();\n  }\n\n  getNumberStr(value: number): string {\n    let output = '';\n    if (value < 10) {\n      output = '0';\n    }\n    return output + value.toString();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "p {\n  margin: 0;\n}\n",
                    "styleUrl": "./header-timer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>\n  {{sessionTimeStr}}\n</p>\n"
        },
        {
            "name": "ImportExportPageComponent",
            "id": "component-ImportExportPageComponent-a934dae70057f75d3f026bdf250852ec",
            "file": "src/app/import-export-page/import-export-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-import-export-page",
            "styleUrls": [
                "./import-export-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./import-export-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "fetchedValue",
                    "defaultValue": "'Not yet fetched'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "uploadedTextData",
                    "defaultValue": "'Not uploaded yet'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "newWorkspace",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19
                },
                {
                    "name": "onDownloadClick",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 22,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "onUpload",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {MonolithicDataService} from '../monolithic-data.service';\nimport fileDownload from 'js-file-download';\nimport {WritingWorkspace} from '../../protos';\n\n// Page component for the \"Import/Export\" page\n@Component({\n  selector: 'app-import-export-page',\n  templateUrl: './import-export-page.component.html',\n  styleUrls: ['./import-export-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ImportExportPageComponent implements OnInit {\n  fetchedValue = 'Not yet fetched';\n  uploadedTextData = 'Not uploaded yet';\n\n  constructor(private monolithicDataService: MonolithicDataService, private ref: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n  }\n\n  async onDownloadClick(): Promise<void> {\n    const workspace = await this.monolithicDataService.saveWorkspace();\n    const filename = workspace.name + '.write';\n\n    fileDownload(\n      new Blob([WritingWorkspace.encode(workspace).finish()]),\n      filename\n    );\n  }\n\n  async onUpload(event: any): Promise<void> {\n    const file: File = event.target.files[0];\n\n    const fileData = await file.arrayBuffer();\n    const workspace = WritingWorkspace.decode(new Uint8Array(fileData));\n\n    this.uploadedTextData = workspace.name;\n\n    await this.monolithicDataService.loadWorkspace(workspace);\n\n    this.ref.markForCheck();\n  }\n\n  async newWorkspace(): Promise<void> {\n    const newWorkspaceName = prompt('What\\'s the new workspace name?');\n\n    if (!newWorkspaceName) {\n      return;\n    }\n\n    await this.monolithicDataService.newWorkspace(newWorkspaceName);\n\n    this.ref.markForCheck();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  margin-right: 8px;\n}\n\n.upload-download {\n  display: flex;\n}\n",
                    "styleUrl": "./import-export-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "monolithicDataService",
                        "type": "MonolithicDataService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "monolithicDataService",
                        "type": "MonolithicDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1>Import / Export</h1>\n\n<p>\n  The goal of this page is to support importing / exporting story data.\n</p>\n\n<div class=\"upload-download\">\n  <button mat-button (click)=\"onDownloadClick()\">\n    Download\n  </button>\n  <button mat-button (click)=\"uploadFile.click()\">\n    Upload\n  </button>\n  <input\n    hidden\n    type=\"file\"\n    #uploadFile\n    accept=\".write\"\n    (change)=\"onUpload($event)\">\n  <button mat-button (click)=\"newWorkspace()\">New Workspace</button>\n</div>\n\n\n"
        },
        {
            "name": "LandingPageComponent",
            "id": "component-LandingPageComponent-168e6fd56bb667551086f76012bb9439",
            "file": "src/app/landing-page/landing-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-landing-page",
            "styleUrls": [
                "./landing-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "missesPerHit",
                    "defaultValue": "3",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "pagesPerSprint",
                    "defaultValue": "0.25",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "scriptLength",
                    "defaultValue": "110",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "sessionsPerDay",
                    "defaultValue": "4",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "splitFactor",
                    "defaultValue": "3.5",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "storyListView",
                    "defaultValue": "[]",
                    "type": "BeatMapView[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "workspaceName",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "workspaceNameSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [
                {
                    "name": "calculateFlatAlternativeSessions",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 79
                },
                {
                    "name": "calculateSessionsRequired",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 69
                },
                {
                    "name": "changeParameters",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "cost",
                    "args": [
                        {
                            "name": "treeDepth",
                            "type": "number"
                        },
                        {
                            "name": "splitFactor",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 86,
                    "jsdoctags": [
                        {
                            "name": "treeDepth",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "splitFactor",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "giveUpRate",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "navigateToStory",
                    "args": [
                        {
                            "name": "beatId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 107,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beatId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "newStory",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 97,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 32,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "pickRandomFromList",
                    "args": [
                        {
                            "name": "options",
                            "type": "number[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 60,
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "number[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "randomStory",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {MonolithicDataService} from '../monolithic-data.service';\nimport {BeatMapView, BeatsService} from '../beats.service';\nimport {Router} from '@angular/router';\n\n// Static landing page component.\n@Component({\n  selector: 'app-landing-page',\n  templateUrl: './landing-page.component.html',\n  styleUrls: ['./landing-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LandingPageComponent implements OnInit, OnDestroy {\n  workspaceName = '';\n  workspaceNameSubscription = '';\n\n  storyListView: BeatMapView[] = [];\n\n  scriptLength = 110;\n  pagesPerSprint = 0.25;\n  splitFactor = 3.5;\n  missesPerHit = 3;\n  sessionsPerDay = 4;\n\n  constructor(\n    private monolithicDataService: MonolithicDataService,\n    private beatsService: BeatsService,\n    private ref: ChangeDetectorRef,\n    private router: Router\n  ) { }\n\n  async ngOnInit(): Promise<void> {\n    this.workspaceNameSubscription = this.monolithicDataService.subscribeToWorkspaceName((workspaceName) => {\n      this.workspaceName = workspaceName;\n      this.ref.markForCheck();\n    });\n\n    const beatMap = await this.beatsService.getBeatMap();\n    this.storyListView = Array.from(beatMap.values())\n      .filter(entry => entry.parentBeats.length === 0) // Only retain top-level beats\n      .sort((a, b) => {\n        return b.lastUpdated - a.lastUpdated;\n      });\n\n    this.ref.markForCheck();\n  }\n\n  ngOnDestroy(): void {\n    this.monolithicDataService.cancelSubscriptionToWorkspaceName(this.workspaceNameSubscription);\n  }\n\n  changeParameters(): void {\n    this.scriptLength = this.pickRandomFromList([30, 60, 90, 110, 120]);\n    this.pagesPerSprint = this.pickRandomFromList([0.125, 0.25, 0.5, 1]);\n    this.splitFactor = this.pickRandomFromList([2, 3, 3.5, 4, 5]);\n    this.missesPerHit = this.pickRandomFromList([1, 2, 3, 4, 5]);\n    this.sessionsPerDay = this.pickRandomFromList([0.5, 1, 2, 4, 6, 8]);\n  }\n\n  pickRandomFromList(options: number[]): number {\n    const randomIndex = Math.floor(Math.random() * options.length);\n    return options[randomIndex];\n  }\n\n  giveUpRate(): number {\n    return 100 * this.missesPerHit / (this.missesPerHit + 1);\n  }\n\n  calculateSessionsRequired(): number {\n    const treeDepth = Math.log(this.scriptLength / this.pagesPerSprint) / Math.log(this.splitFactor);\n\n    const halfCost = this.cost(treeDepth / 2, this.splitFactor);\n    const fullCost = this.cost(treeDepth, this.splitFactor);\n\n    return (halfCost * this.missesPerHit) + (fullCost);\n\n  }\n\n  calculateFlatAlternativeSessions(): number {\n    const halfCost = 0.5 * this.scriptLength / this.pagesPerSprint;\n    const fullCost = this.scriptLength / this.pagesPerSprint;\n\n    return (halfCost * this.missesPerHit) + (fullCost);\n  }\n\n  cost(treeDepth: number, splitFactor: number): number {\n    let cost = 0;\n    for (let i = 0; i < treeDepth; i++) {\n      cost += Math.pow(splitFactor, i);\n    }\n\n    cost += Math.pow(splitFactor, treeDepth);\n\n    return cost;\n  }\n\n  async newStory(): Promise<void> {\n    const newId = await this.beatsService.createNewBeat();\n    await this.navigateToStory(newId);\n  }\n\n  async randomStory(): Promise<void> {\n    const randomId = Math.floor(Math.random() * this.storyListView.length);\n    await this.navigateToStory(this.storyListView[randomId].id);\n  }\n\n  async navigateToStory(beatId: string): Promise<void> {\n    await this.router.navigate(['/read', { id: beatId }]);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".link-list a {\n  display: block;\n}\n\n.story-list {\n  margin: 16px;\n  border: 1px solid #ccc;\n  padding: 16px;\n\n  .story {\n    margin-top: 8px;\n    color: blue;\n    cursor: pointer;\n  }\n}\n",
                    "styleUrl": "./landing-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "monolithicDataService",
                        "type": "MonolithicDataService"
                    },
                    {
                        "name": "beatsService",
                        "type": "BeatsService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "monolithicDataService",
                        "type": "MonolithicDataService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "beatsService",
                        "type": "BeatsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div>\n  <a href=\"https://github.com/jon-simpkins/revision\" target=\"_blank\">\n    Source Code\n  </a>\n</div>\n\n<pre>\n  If you want to write a {{scriptLength}} page script,\n  you write a page in {{1 / pagesPerSprint}} \"sprints\",\n  each layer of the script splits on average into {{splitFactor}} pieces,\n  you give up on {{giveUpRate()}}% of stories after you get to half depth, it will take you\n  {{calculateSessionsRequired() | number}} sessions ({{calculateSessionsRequired() / sessionsPerDay | number}} days)\n  to complete your script, given {{sessionsPerDay / 4}} hrs of writing per day\n  ({{sessionsPerDay}} 15-minute sessions).\n\n  In a flat writing approach, it would take {{calculateFlatAlternativeSessions()}} sessions\n  ({{(calculateFlatAlternativeSessions() - calculateSessionsRequired()) / sessionsPerDay}} days longer).\n\n  <button mat-stroked-button (click)=\"changeParameters()\">\n    Change Parameters\n  </button>\n</pre>\n\n<div *ngIf=\"workspaceName.length > 0\">\n  <h3>Workspace: {{workspaceName}}</h3>\n\n  <div class=\"link-list\">\n    <a routerLink=\"structure-templates\">Structure Templates</a>\n    <a routerLink=\"brainstorm-templates\">Brainstorm Templates</a>\n    <a routerLink=\"tags\">Tags</a>\n    <a routerLink=\"beats\">Beats</a>\n    <a href=\"#/mirage/writing;id=1234\">Writing Example</a>\n  </div>\n\n  <div class=\"story-list\">\n    <button mat-stroked-button (click)=\"newStory()\">\n      New Story\n    </button>\n    <button *ngIf=\"!!storyListView.length\" mat-stroked-button (click)=\"randomStory()\">\n      Random Story\n    </button>\n    <div *ngFor=\"let story of storyListView\"\n         class=\"story\"\n       (click)=\"navigateToStory(story.id)\">\n      {{story.name}}\n    </div>\n  </div>\n\n  <app-show-session-history></app-show-session-history>\n</div>\n\n<ng-container *ngIf=\"workspaceName.length == 0\">\n  <h3>No current workspace!</h3>\n\n  <p>Go to the <a routerLink=\"data\">data page</a> to load from file.</p>\n</ng-container>\n\n\n\n"
        },
        {
            "name": "ReadPageBeatComponent",
            "id": "component-ReadPageBeatComponent-3c5df2d3ef98d138543fad680cfaeecb",
            "file": "src/app/read-page-beat/read-page-beat.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-read-page-beat",
            "styleUrls": [
                "./read-page-beat.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./read-page-beat.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "beat",
                    "defaultValue": "null",
                    "line": 17,
                    "type": "BeatReadView | null"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "paragraphs",
                    "defaultValue": "[]",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "methodsClass": [
                {
                    "name": "getCompletionClass",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "getProse",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "hasBeat",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 30
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21
                },
                {
                    "name": "toggleExpansion",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, OnInit, Input, Output} from '@angular/core';\nimport {BeatReadView} from '../beats.service';\nimport {Beat} from '../../protos';\nimport Completeness = Beat.Completeness;\n\n@Component({\n  selector: 'app-read-page-beat',\n  templateUrl: './read-page-beat.component.html',\n  styleUrls: ['./read-page-beat.component.scss']\n})\nexport class ReadPageBeatComponent implements OnInit {\n\n  isExpanded = false;\n  paragraphs: string[] = [];\n\n  @Input()\n  beat: BeatReadView|null = null;\n\n  constructor() { }\n\n  ngOnInit(): void {\n    this.isExpanded = this.beat?.showExpanded || false;\n    this.paragraphs = this.beat?.prose.split('\\n') || [];\n  }\n\n  toggleExpansion(): void {\n    this.isExpanded = !this.isExpanded;\n  }\n\n  hasBeat(): boolean {\n    return !!this.beat;\n  }\n\n  getProse(): string {\n    const prose = this.beat?.prose || '';\n    return prose.trim();\n  }\n\n  getCompletionClass(): string {\n    switch (this.beat?.completeness as Completeness) {\n      case Completeness.FINAL:\n        return 'final';\n      case Completeness.POLISHED:\n        return 'polished';\n      case Completeness.INITIAL_DRAFT:\n        return 'initial-draft';\n      case Completeness.BRAINSTORM:\n        return 'brainstorm';\n    }\n    return 'not-started';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$header-opacity: 0.1;\n$header-vert-padding: 4px;\n\n$left-border: 8px solid;\n\n$finished-color: rgb(0, 128, 0);\n$polished-color: rgb(173, 255, 47);\n$initial-draft-color: rgb(255, 255, 0);\n$brainstorm-color: rgb(255, 128, 0);\n$not-started-color: rgb(255, 0, 0);\n\n.beat {\n\n  margin: 0;\n  font-size: 14px;\n  font-family: Courier New, monospace;\n\n  .header {\n    font-style: italic;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    padding-left: 16px;\n\n\n    // make sticky\n    position: sticky;\n    top: 0;\n\n    display: flex;\n\n    .header-text {\n      flex: 1;\n      cursor: pointer;\n    }\n\n    a {\n      margin: -$header-vert-padding 0;\n      padding: $header-vert-padding 8px;\n      margin-right: 16px;\n      text-decoration: none;\n      border: 1px solid black;\n      border-radius: $header-vert-padding;\n      background: rgba(255, 255, 255, 0.95);\n    }\n  }\n\n  .details {\n    white-space: pre-wrap;\n    padding: 4px 16px;\n    margin: 0;\n  }\n\n\n  &.final {\n    border-left: $left-border $finished-color;\n\n    .header {\n      background: mix($finished-color, #fff, 10%);\n    }\n  }\n\n  &.polished {\n    border-left: $left-border $polished-color;\n\n    .header {\n      background: mix($polished-color, #fff, 10%);\n    }\n  }\n\n  &.initial-draft {\n    border-left: $left-border $initial-draft-color;\n\n    .header {\n      background: mix($initial-draft-color, #fff, 10%);\n    }\n  }\n\n  &.brainstorm {\n    border-left: $left-border $brainstorm-color;\n\n    .header {\n      background: mix($brainstorm-color, #fff, 10%);\n    }\n  }\n\n  &.not-started {\n    border-left: $left-border $not-started-color;\n\n    .header {\n      background: mix($not-started-color, #fff, 10%);\n    }\n  }\n\n}\n",
                    "styleUrl": "./read-page-beat.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": " <div *ngIf=\"hasBeat()\" class=\"beat {{getCompletionClass()}}\">\n  <header class=\"header\">\n    <span class=\"header-text\" (click)=\"toggleExpansion()\">\n      {{beat?.name}}\n    </span>\n    <a [routerLink]=\"['/beats', {id: beat?.id}]\" >Edit</a>\n  </header>\n  <p *ngIf=\"isExpanded\" class=\"details\">{{getProse()}}</p>\n</div>\n"
        },
        {
            "name": "ReadPageComponent",
            "id": "component-ReadPageComponent-8438a2235bf6e3745a4d535be1c47517",
            "file": "src/app/read-page/read-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-read-page",
            "styleUrls": [
                "./read-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./read-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "readView",
                    "defaultValue": "[]",
                    "type": "BeatReadView[]",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "relevantTags",
                    "defaultValue": "[]",
                    "type": "Tag[]",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedBeatId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "timelineView",
                    "defaultValue": "[]",
                    "type": "TimelineBlock[]",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "getBlockScore",
                    "args": [
                        {
                            "name": "block",
                            "type": "TimelineBlock"
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 78,
                    "jsdoctags": [
                        {
                            "name": "block",
                            "type": "TimelineBlock",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27
                },
                {
                    "name": "selectBeat",
                    "args": [
                        {
                            "name": "selectedId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 38,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectRandomBeat",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 59,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "timelineSelectBeat",
                    "args": [
                        {
                            "name": "selectedId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 55,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BeatReadView, BeatsService} from '../beats.service';\nimport {TimelineBlock} from '../timeline-chart/timeline-chart.component';\nimport {Beat, Tag} from '../../protos';\nimport {TagService} from '../tag.service';\n\n@Component({\n  selector: 'app-read-page',\n  templateUrl: './read-page.component.html',\n  styleUrls: ['./read-page.component.scss']\n})\nexport class ReadPageComponent implements OnInit {\n\n  selectedBeatId = '';\n  readView: BeatReadView[] = [];\n  timelineView: TimelineBlock[] = [];\n  relevantTags: Tag[] = [];\n\n  constructor(\n    private beatsService: BeatsService,\n    private tagService: TagService,\n    private ref: ChangeDetectorRef,\n    private route: ActivatedRoute,\n    private router: Router) { }\n\n  ngOnInit(): void {\n    // Read the selected beat ID from the route\n    this.route.params.subscribe(async (value) => {\n      const selectedId = value.id as string;\n      if (this.selectedBeatId !== selectedId && !!selectedId) {\n        await this.selectBeat(selectedId);\n      }\n    });\n\n  }\n\n  async selectBeat(selectedId: string): Promise<void> {\n    this.readView = await this.beatsService.fetchReadView(selectedId);\n    this.timelineView = await this.beatsService.fetchTimelineView(selectedId);\n\n    const allReferencedTagIds = new Set<string>();\n    this.timelineView.forEach((block) => {\n      block.tagReferences.forEach((reference) => {\n        allReferencedTagIds.add(reference.tagId);\n      });\n    });\n\n    this.relevantTags = await this.tagService.getSpecificTags(Array.from(allReferencedTagIds.keys()));\n\n    this.selectedBeatId = selectedId;\n    this.ref.markForCheck();\n  }\n\n  async timelineSelectBeat(selectedId: string): Promise<void> {\n    await this.router.navigate(['/beats', { id: selectedId }]);\n  }\n\n  async selectRandomBeat(): Promise<void> {\n    let sumScore = 0;\n    this.timelineView.forEach((block) => {\n      sumScore += this.getBlockScore(block);\n    });\n\n    const cutoff = Math.random() * sumScore;\n    console.log([sumScore, cutoff]);\n\n    let rollingSum = 0;\n    for (const block of this.timelineView) {\n      rollingSum += this.getBlockScore(block);\n      if (rollingSum >= cutoff) {\n        await this.timelineSelectBeat(block.id);\n        return;\n      }\n    }\n  }\n\n  getBlockScore(block: TimelineBlock): number {\n    const durationScore = Math.ceil((block.endSec - block.startSec) / 60);\n    let completenessScore = 0;\n    switch (block.completeness) {\n      case Beat.Completeness.NOT_STARTED:\n        completenessScore = 1e3;\n        break;\n      case Beat.Completeness.BRAINSTORM:\n        completenessScore = 1e2;\n        break;\n      case Beat.Completeness.INITIAL_DRAFT:\n        completenessScore = 1e1;\n        break;\n      case Beat.Completeness.POLISHED:\n        completenessScore = 1;\n        break;\n      case Beat.Completeness.FINAL:\n        completenessScore = 0;\n        break;\n    }\n\n    console.log(durationScore * completenessScore);\n\n    return durationScore * completenessScore;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./read-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "beatsService",
                        "type": "BeatsService"
                    },
                    {
                        "name": "tagService",
                        "type": "TagService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "beatsService",
                        "type": "BeatsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagService",
                        "type": "TagService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<button mat-stroked-button (click)=\"selectRandomBeat()\">Choose random beat to work on</button>\n<app-timeline-chart\n  [timelineBlocks]=\"timelineView\"\n  [relevantTags]=\"relevantTags\"\n  (selectBeat)=\"timelineSelectBeat($event)\"></app-timeline-chart>\n<app-read-page-beat *ngFor=\"let beat of readView\" [beat]=\"beat\">\n</app-read-page-beat>\n"
        },
        {
            "name": "ShowSessionHistoryComponent",
            "id": "component-ShowSessionHistoryComponent-3d79738596baec28b1888b3b5170d170",
            "file": "src/app/show-session-history/show-session-history.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-show-session-history",
            "styleUrls": [
                "./show-session-history.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./show-session-history.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "metadataSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "workspaceMetadata",
                    "defaultValue": "WritingWorkspaceMetadata.create()",
                    "type": "WritingWorkspaceMetadata",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchHistoryLength",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 33
                },
                {
                    "name": "fetchRecentHistory",
                    "args": [],
                    "optional": false,
                    "returnType": "IWritingSession[]",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {WorkspaceMetadataService} from '../workspace-metadata.service';\nimport {IWritingSession, WritingWorkspaceMetadata} from '../../protos';\n\n@Component({\n  selector: 'app-show-session-history',\n  templateUrl: './show-session-history.component.html',\n  styleUrls: ['./show-session-history.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ShowSessionHistoryComponent implements OnInit, OnDestroy {\n  workspaceMetadata: WritingWorkspaceMetadata = WritingWorkspaceMetadata.create();\n  metadataSubscription = '';\n\n  constructor(private ref: ChangeDetectorRef, private workspaceMetadataService: WorkspaceMetadataService) { }\n\n  ngOnInit(): void  {\n    this.metadataSubscription = this.workspaceMetadataService.subscribeToWorkspaceMetadata(\n      (workspaceMetadata: WritingWorkspaceMetadata) => {\n      this.workspaceMetadata = workspaceMetadata;\n      this.ref.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void  {\n    this.workspaceMetadataService.cancelSubscriptionToWorkspaceMetadata(this.metadataSubscription);\n  }\n\n  fetchRecentHistory(): IWritingSession[] {\n    return this.workspaceMetadata.sessionHistory;\n  }\n\n  fetchHistoryLength(): number {\n    return this.workspaceMetadata.sessionHistory.length;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./show-session-history.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService"
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "workspaceMetadataService",
                        "type": "WorkspaceMetadataService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<h4>Writing History ({{fetchHistoryLength()}} sessions)</h4>\n\n<ng-container *ngFor=\"let entry of fetchRecentHistory()\">\n  <div>\n    {{entry.duration?.seconds}} seconds ({{entry.activeDuration?.seconds}} active seconds)\n  </div>\n</ng-container>\n"
        },
        {
            "name": "StructureTemplateDetailsComponent",
            "id": "component-StructureTemplateDetailsComponent-90a189ad992e2d017728a0320f829c39",
            "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-structure-template-details",
            "styleUrls": [
                "./structure-template-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./structure-template-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "structureTemplate",
                    "defaultValue": "null",
                    "line": 24,
                    "type": "StructureTemplate | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "templateUpdated",
                    "defaultValue": "new EventEmitter<StructureTemplateUpdate>()",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "lastStructureTemplateInput",
                    "defaultValue": "null",
                    "type": "StructureTemplate | null",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "onContentChanged",
                    "defaultValue": "debounce((contentChangeEvent: ContentChange) => {\n    this.parseContent(contentChangeEvent.text + '\\n');\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "quillContent",
                    "defaultValue": "[]",
                    "type": "DeltaOperation[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "addBeat",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 224
                },
                {
                    "name": "areStructureTemplatesEqual",
                    "args": [
                        {
                            "name": "one",
                            "type": "StructureTemplate | null"
                        },
                        {
                            "name": "two",
                            "type": "StructureTemplate | null"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 182,
                    "jsdoctags": [
                        {
                            "name": "one",
                            "type": "StructureTemplate | null",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "two",
                            "type": "StructureTemplate | null",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "fieldMap",
                            "type": "Map<string | string>"
                        },
                        {
                            "name": "parsedBeats",
                            "type": "Map<string, string>[]"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 152,
                    "jsdoctags": [
                        {
                            "name": "fieldMap",
                            "type": "Map<string | string>",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "parsedBeats",
                            "type": "Map<string, string>[]",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 103
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "parseContent",
                    "args": [
                        {
                            "name": "newContent",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "jsdoctags": [
                        {
                            "name": "newContent",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "refreshQuillContent",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46
                },
                {
                    "name": "repair",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 220
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnChanges, Output} from '@angular/core';\nimport {StructureTemplate} from '../../../protos';\nimport {ContentChange} from 'ngx-quill/lib/quill-editor.component';\nimport {DeltaOperation} from 'quill';\nimport StructureTemplateBeat = StructureTemplate.StructureTemplateBeat;\n\nimport {debounce} from 'debounce';\n\nexport interface StructureTemplateUpdate {\n  structureTemplate: StructureTemplate;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-structure-template-details',\n  templateUrl: './structure-template-details.component.html',\n  styleUrls: ['./structure-template-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StructureTemplateDetailsComponent implements OnChanges {\n\n  constructor(private ref: ChangeDetectorRef) {}\n  @Input()\n  structureTemplate: StructureTemplate|null = null;\n\n  @Output() templateUpdated = new EventEmitter<StructureTemplateUpdate>();\n\n  quillContent: DeltaOperation[] = [];\n  errorMessage = '';\n  lastStructureTemplateInput: StructureTemplate|null = null;\n\n  onContentChanged = debounce((contentChangeEvent: ContentChange) => {\n    this.parseContent(contentChangeEvent.text + '\\n');\n  }, 200);\n\n  ngOnChanges(): void {\n    if (this.areStructureTemplatesEqual(this.lastStructureTemplateInput, this.structureTemplate)) {\n      // No reason to update\n      return;\n    }\n\n    this.lastStructureTemplateInput = this.structureTemplate;\n    this.refreshQuillContent();\n  }\n\n  refreshQuillContent(): void {\n    this.quillContent = [];\n\n    this.quillContent.push(\n      getQuillHeader('Name')\n    );\n\n    this.quillContent.push({\n      insert: this.structureTemplate?.name + '\\n',\n      attributes: {},\n    });\n\n    this.quillContent.push(\n      getQuillHeader('Description')\n    );\n\n    this.quillContent.push({\n      insert: this.structureTemplate?.description + '\\n',\n      attributes: {},\n    });\n\n    this.quillContent.push(\n      getQuillHeader('Beats')\n    );\n\n    if (!!this.structureTemplate?.beats) {\n      const beats = this.structureTemplate.beats;\n      for (let i = 0; i < beats.length; i++) {\n\n        this.quillContent.push(\n          getQuillSubHeader('Description')\n        );\n\n        this.quillContent.push({\n          insert: beats[i].description + '\\n',\n          attributes: {},\n        });\n\n        this.quillContent.push(\n          getQuillSubHeader('Duration')\n        );\n\n        this.quillContent.push({\n          insert: beats[i].intendedDurationMs + '\\n',\n          attributes: {},\n        });\n\n        if (i + 1 < beats.length) {\n          this.quillContent.push(\n            getQuillSeparator()\n          );\n        }\n      }\n    }\n    this.ref.markForCheck();\n  }\n\n  isEmpty(): boolean {\n    return this.structureTemplate == null;\n  }\n\n  parseContent(newContent: string): void {\n\n    const fieldMap = parseFields(newContent, false);\n\n    let parsedBeats: Map<string, string>[] = [];\n    if (fieldMap.has('Beats')) {\n      parsedBeats = splitRepeatedFields(fieldMap.get('Beats') || '')\n        .map((beatText) => {\n        return parseFields(beatText, true);\n      }).filter(Boolean);\n    }\n\n    this.errorMessage = this.getErrorMessage(fieldMap, parsedBeats);\n    if (this.errorMessage !== '') {\n      this.ref.markForCheck();\n      return;\n    }\n\n    const newStructureTemplate = StructureTemplate.create({\n      id: this.structureTemplate?.id,\n      name: fieldMap.get('Name'),\n      description: fieldMap.get('Description'),\n      beats: parsedBeats.map((beatMap) => {\n        return StructureTemplateBeat.create({\n          description: beatMap.get('Description'),\n          intendedDurationMs: parseInt(beatMap.get('Duration') || '', 10)\n        });\n      })\n    });\n\n    if (this.areStructureTemplatesEqual(newStructureTemplate, this.structureTemplate)) {\n      // No meaningful difference\n      return;\n    }\n\n    this.lastStructureTemplateInput = newStructureTemplate;\n\n    this.templateUpdated.emit({\n      structureTemplate: newStructureTemplate,\n      modifiesListView: newStructureTemplate.name !== this.structureTemplate?.name\n    } as StructureTemplateUpdate);\n\n    this.ref.markForCheck();\n  }\n\n  getErrorMessage(fieldMap: Map<string, string>, parsedBeats: Map<string, string>[]): string {\n    if (!fieldMap.has('Name')) {\n      return 'Missing \"Name\" field';\n    }\n\n    if (fieldMap.get('Name')?.trim().length === 0) {\n      return '\"Name\" cannot be empty';\n    }\n\n    if (!fieldMap.has('Description')) {\n      return 'Missing \"Description\" field';\n    }\n\n    for (const beat of parsedBeats) {\n      if (!beat.has('Description')) {\n        return 'Beat missing \"Description\" field';\n      }\n\n      if (!beat.has('Duration')) {\n        return 'Beat missing \"Duration\" field';\n      }\n\n      if (! parseInt(beat.get('Duration')?.trim() || '', 10)) {\n        return 'Cannot parse \"Duration\" value to integer';\n      }\n    }\n\n    return '';\n  }\n\n  areStructureTemplatesEqual(one: StructureTemplate|null, two: StructureTemplate|null): boolean {\n    if (one == null && two == null) {\n      return true;\n    }\n\n    if (one == null || two == null) {\n      return false;\n    }\n\n    if (one.name !== two.name) {\n      return false;\n    }\n\n    if (one.id !== two.id) {\n      return false;\n    }\n\n    if (one.description !== two.description) {\n      return false;\n    }\n\n    if (one.beats.length !== two.beats.length) {\n      return false;\n    }\n\n    const beatsLength = one.beats.length;\n    for (let i = 0; i < beatsLength; i++) {\n      if (one.beats[i].description !== two.beats[i].description) {\n        return false;\n      }\n      if (one.beats[i].intendedDurationMs !== two.beats[i].intendedDurationMs) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  repair(): void {\n    this.refreshQuillContent();\n  }\n\n  addBeat(): void {\n    this.structureTemplate?.beats.push(\n      StructureTemplateBeat.create({\n        description: 'My new beat',\n        intendedDurationMs: 12\n      })\n    );\n\n    this.templateUpdated.emit({\n      structureTemplate: this.structureTemplate,\n      modifiesListView: false\n    } as StructureTemplateUpdate);\n    this.refreshQuillContent();\n  }\n}\n\nfunction parseFields(raw: string, isSubfields: boolean): Map<string, string> {\n  const regexStr = isSubfields\n    ? '--([^-]+)--\\n([^-]+)'\n    : '==([^=]+)==\\n([^=]+)';\n\n  const rx = RegExp(regexStr, 'gm');\n\n  const fieldMap: Map<string, string> = new Map();\n\n  let match;\n  // tslint:disable-next-line:no-conditional-assignment\n  while ((match = rx.exec(raw)) !== null) {\n    const key = match[1].trim();\n    const value = match[2].trim();\n    fieldMap.set(key, value);\n  }\n\n  return fieldMap;\n}\n\nfunction splitRepeatedFields(raw: string): string[] {\n  return raw.split(/\\n[-]+--\\n/);\n}\n\nfunction getQuillHeader(headerName: string): DeltaOperation {\n  return {\n    insert: '\\n== ' + headerName + ' ==\\n',\n    attributes: {\n      bold: true\n    }\n  };\n}\n\nfunction getQuillSubHeader(headerName: string): DeltaOperation {\n  return {\n    insert: '\\n-- ' + headerName + ' --\\n',\n    attributes: {\n      italic: true\n    }\n  };\n}\n\nfunction getQuillSeparator(): DeltaOperation {\n  return {\n    insert: '\\n' + '-'.repeat(20) + '\\n',\n    attributes: {\n      italic: true\n    }\n  };\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.ql-toolbar {\n  .toolbar-button {\n    padding: 0;\n  }\n\n  .toolbar-msg {\n    line-height: 24px;\n    margin-left: 24px;\n  }\n}\n",
                    "styleUrl": "./structure-template-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<h3 *ngIf=\"isEmpty()\">no structure template selected</h3>\n\n<quill-editor\n  *ngIf=\"!isEmpty()\"\n  [ngModel]=\"quillContent\"\n  format=\"object\"\n  (onContentChanged)=\"onContentChanged($event)\"\n>\n  <div quill-editor-toolbar>\n    <button\n            class=\"toolbar-button\"\n            (click)=\"addBeat()\">\n      <mat-icon>note_add</mat-icon>\n    </button>\n    <button\n      class=\"toolbar-button\"\n      (click)=\"repair()\">\n      <mat-icon>restore</mat-icon>\n    </button>\n    <span class=\"toolbar-msg\">\n      {{errorMessage}}\n      &nbsp;\n    </span>\n  </div>\n</quill-editor>\n"
        },
        {
            "name": "StructureTemplateNavComponent",
            "id": "component-StructureTemplateNavComponent-9d19e05f61aaf75e719d13d78e9cb4ec",
            "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-structure-template-nav",
            "styleUrls": [
                "./structure-template-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./structure-template-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedTemplateId",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "structureTemplateListView",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "StructureTemplateListView[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteTemplate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "generateStandardTemplates",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 23,
                    "type": "EventEmitter"
                },
                {
                    "name": "newTemplate",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectTemplate",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "canDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 29
                },
                {
                    "name": "createNewTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {StructureTemplateListView} from '../../structure-template.service';\n\n@Component({\n  selector: 'app-structure-template-nav',\n  templateUrl: './structure-template-nav.component.html',\n  styleUrls: ['./structure-template-nav.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StructureTemplateNavComponent {\n  @Input()\n  selectedTemplateId = '';\n\n  @Input()\n  structureTemplateListView: StructureTemplateListView[] = [];\n\n  @Output() newTemplate = new EventEmitter<void>();\n\n  @Output() selectTemplate = new EventEmitter<string>();\n\n  @Output() deleteTemplate = new EventEmitter<void>();\n\n  @Output() generateStandardTemplates = new EventEmitter<void>();\n\n  createNewTemplate(): void {\n    this.newTemplate.emit();\n  }\n\n  canDelete(): boolean {\n    return (this.selectedTemplateId || '').length > 0;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".left-rail {\n  width: 200px;\n}\n",
                    "styleUrl": "./structure-template-nav.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"left-rail\">\n  <div class=\"button-row\">\n    <button mat-icon-button (click)=\"createNewTemplate()\">\n      <mat-icon>add_circle</mat-icon>\n    </button>\n    <button\n      mat-icon-button\n      (click)=\"deleteTemplate.emit()\"\n      [disabled]=\"!canDelete()\">\n      <mat-icon>delete</mat-icon>\n    </button>\n    <button mat-icon-button (click)=\"generateStandardTemplates.emit()\">\n      <mat-icon>gesture</mat-icon>\n    </button>\n  </div>\n  <mat-action-list dense>\n    <button\n      *ngFor=\"let structureTemplate of structureTemplateListView\"\n      mat-list-item\n      (click)=\"selectTemplate.emit(structureTemplate.id)\">\n      <mat-icon\n        *ngIf=\"structureTemplate.id === selectedTemplateId\"\n        matListIcon>\n        arrow_right\n      </mat-icon>\n      {{structureTemplate.name}}\n    </button>\n  </mat-action-list>\n</div>\n"
        },
        {
            "name": "StructureTemplatePageComponent",
            "id": "component-StructureTemplatePageComponent-d5faaf002a95856e563830846406897d",
            "file": "src/app/structure-template-page/structure-template-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-structure-template-page",
            "styleUrls": [
                "./structure-template-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./structure-template-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTemplate",
                    "defaultValue": "null",
                    "type": "StructureTemplate | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedTemplateSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedTemplateUuid",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "structureTemplateListView",
                    "defaultValue": "[]",
                    "type": "StructureTemplateListView[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "structureTemplateListViewSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 50,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "generateStandardTemplates",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 76,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "newTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onTemplateChanges",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "StructureTemplateUpdate"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 72,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "StructureTemplateUpdate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTemplate",
                    "args": [
                        {
                            "name": "newId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 57,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {StructureTemplateListView, StructureTemplateService} from '../structure-template.service';\nimport {StructureTemplate} from '../../protos';\nimport {StructureTemplateUpdate} from './structure-template-details/structure-template-details.component';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n  selector: 'app-structure-template-page',\n  templateUrl: './structure-template-page.component.html',\n  styleUrls: ['./structure-template-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class StructureTemplatePageComponent implements OnInit, OnDestroy {\n\n  selectedTemplateUuid = '';\n\n  selectedTemplate: StructureTemplate|null = null;\n  selectedTemplateSubscription = '';\n\n  structureTemplateListView: StructureTemplateListView[] = [];\n  structureTemplateListViewSubscription = '';\n\n  constructor(private structureTemplateService: StructureTemplateService, private ref: ChangeDetectorRef, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    // Read the selected template ID from the route\n    this.route.params.subscribe(async (value) => {\n      const selectedId = value.id as string;\n      if (this.selectedTemplateUuid !== selectedId && !!selectedId) {\n        await this.selectTemplate(selectedId);\n      }\n    });\n\n    this.structureTemplateListViewSubscription = this.structureTemplateService.subscribeToTemplateListView((newValue) => {\n      this.structureTemplateListView = newValue;\n      this.ref.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.structureTemplateService.cancelSubscription(this.selectedTemplateSubscription);\n    this.structureTemplateService.cancelSubscription(this.structureTemplateListViewSubscription);\n  }\n\n  async newTemplate(): Promise<void> {\n    this.selectedTemplateUuid = await this.structureTemplateService.createNewStructureTemplate();\n    await this.selectTemplate(this.selectedTemplateUuid);\n  }\n\n  async deleteTemplate(): Promise<void> {\n    await this.structureTemplateService.deleteTemplate(this.selectedTemplateUuid);\n    this.selectedTemplateUuid = '';\n    this.selectedTemplate = null;\n    this.ref.markForCheck();\n  }\n\n  async selectTemplate(newId: string): Promise<void> {\n    this.selectedTemplateUuid = newId;\n\n    // Clear old subscription, setup new one\n    this.structureTemplateService.cancelSubscription(this.selectedTemplateSubscription);\n    this.selectedTemplateSubscription = this.structureTemplateService.subscribeToTemplate(newId, (newValue) => {\n      this.selectedTemplate = newValue;\n      this.ref.markForCheck();\n    });\n\n    await this.router.navigate(['/structure-templates', { id: newId }]);\n\n    this.ref.markForCheck();\n  }\n\n  async onTemplateChanges(newValue: StructureTemplateUpdate): Promise<void> {\n    await this.structureTemplateService.setStructureTemplate(newValue.structureTemplate, newValue.modifiesListView);\n  }\n\n  async generateStandardTemplates(): Promise<void> {\n    const threeActTemplateId = await this.structureTemplateService.createNewStructureTemplate();\n    const threeActTemplate = {\n      id: threeActTemplateId,\n      name: 'Three Act Structure',\n      description: 'Classic 3-Act Structure',\n      beats: [\n        {\n          description: 'Act 1: Establish the stasis, the risk of not changing',\n          intendedDurationMs: 1000\n        },\n        {\n          description: 'Act 2a: Establish superficial change, have things go well',\n          intendedDurationMs: 1000\n        },\n        {\n          description: 'Act 2b: Introduce consequences of change, show false hope as false',\n          intendedDurationMs: 1000\n        },\n        {\n          description: 'Act 3: Real change takes place, real resolution occurs',\n          intendedDurationMs: 1000\n        }\n      ]\n    } as StructureTemplate;\n\n    await this.structureTemplateService.setStructureTemplate(threeActTemplate, true);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.page {\n  height: 100%;\n  display: flex;\n}\n\n.details {\n  flex: 1;\n  padding-bottom: 48px;\n}\n",
                    "styleUrl": "./structure-template-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "structureTemplateService",
                        "type": "StructureTemplateService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n  <app-structure-template-nav\n    [selectedTemplateId]=\"selectedTemplateUuid\"\n    [structureTemplateListView]=\"structureTemplateListView\"\n    (newTemplate)=\"newTemplate()\"\n    (selectTemplate)=\"selectTemplate($event)\"\n    (deleteTemplate)=\"deleteTemplate()\"\n    (generateStandardTemplates)=\"generateStandardTemplates()\">\n  </app-structure-template-nav>\n  <app-structure-template-details\n    class=\"details\"\n    [structureTemplate]=\"selectedTemplate\"\n    (templateUpdated)=\"onTemplateChanges($event)\">\n  </app-structure-template-details>\n</div>\n"
        },
        {
            "name": "TagDetailsComponent",
            "id": "component-TagDetailsComponent-02d26d01f70183a14eb73853c0dec6c0",
            "file": "src/app/tag-page/tag-details/tag-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tag-details",
            "styleUrls": [
                "./tag-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tag",
                    "defaultValue": "null",
                    "line": 23,
                    "type": "Tag | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "tagUpdated",
                    "defaultValue": "new EventEmitter<TagUpdate>()",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "onDescriptionInput",
                    "defaultValue": "debounce((event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.description = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onNameInput",
                    "defaultValue": "debounce((event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.name = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: true,\n    } as TagUpdate);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "setEnumLabel",
                    "defaultValue": "debounce((index: number, event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.enumValues[index].label = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                }
            ],
            "methodsClass": [
                {
                    "name": "addEnumValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95
                },
                {
                    "name": "hasNumericValue",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 63
                },
                {
                    "name": "isEmpty",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 78
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "onHasNumericValueCheckbox",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDeprecatedEnum",
                    "args": [
                        {
                            "name": "index",
                            "type": "number"
                        },
                        {
                            "name": "event",
                            "type": "MatCheckboxChange"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "MatCheckboxChange",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Tag} from '../../../protos';\nimport {MatCheckboxChange} from '@angular/material/checkbox';\n\nimport {debounce} from 'debounce';\n\nexport interface TagUpdate {\n  tag: Tag;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-tag-details',\n  templateUrl: './tag-details.component.html',\n  styleUrls: ['./tag-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TagDetailsComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  tag: Tag|null = null;\n\n  @Output() tagUpdated = new EventEmitter<TagUpdate>();\n\n  onNameInput = debounce((event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.name = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: true,\n    } as TagUpdate);\n  }, 200);\n\n  onDescriptionInput = debounce((event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.description = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }, 200);\n\n  setEnumLabel = debounce((index: number, event: any) => {\n    const tag = this.tag as Tag;\n\n    tag.enumValues[index].label = event.target.value;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }, 200);\n\n  ngOnInit(): void {\n  }\n\n  hasNumericValue(): boolean {\n    return this.tag?.hasNumericValue ?? false;\n  }\n\n  onHasNumericValueCheckbox(event: MatCheckboxChange): void {\n    const tag = this.tag as Tag;\n\n    tag.hasNumericValue = event.checked;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }\n\n  isEmpty(): boolean {\n    return this.tag == null;\n  }\n\n  setDeprecatedEnum(index: number, event: MatCheckboxChange): void {\n    const isDeprecated = !event.checked;\n\n    const tag = this.tag as Tag;\n\n    tag.enumValues[index].isDeprecated = isDeprecated;\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }\n\n  addEnumValue(): void {\n    const enumValue = {\n      label: 'My enum option',\n      isDeprecated: false,\n    } as Tag.EnumValue;\n\n    const tag = this.tag as Tag;\n\n    tag.enumValues.push(enumValue);\n\n    this.tagUpdated.emit({\n      tag,\n      modifiesListView: false,\n    } as TagUpdate);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".row {\n  display: flex;\n  max-width: 500px;\n\n  mat-form-field {\n    flex: 1;\n  }\n}\n",
                    "styleUrl": "./tag-details.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 18
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h3 *ngIf=\"isEmpty()\">no tag selected</h3>\n\n<ng-container *ngIf=\"!isEmpty()\">\n  <div class=\"row\">\n    <mat-form-field class=\"full-width\">\n      <mat-label>Name</mat-label>\n      <input\n        matInput\n        placeholder=\"Tag name\"\n        [value]=\"tag?.name\"\n        (input)=\"onNameInput($event)\"/>\n    </mat-form-field>\n\n    <mat-checkbox\n      [checked]=\"hasNumericValue()\"\n      (change)=\"onHasNumericValueCheckbox($event)\"\n    >Has numeric value</mat-checkbox>\n  </div>\n\n  <div class=\"row\">\n    <mat-form-field class=\"full-width\">\n      <mat-label>Description</mat-label>\n      <textarea\n        matInput\n        placeholder=\"Tag description\"\n        [rows]=\"5\"\n        [value]=\"tag?.description\"\n        (input)=\"onDescriptionInput($event)\"></textarea>\n    </mat-form-field>\n  </div>\n\n  <div>\n    <h4>Enum values</h4>\n    <button mat-stroked-button (click)=\"addEnumValue()\">\n      Add\n    </button>\n\n    <div *ngFor=\"let enumValue of tag?.enumValues; let i = index\">\n      <mat-form-field class=\"full-width\">\n        <mat-label>Label</mat-label>\n        <input\n          matInput\n          placeholder=\"Option label\"\n          [value]=\"enumValue.label\"\n          (input)=\"setEnumLabel(i, $event)\"/>\n      </mat-form-field>\n      <mat-checkbox\n        [checked]=\"!enumValue.isDeprecated\"\n        (change)=\"setDeprecatedEnum(i, $event)\"\n      >Enabled</mat-checkbox>\n    </div>\n  </div>\n</ng-container>\n"
        },
        {
            "name": "TagNavComponent",
            "id": "component-TagNavComponent-27078832374ec5e263e0849fc9e7055b",
            "file": "src/app/tag-page/tag-nav/tag-nav.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tag-nav",
            "styleUrls": [
                "./tag-nav.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag-nav.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "selectedTagId",
                    "defaultValue": "''",
                    "line": 12
                },
                {
                    "name": "tagListView",
                    "defaultValue": "[]",
                    "line": 15,
                    "type": "TagListView[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "deleteTag",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "newTag",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "selectTag",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "canDelete",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "createNewTemplate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {TagListView} from '../../tag.service';\n\n@Component({\n  selector: 'app-tag-nav',\n  templateUrl: './tag-nav.component.html',\n  styleUrls: ['./tag-nav.component.scss']\n})\nexport class TagNavComponent implements OnInit {\n\n  @Input()\n  selectedTagId = '';\n\n  @Input()\n  tagListView: TagListView[] = [];\n\n  @Output() newTag = new EventEmitter<void>();\n\n  @Output() selectTag = new EventEmitter<string>();\n\n  @Output() deleteTag = new EventEmitter<void>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  createNewTemplate(): void {\n    this.newTag.emit();\n  }\n\n  canDelete(): boolean {\n    return (this.selectedTagId || '').length > 0;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".left-rail {\n  width: 200px;\n}\n",
                    "styleUrl": "./tag-nav.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"left-rail\">\n  <div class=\"button-row\">\n    <button mat-icon-button (click)=\"createNewTemplate()\">\n      <mat-icon>add_circle</mat-icon>\n    </button>\n    <button\n      mat-icon-button\n      (click)=\"deleteTag.emit()\"\n      [disabled]=\"!canDelete()\">\n      <mat-icon>delete</mat-icon>\n    </button>\n  </div>\n  <mat-action-list dense>\n    <button\n      *ngFor=\"let tag of tagListView\"\n      mat-list-item\n      (click)=\"selectTag.emit(tag.id)\">\n      <mat-icon\n        *ngIf=\"tag.id === selectedTagId\"\n        matListIcon>\n        arrow_right\n      </mat-icon>\n      {{tag.name}}\n    </button>\n  </mat-action-list>\n</div>\n"
        },
        {
            "name": "TagPageComponent",
            "id": "component-TagPageComponent-3e6cb4249042609e505e43c6dc36bca0",
            "file": "src/app/tag-page/tag-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-tag-page",
            "styleUrls": [
                "./tag-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tag-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedTag",
                    "defaultValue": "null",
                    "type": "Tag | null",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "selectedTagId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "selectedTagSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "tagListView",
                    "defaultValue": "[]",
                    "type": "TagListView[]",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "tagListViewSubscription",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteTag",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 68,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "newTag",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 45,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onTagChanges",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "TagUpdate"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 75,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "TagUpdate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectTag",
                    "args": [
                        {
                            "name": "tagId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 51,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "tagId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit} from '@angular/core';\nimport {TagListView, TagService} from '../tag.service';\nimport {Tag} from '../../protos';\nimport {TagUpdate} from './tag-details/tag-details.component';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n  selector: 'app-tag-page',\n  templateUrl: './tag-page.component.html',\n  styleUrls: ['./tag-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TagPageComponent implements OnInit, OnDestroy {\n\n  selectedTagId = '';\n\n  selectedTag: Tag|null = null;\n  selectedTagSubscription = '';\n\n  tagListView: TagListView[] = [];\n  tagListViewSubscription = '';\n\n  constructor(private tagService: TagService, private ref: ChangeDetectorRef, private route: ActivatedRoute, private router: Router) { }\n\n  ngOnInit(): void {\n    // Read the selected beat ID from the route\n    this.route.params.subscribe(async (value) => {\n      const selectedId = value.id as string;\n      if (this.selectedTagId !== selectedId && !!selectedId) {\n        await this.selectTag(selectedId);\n      }\n    });\n\n    this.tagListViewSubscription = this.tagService.subscribeToTagListView((newValue) => {\n      this.tagListView = newValue;\n      this.ref.markForCheck();\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.tagService.cancelSubscription(this.tagListViewSubscription);\n    this.tagService.cancelSubscription(this.selectedTagSubscription);\n  }\n\n  async newTag(): Promise<void> {\n    await this.selectTag(\n      await this.tagService.createNewTag()\n    );\n  }\n\n  async selectTag(tagId: string): Promise<void> {\n    this.selectedTagId = tagId;\n\n    // Clear old subscription setup new one\n    this.tagService.cancelSubscription(this.selectedTagSubscription);\n    if (!!tagId.length) {\n      this.selectedTagSubscription = this.tagService.subscribeToTag(tagId, (newValue) => {\n        this.selectedTag = newValue;\n        this.ref.markForCheck();\n      });\n    }\n\n    await this.router.navigate(['/tags', { id: tagId }]);\n\n    this.ref.markForCheck();\n  }\n\n  async deleteTag(): Promise<void> {\n    const tagToDelete = this.selectedTagId;\n    this.selectedTag = null;\n    await this.selectTag('');\n    await this.tagService.deleteTag(tagToDelete);\n  }\n\n  async onTagChanges(newValue: TagUpdate): Promise<void> {\n    await this.tagService.setTag(newValue.tag, newValue.modifiesListView);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".page {\n  height: 100%;\n  display: flex;\n}\n\n.details {\n  flex: 1;\n  margin-left: 24px;\n  padding-bottom: 48px;\n}\n",
                    "styleUrl": "./tag-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "tagService",
                        "type": "TagService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "tagService",
                        "type": "TagService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"page\">\n  <app-tag-nav\n    [selectedTagId]=\"selectedTagId\"\n    [tagListView]=\"tagListView\"\n    (newTag)=\"newTag()\"\n    (selectTag)=\"selectTag($event)\"\n    (deleteTag)=\"deleteTag()\"\n  ></app-tag-nav>\n  <app-tag-details\n    class=\"details\"\n    [tag]=\"selectedTag\"\n    (tagUpdated)=\"onTagChanges($event)\">\n  </app-tag-details>\n</div>\n"
        },
        {
            "name": "TimelineChartComponent",
            "id": "component-TimelineChartComponent-daa40ad4ca0be3da7b515584801d85b0",
            "file": "src/app/timeline-chart/timeline-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-timeline-chart",
            "styleUrls": [
                "./timeline-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./timeline-chart.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "relevantTags",
                    "defaultValue": "[]",
                    "line": 41,
                    "type": "Tag[]"
                },
                {
                    "name": "timelineBlocks",
                    "defaultValue": "[]",
                    "line": 38,
                    "type": "TimelineBlock[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "selectBeat",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 43,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "maxTimeSec",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "minTimeSec",
                    "defaultValue": "0",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "preppedTimelineBlockRows",
                    "defaultValue": "[]",
                    "type": "PreppedTimelineBlock[][]",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "preppedTimelineMarkers",
                    "defaultValue": "[]",
                    "type": "TimelineMarker[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "selectedTag",
                    "defaultValue": "null",
                    "type": "Tag | null",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "selectedTagId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "zoomLevel",
                    "defaultValue": "100",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "formatPercentString",
                    "args": [
                        {
                            "name": "value",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 171,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57
                },
                {
                    "name": "rebuildTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65
                },
                {
                    "name": "rebuildTimelineMarkers",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148
                },
                {
                    "name": "tagSelectionChange",
                    "args": [
                        {
                            "name": "value",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 175,
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "zoomIn",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166
                },
                {
                    "name": "zoomOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 161
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, AfterViewInit, Input, Output, OnInit, OnChanges} from '@angular/core';\nimport {getDurationStr} from '../duration-helpers';\nimport {Beat, Tag} from '../../protos';\nimport Completeness = Beat.Completeness;\nimport TagReference = Beat.TagReference;\n\nexport interface TimelineBlock {\n  id: string;\n  startSec: number;\n  endSec: number;\n  label: string;\n  depth: number;\n  completeness: Completeness;\n  tagReferences: TagReference[];\n}\n\ninterface PreppedTimelineBlock {\n  id: string;\n  width: number;\n  left: number;\n  color: string;\n  label: string;\n}\n\ninterface TimelineMarker {\n  left: number;\n  label: string;\n}\n\n@Component({\n  selector: 'app-timeline-chart',\n  templateUrl: './timeline-chart.component.html',\n  styleUrls: ['./timeline-chart.component.scss']\n})\nexport class TimelineChartComponent implements OnInit, OnChanges {\n\n  @Input()\n  timelineBlocks: TimelineBlock[] = [];\n\n  @Input()\n  relevantTags: Tag[] = [];\n\n  @Output() selectBeat = new EventEmitter<string>();\n\n  zoomLevel = 100;\n\n  preppedTimelineBlockRows: PreppedTimelineBlock[][] = [];\n  preppedTimelineMarkers: TimelineMarker[] = [];\n  minTimeSec = 0;\n  maxTimeSec = 0;\n\n  selectedTagId = '';\n  selectedTag: Tag|null = null;\n\n  constructor() {}\n\n  ngOnInit(): void {\n    this.rebuildTimeline();\n  }\n\n  ngOnChanges(): void {\n    this.rebuildTimeline();\n  }\n\n  rebuildTimeline(): void {\n    if (!this.timelineBlocks.length) {\n      return;\n    }\n\n    this.minTimeSec = this.timelineBlocks[0].startSec;\n    this.maxTimeSec = this.timelineBlocks[0].endSec;\n\n    this.timelineBlocks.forEach((block) => {\n      this.minTimeSec = Math.min(block.startSec, this.minTimeSec);\n      this.maxTimeSec = Math.max(block.endSec, this.maxTimeSec);\n    });\n\n    const depthMap = new Map<number, PreppedTimelineBlock[]>();\n\n    this.timelineBlocks.forEach((block) => {\n      if (!depthMap.has(block.depth)) {\n        depthMap.set(block.depth, []);\n      }\n\n      const width = (block.endSec - block.startSec) / (this.maxTimeSec - this.minTimeSec) * 100;\n      const left = (block.startSec - this.minTimeSec)  / (this.maxTimeSec - this.minTimeSec) * 100;\n\n      const relevantTagRef = block.tagReferences\n        .filter((reference) => reference.tagId === this.selectedTagId)[0] || null;\n\n      let color = '#ccc';\n      if (!this.selectedTag) {\n        switch (block.completeness) {\n          case Beat.Completeness.FINAL:\n            color = 'rgb(0, 128, 0)';\n            break;\n          case Beat.Completeness.POLISHED:\n            color = 'rgb(173, 255, 47)';\n            break;\n          case Beat.Completeness.INITIAL_DRAFT:\n            color = 'rgb(255, 255, 0)';\n            break;\n          case Beat.Completeness.BRAINSTORM:\n            color = 'rgb(255, 128, 0)';\n            break;\n          case Beat.Completeness.NOT_STARTED:\n            color = 'rgb(255, 0, 0)';\n            break;\n        }\n      } else {\n        if (!!relevantTagRef) {\n          color = '#ff0000';\n        }\n      }\n\n      let label = block.label;\n      if (!!relevantTagRef && (relevantTagRef.numericValue || relevantTagRef?.enumValue)) {\n        if (relevantTagRef.numericValue) {\n          label += ' (' + relevantTagRef.numericValue + ')';\n        }\n        if (relevantTagRef.enumValue) {\n          label += ' (' + (this.selectedTag as Tag).enumValues[relevantTagRef.enumValue - 1].label + ')';\n        }\n      }\n\n\n      depthMap.get(block.depth)?.push({\n        id: block.id,\n        width,\n        left,\n        color,\n        label\n      } as PreppedTimelineBlock);\n    });\n\n    const newRows: PreppedTimelineBlock[][] = [];\n\n    const allDepths = Array.from(depthMap.keys()).sort();\n    allDepths.forEach((depth) => {\n      newRows.push(depthMap.get(depth) as PreppedTimelineBlock[]);\n    });\n\n    this.preppedTimelineBlockRows = newRows;\n\n    this.rebuildTimelineMarkers();\n  }\n\n  rebuildTimelineMarkers(): void {\n    const numMarkers = Math.round(this.zoomLevel / 25);\n    this.preppedTimelineMarkers = [];\n    for (let i = 0; i < numMarkers; i++) {\n      const time = (i / numMarkers) * 0.9 * (this.maxTimeSec - this.minTimeSec) + this.minTimeSec;\n      const left = 100 * (i / numMarkers);\n      this.preppedTimelineMarkers.push({\n        left,\n        label: getDurationStr(time * 1000),\n      } as TimelineMarker);\n    }\n  }\n\n  zoomOut(): void {\n    this.zoomLevel = Math.max(100, this.zoomLevel / 2);\n    this.rebuildTimelineMarkers();\n  }\n\n  zoomIn(): void {\n    this.zoomLevel = 2.0 * this.zoomLevel;\n    this.rebuildTimelineMarkers();\n  }\n\n  formatPercentString(value: number): string {\n    return '' + value + '%';\n  }\n\n  tagSelectionChange(value: string): void {\n    this.selectedTagId = value;\n    this.selectedTag = this.relevantTags.filter((tag) => tag.id === value)[0] || null;\n    this.rebuildTimeline();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".timeline-wrapper {\n  width: 100%;\n  overflow-x: scroll;\n\n  .timeline-row {\n    position: relative;\n    height: 40px;\n  }\n\n  .timeline-block {\n    cursor: pointer;\n    display: inline-block;\n    position: absolute;\n    height: 100%;\n    -webkit-box-shadow:inset 0px 0px 0px 1px #555;\n    -moz-box-shadow:inset 0px 0px 0px 1px #555;\n    box-shadow:inset 0px 0px 0px 1px #555;\n  }\n\n  .time-marker-row {\n    height: 24px;\n    position: relative;\n\n    .marker {\n      display: inline-block;\n      position: absolute;\n      height: 100%;\n      border-left: 1px solid black;\n      padding-left: 8px;\n    }\n  }\n}\n\n.timeline-controls {\n  display: flex;\n  mat-select {\n    flex: 1;\n    margin: auto;\n  }\n}\n",
                    "styleUrl": "./timeline-chart.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 53
            },
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<div class=\"timeline-controls\">\n  <button mat-button (click)=\"zoomOut()\" [disabled]=\"zoomLevel === 100\">\n    <mat-icon>zoom_out</mat-icon>\n  </button>\n  <button mat-button (click)=\"zoomIn()\">\n    <mat-icon>zoom_in</mat-icon>\n  </button>\n  <mat-select [value]=\"'none'\" (valueChange)=\"tagSelectionChange($event)\">\n    <mat-option [value]=\"'none'\">No tag</mat-option>\n    <mat-option *ngFor=\"let tagOption of relevantTags\" [value]=\"tagOption.id\">\n      {{tagOption.name}}\n    </mat-option>\n  </mat-select>\n</div>\n<div class=\"timeline-wrapper\">\n  <div\n    *ngFor=\"let row of preppedTimelineBlockRows\"\n    class=\"timeline-row\"\n    [style.width]=\"formatPercentString(zoomLevel)\">\n    <div *ngFor=\"let block of row\"\n      class=\"timeline-block\"\n         [style.background]=\"block.color\"\n         [style.width]=\"formatPercentString(block.width)\"\n         [style.left]=\"formatPercentString(block.left)\"\n         matTooltip=\"{{block.label}}\"\n         (click)=\"selectBeat.emit(block.id)\"\n    ></div>\n  </div>\n  <div class=\"time-marker-row\" [style.width]=\"formatPercentString(zoomLevel)\">\n\n    <ng-container *ngFor=\"let marker of preppedTimelineMarkers\">\n      <div\n        class=\"marker\"\n        [style.left]=\"formatPercentString(marker.left)\">\n        {{marker.label}}\n      </div>\n    </ng-container>\n\n  </div>\n</div>\n\n{{minTimeSec}} - {{maxTimeSec}}\n"
        },
        {
            "name": "WritingContentComponent",
            "id": "component-WritingContentComponent-d093a15a73de275315a00b3d16697b71",
            "file": "src/app/writing-page/writing-content/writing-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-writing-content",
            "styleUrls": [
                "./writing-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./writing-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editorText",
                    "defaultValue": "''",
                    "line": 15
                },
                {
                    "name": "referenceBeat",
                    "defaultValue": "null",
                    "line": 12,
                    "type": "Beat | null"
                }
            ],
            "outputsClass": [
                {
                    "name": "editorTextChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "goToReference",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 21,
                    "type": "EventEmitter"
                },
                {
                    "name": "hideCard",
                    "defaultValue": "new EventEmitter<void>()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "dismissCard",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32
                },
                {
                    "name": "editorTextChange",
                    "args": [
                        {
                            "name": "newText",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "newText",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "referenceProse",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44
                },
                {
                    "name": "referenceSynopsis",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 40
                },
                {
                    "name": "showCard",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 28
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, OnInit, Input, Output, EventEmitter} from '@angular/core';\nimport {Beat} from '../../../protos';\n\n@Component({\n  selector: 'app-writing-content',\n  templateUrl: './writing-content.component.html',\n  styleUrls: ['./writing-content.component.scss']\n})\nexport class WritingContentComponent implements OnInit {\n\n  @Input()\n  referenceBeat: Beat|null = null;\n\n  @Input()\n  editorText = '';\n\n  @Output() hideCard = new EventEmitter<void>();\n\n  @Output() editorTextChanged = new EventEmitter<string>();\n\n  @Output() goToReference = new EventEmitter<void>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  showCard(): boolean {\n    return this.referenceBeat != null;\n  }\n\n  dismissCard(): void {\n    this.hideCard.emit();\n  }\n\n  editorTextChange(newText: string): void {\n    this.editorTextChanged.emit(newText);\n  }\n\n  referenceSynopsis(): string {\n    return this.referenceBeat?.synopsis || '';\n  }\n\n  referenceProse(): string {\n    return this.referenceBeat?.prose || '';\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n\n:host {\n  background: white;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n\napp-writing-input {\n  flex: 1;\n}\n\n.overlay {\n  position: absolute;\n  display: flex;\n  width: 100%;\n  height: 100%;\n  z-index: 1000;\n  background: rgba(0,0,0, 0.25);\n\n  .fake-card {\n    background: white;\n    width: 80%;\n    height: 80%;\n    border-radius: 8px;\n    border: 1px solid black;\n    margin: auto;\n    display: flex;\n    padding: 16px;\n    font-family: CourierPrime, monospace;\n    flex-direction: column;\n\n    textarea {\n      flex: 1;\n      overflow-y: scroll;\n      resize: none;\n      padding: 32px;\n      font-family: CourierPrime, Courier New, monospace;\n      border: none;\n    }\n  }\n}\n\n",
                    "styleUrl": "./writing-content.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 21
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-writing-input\n  [currentEditorText]=\"editorText\"\n  (editorTextChanged)=\"editorTextChange($event)\"\n></app-writing-input>\n<div\n  *ngIf=\"showCard()\"\n  class=\"overlay\"\n  (click)=\"dismissCard()\">\n  <div class=\"fake-card\">\n    <h2>{{referenceSynopsis()}}</h2>\n    <textarea readonly>{{referenceProse()}}</textarea>\n    <button (click)=\"goToReference.emit()\">Goto</button>\n  </div>\n</div>\n"
        },
        {
            "name": "WritingInputComponent",
            "id": "component-WritingInputComponent-a56b5f7836f678cb9bebb380809c327d",
            "file": "src/app/writing-page/writing-input/writing-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-writing-input",
            "styleUrls": [
                "./writing-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./writing-input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "currentEditorText",
                    "defaultValue": "''",
                    "line": 15
                }
            ],
            "outputsClass": [
                {
                    "name": "editorTextChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "emitProseChange",
                    "defaultValue": "debounce((newText: string) => {\n    this.editorTextChanged.emit(newText);\n  }, 200)",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isFocused",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                },
                {
                    "name": "onFocus",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent"
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "KeyboardEvent",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onProseChanged",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output, OnInit, OnChanges} from '@angular/core';\n\nimport {debounce} from 'debounce';\n\n@Component({\n  selector: 'app-writing-input',\n  templateUrl: './writing-input.component.html',\n  styleUrls: ['./writing-input.component.scss']\n})\nexport class WritingInputComponent implements OnInit {\n\n  constructor() { }\n\n  @Input()\n  currentEditorText = '';\n\n  @Output() editorTextChanged = new EventEmitter<string>();\n\n  isFocused = false;\n\n  emitProseChange = debounce((newText: string) => {\n    this.editorTextChanged.emit(newText);\n  }, 200);\n\n  ngOnInit(): void {}\n\n  onProseChanged(event: any): void {\n    this.currentEditorText = event.target.value as string;\n    this.emitProseChange(this.currentEditorText);\n  }\n\n  onKeyDown(event: KeyboardEvent): boolean {\n    if (event.key === 'Tab') {\n      document.execCommand('insertText', false, '\\t');\n      return false;\n    }\n\n    return true;\n  }\n\n  onFocus(): void {\n    this.isFocused = true;\n  }\n\n  onBlur(): void {\n    this.isFocused = false;\n    this.emitProseChange(this.currentEditorText);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: flex;\n  flex-direction: column;\n}\n\n.editor-space {\n  display: block;\n  flex: 1;\n  height: 1px;\n\n  textarea {\n    resize: none;\n    padding: 32px;\n    display: block;\n    width: 100%;\n    height: 100%;\n    overflow-y: scroll;\n\n    font-family: CourierPrime, Courier New, monospace;\n    border: none;\n  }\n}\n\n",
                    "styleUrl": "./writing-input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 10
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"editor-space\">\n  <textarea\n    autocomplete=\"off\"\n    autocorrect=\"off\"\n    spellcheck=\"true\"\n    placeholder=\"Write here!\"\n    [value]=\"currentEditorText\"\n    (input)=\"onProseChanged($event)\"\n    (keydown)=\"onKeyDown($event)\"\n    (focus)=\"onFocus()\"\n    (blur)=\"onBlur()\"\n  ></textarea>\n</div>\n\n"
        },
        {
            "name": "WritingMetadataComponent",
            "id": "component-WritingMetadataComponent-01ce81890785070b1aa8607f47673ad2",
            "file": "src/app/writing-page/writing-metadata/writing-metadata.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-writing-metadata",
            "styleUrls": [
                "./writing-metadata.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./writing-metadata.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editingBeat",
                    "defaultValue": "new Beat()",
                    "line": 17,
                    "type": "Beat"
                }
            ],
            "outputsClass": [
                {
                    "name": "beatMeatadataUpdates",
                    "defaultValue": "new EventEmitter<BeatMetadataUpdate>()",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "onSynopsisChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Beat} from '../../../protos';\n\nexport interface BeatMetadataUpdate {\n  updatedBeat: Beat;\n  modifiesListView: boolean;\n}\n\n@Component({\n  selector: 'app-writing-metadata',\n  templateUrl: './writing-metadata.component.html',\n  styleUrls: ['./writing-metadata.component.scss']\n})\nexport class WritingMetadataComponent implements OnInit {\n\n  @Input()\n  editingBeat: Beat = new Beat();\n\n  @Output() beatMeatadataUpdates = new EventEmitter<BeatMetadataUpdate>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  onSynopsisChange(event: any): void {\n    const newSynopsis = event.target.value;\n\n    const updatedBeat = this.editingBeat;\n    updatedBeat.synopsis = newSynopsis;\n\n    this.beatMeatadataUpdates.emit({\n      updatedBeat,\n      modifiesListView: true,\n    } as BeatMetadataUpdate);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./writing-metadata.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 19
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<label>Synopsis\n  <input type=\"text\" [value]=\"editingBeat.synopsis\" (input)=\"onSynopsisChange($event)\">\n</label>\n"
        },
        {
            "name": "WritingPageComponent",
            "id": "component-WritingPageComponent-bbde6c0173614a049766c419612a18a5",
            "file": "src/app/writing-page/writing-page.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-writing-page",
            "styleUrls": [
                "./writing-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./writing-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "referenceBeat",
                    "defaultValue": "null",
                    "type": "Beat | null",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "referenceBeatId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "relevantTags",
                    "defaultValue": "[]",
                    "type": "Tag[]",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "selectedBeat",
                    "defaultValue": "new Beat()",
                    "type": "Beat",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedBeatId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "shouldShowPreview",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "timelineView",
                    "defaultValue": "[]",
                    "type": "TimelineBlock[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "editorTextChanged",
                    "args": [
                        {
                            "name": "newText",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newText",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "fetchBeatAndSetSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "fetchReferenceBeatAndSetSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "hidePreview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90
                },
                {
                    "name": "navigateToPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                },
                {
                    "name": "selectBeat",
                    "args": [
                        {
                            "name": "selectedId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setBeatUpdate",
                    "args": [
                        {
                            "name": "beat",
                            "type": "Beat"
                        },
                        {
                            "name": "affectsMapView",
                            "type": "boolean",
                            "defaultValue": "false"
                        },
                        {
                            "name": "affectsLastUpdated",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beat",
                            "type": "Beat",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsMapView",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsLastUpdated",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showPreview",
                    "args": [
                        {
                            "name": "newId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateBeatMetadata",
                    "args": [
                        {
                            "name": "update",
                            "type": "BeatMetadataUpdate"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "BeatMetadataUpdate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRelevantTags",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "updateTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, OnInit} from '@angular/core';\nimport {TimelineBlock} from '../timeline-chart/timeline-chart.component';\nimport {Beat, Tag} from '../../protos';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BeatsService} from '../beats.service';\nimport {TagService} from '../tag.service';\nimport {BeatMetadataUpdate} from './writing-metadata/writing-metadata.component';\n\n@Component({\n  selector: 'app-writing-page',\n  templateUrl: './writing-page.component.html',\n  styleUrls: ['./writing-page.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WritingPageComponent implements OnInit {\n\n  selectedBeatId = '';\n  selectedBeat: Beat = new Beat();\n\n  referenceBeatId = '';\n  referenceBeat: Beat|null = null;\n\n  timelineView: TimelineBlock[] = [];\n  relevantTags: Tag[] = [];\n\n  shouldShowPreview = false;\n\n  constructor(\n    protected beatsService: BeatsService,\n    protected tagService: TagService,\n    protected ref: ChangeDetectorRef,\n    protected route: ActivatedRoute,\n    protected router: Router) { }\n\n  ngOnInit(): void {\n\n    // Read the selected beat ID from the route\n    this.route.params.subscribe(async (value) => {\n      const selectedId = value.id as string;\n      if (this.selectedBeatId !== selectedId && !!selectedId) {\n        await this.selectBeat(selectedId);\n      }\n    });\n  }\n\n  async selectBeat(selectedId: string): Promise<void> {\n    this.selectedBeatId = selectedId;\n    console.log('selected: ' + selectedId);\n\n    await this.fetchBeatAndSetSubscriptions();\n\n    await this.updateTimeline();\n    await this.updateRelevantTags();\n    this.ref.markForCheck();\n  }\n\n  // Separate function to allow mocking in Mirage variation\n  async fetchBeatAndSetSubscriptions(): Promise<void> {\n    this.selectedBeat = await this.beatsService.getBeat(this.selectedBeatId) as Beat;\n  }\n\n  async updateTimeline(): Promise<void> {\n    this.timelineView = await this.beatsService.fetchTimelineView(\n      this.selectedBeatId);\n  }\n\n  async updateRelevantTags(): Promise<void> {\n    const allReferencedTagIds = new Set<string>();\n    this.timelineView.forEach((block) => {\n      block.tagReferences.forEach((reference) => {\n        allReferencedTagIds.add(reference.tagId);\n      });\n    });\n\n    this.relevantTags = await this.tagService.getSpecificTags(Array.from(allReferencedTagIds.keys()));\n\n  }\n\n  async showPreview(newId: string): Promise<void> {\n    this.referenceBeatId = newId;\n    await this.fetchReferenceBeatAndSetSubscriptions();\n    this.ref.markForCheck();\n  }\n\n  // Separate function to allow mocking in Mirage variation\n  async fetchReferenceBeatAndSetSubscriptions(): Promise<void> {\n    this.referenceBeat = await this.beatsService.getBeat(this.referenceBeatId) as Beat;\n  }\n\n  hidePreview(): void {\n    this.referenceBeatId = '';\n    this.referenceBeat = null;\n    this.ref.markForCheck();\n  }\n\n  async navigateToPreview(): Promise<void> {\n    const beatToNavigateTo = this.referenceBeatId;\n    this.hidePreview();\n    await this.router.navigate(['/writing', { id: beatToNavigateTo }]);\n  }\n\n  async editorTextChanged(newText: string): Promise<void> {\n    this.selectedBeat.prose = newText;\n    await this.setBeatUpdate(this.selectedBeat, false, true);\n    this.ref.markForCheck();\n  }\n\n  // Separate function to allow mocking in Mirage variation\n  async setBeatUpdate(beat: Beat, affectsMapView: boolean = false, affectsLastUpdated: boolean): Promise<void> {\n    await this.beatsService.setBeat(beat, affectsMapView, affectsLastUpdated);\n  }\n\n  async updateBeatMetadata(update: BeatMetadataUpdate): Promise<void> {\n    this.selectedBeat = update.updatedBeat;\n    await this.setBeatUpdate(update.updatedBeat, update.modifiesListView, false);\n    this.ref.markForCheck();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n:host {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n\n.bottom-content {\n  flex: 1;\n  display: flex;\n\n  app-writing-content {\n    flex: 1;\n  }\n}\n",
                    "styleUrl": "./writing-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "beatsService",
                        "type": "BeatsService"
                    },
                    {
                        "name": "tagService",
                        "type": "TagService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "beatsService",
                        "type": "BeatsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagService",
                        "type": "TagService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-writing-subheader\n  [editingBeat]=\"selectedBeat\"\n  [timelineView]=\"timelineView\"\n  [relevantTags]=\"relevantTags\"\n  (showPreview)=\"showPreview($event)\"\n  (beatMeatadataUpdates)=\"updateBeatMetadata($event)\"></app-writing-subheader>\n<div class=\"bottom-content\">\n  <app-writing-content\n    [referenceBeat]=\"referenceBeat\"\n    [editorText]=\"selectedBeat.prose\"\n    (hideCard)=\"hidePreview()\"\n    (editorTextChanged)=\"editorTextChanged($event)\"\n    (goToReference)=\"navigateToPreview()\"\n  ></app-writing-content>\n  <app-writing-sidebar></app-writing-sidebar>\n</div>\n"
        },
        {
            "name": "WritingPageMirageComponent",
            "id": "component-WritingPageMirageComponent-4412d642fad240fbe840268c0c660744",
            "file": "src/app/writing-page/writing-page-mirage.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "writing-page-mirage",
            "styleUrls": [
                "./writing-page.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./writing-page.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "referenceBeat",
                    "defaultValue": "null",
                    "type": "Beat | null",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "referenceBeatId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "relevantTags",
                    "defaultValue": "[]",
                    "type": "Tag[]",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "selectedBeat",
                    "defaultValue": "new Beat()",
                    "type": "Beat",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "selectedBeatId",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "shouldShowPreview",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "timelineView",
                    "defaultValue": "[]",
                    "type": "TimelineBlock[]",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "fetchBeatAndSetSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 128,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "setBeatUpdate",
                    "args": [
                        {
                            "name": "beat",
                            "type": "Beat"
                        },
                        {
                            "name": "affectsMapView",
                            "type": "boolean",
                            "defaultValue": "false"
                        },
                        {
                            "name": "affectsLastUpdated",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 140,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beat",
                            "type": "Beat",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsMapView",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsLastUpdated",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateRelevantTags",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 136,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "updateTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 132,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "editorTextChanged",
                    "args": [
                        {
                            "name": "newText",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 102,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newText",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "fetchBeatAndSetSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 58,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "fetchReferenceBeatAndSetSubscriptions",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 86,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "hidePreview",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "navigateToPreview",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 96,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "selectBeat",
                    "args": [
                        {
                            "name": "selectedId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 46,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "selectedId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "setBeatUpdate",
                    "args": [
                        {
                            "name": "beat",
                            "type": "Beat"
                        },
                        {
                            "name": "affectsMapView",
                            "type": "boolean",
                            "defaultValue": "false"
                        },
                        {
                            "name": "affectsLastUpdated",
                            "type": "boolean"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 109,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "beat",
                            "type": "Beat",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsMapView",
                            "type": "boolean",
                            "defaultValue": "false",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "affectsLastUpdated",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "showPreview",
                    "args": [
                        {
                            "name": "newId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 79,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "newId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "updateBeatMetadata",
                    "args": [
                        {
                            "name": "update",
                            "type": "BeatMetadataUpdate"
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 113,
                    "modifierKind": [
                        120
                    ],
                    "jsdoctags": [
                        {
                            "name": "update",
                            "type": "BeatMetadataUpdate",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "updateRelevantTags",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 67,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                },
                {
                    "name": "updateTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 62,
                    "modifierKind": [
                        120
                    ],
                    "inheritance": {
                        "file": "WritingPageComponent"
                    }
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component} from '@angular/core';\nimport {WritingPageComponent} from './writing-page.component';\nimport {TimelineBlock} from '../timeline-chart/timeline-chart.component';\nimport {Beat, Tag} from '../../protos';\n\nimport Completeness = Beat.Completeness;\nimport TagReference = Beat.TagReference;\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BeatsService} from '../beats.service';\nimport {TagService} from '../tag.service';\n\nconst exampleTimelineBlocks = [\n  {\n    id: 'abc123',\n    startSec: 0,\n    endSec: 60 * 15,\n    label: 'First Act',\n    depth: 0,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'def456',\n    startSec: 60 * 15,\n    endSec: 60 * 30,\n    label: 'Second Act, oh wow is this a cool act, just the bestest',\n    depth: 0,\n    completeness: Completeness.FINAL,\n    tagReferences: [] as TagReference[]\n  },\n  {\n    id: 'ghi789',\n    startSec: 60 * 5,\n    endSec: 60 * 20,\n    label: 'More involved stuff',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'abc091',\n    startSec: 3600 + 60 * 5,\n    endSec: 3600 + 60 * 20,\n    label: 'One for the road',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      },\n      {\n        tagId: 'tag2',\n        enumValue: 1\n      },\n      {\n        tagId: 'tag3',\n        enumValue: 0,\n        numericValue: 14.5\n      }\n    ] as TagReference[]\n  }\n] as TimelineBlock[];\n\nconst exampleTagList = [\n  {\n    id: 'tag1',\n    name: 'Boolean tag',\n    hasNumericValue: false,\n    enumValues: []\n  },\n  {\n    id: 'tag2',\n    name: 'Enum tag',\n    hasNumericValue: false,\n    enumValues: [\n      {\n        label: 'First Value'\n      },\n      {\n        label: 'Second Value'\n      }\n    ]\n  },\n  {\n    id: 'tag3',\n    name: 'Numeric tag',\n    hasNumericValue: true,\n    enumValues: []\n  },\n] as Tag[];\n\nconst exampleBeatMap = new Map<string, Beat>();\nexampleBeatMap.set('1234', {\n    id: '1234',\n    prose: 'This is\\n\\n\\tsome stuff!'\n  } as Beat);\n\n\n\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'writing-page-mirage',\n  templateUrl: './writing-page.component.html',\n  styleUrls: ['./writing-page.component.scss'],\n  providers: [],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WritingPageMirageComponent extends WritingPageComponent {\n\n  constructor(\n    protected beatsService: BeatsService,\n    protected tagService: TagService,\n    protected ref: ChangeDetectorRef,\n    protected route: ActivatedRoute,\n    protected router: Router) {\n    super(\n      beatsService,\n      tagService,\n      ref, route, router);\n  }\n\n  async fetchBeatAndSetSubscriptions(): Promise<void> {\n    this.selectedBeat = exampleBeatMap.get(this.selectedBeatId) as Beat;\n  }\n\n  async updateTimeline(): Promise<void> {\n    this.timelineView = exampleTimelineBlocks;\n  }\n\n  async updateRelevantTags(): Promise<void> {\n    this.relevantTags = exampleTagList;\n  }\n\n  async setBeatUpdate(beat: Beat, affectsMapView: boolean = false, affectsLastUpdated: boolean): Promise<void> {\n    console.log('Updated beat:');\n    console.log(beat);\n    console.log(`affectsMapView: ${affectsMapView}, affectsLastUpdated: ${affectsLastUpdated}`);\n    exampleBeatMap.set(beat.id, beat);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n:host {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  height: 100%;\n}\n\n.bottom-content {\n  flex: 1;\n  display: flex;\n\n  app-writing-content {\n    flex: 1;\n  }\n}\n",
                    "styleUrl": "./writing-page.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "beatsService",
                        "type": "BeatsService"
                    },
                    {
                        "name": "tagService",
                        "type": "TagService"
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 114,
                "jsdoctags": [
                    {
                        "name": "beatsService",
                        "type": "BeatsService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "tagService",
                        "type": "TagService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "WritingPageComponent",
            "templateData": "<app-writing-subheader\n  [editingBeat]=\"selectedBeat\"\n  [timelineView]=\"timelineView\"\n  [relevantTags]=\"relevantTags\"\n  (showPreview)=\"showPreview($event)\"\n  (beatMeatadataUpdates)=\"updateBeatMetadata($event)\"></app-writing-subheader>\n<div class=\"bottom-content\">\n  <app-writing-content\n    [referenceBeat]=\"referenceBeat\"\n    [editorText]=\"selectedBeat.prose\"\n    (hideCard)=\"hidePreview()\"\n    (editorTextChanged)=\"editorTextChanged($event)\"\n    (goToReference)=\"navigateToPreview()\"\n  ></app-writing-content>\n  <app-writing-sidebar></app-writing-sidebar>\n</div>\n"
        },
        {
            "name": "WritingSidebarComponent",
            "id": "component-WritingSidebarComponent-e70c222ebc534f5f35e954d4142965bf",
            "file": "src/app/writing-page/writing-sidebar/writing-sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-writing-sidebar",
            "styleUrls": [
                "./writing-sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./writing-sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-writing-sidebar',\n  templateUrl: './writing-sidebar.component.html',\n  styleUrls: ['./writing-sidebar.component.scss']\n})\nexport class WritingSidebarComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  width: 200px;\n  background: orange;\n}\n",
                    "styleUrl": "./writing-sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>writing-sidebar works!</div>\n"
        },
        {
            "name": "WritingSubheaderComponent",
            "id": "component-WritingSubheaderComponent-d7af5017b91c09035d01122624f208d4",
            "file": "src/app/writing-page/writing-subheader/writing-subheader.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-writing-subheader",
            "styleUrls": [
                "./writing-subheader.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./writing-subheader.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "editingBeat",
                    "defaultValue": "new Beat()",
                    "line": 25,
                    "type": "Beat"
                },
                {
                    "name": "relevantTags",
                    "defaultValue": "[]",
                    "line": 31,
                    "type": "Tag[]"
                },
                {
                    "name": "timelineView",
                    "defaultValue": "[]",
                    "line": 28,
                    "type": "TimelineBlock[]"
                }
            ],
            "outputsClass": [
                {
                    "name": "beatMeatadataUpdates",
                    "defaultValue": "new EventEmitter<BeatMetadataUpdate>()",
                    "line": 35,
                    "type": "EventEmitter"
                },
                {
                    "name": "showPreview",
                    "defaultValue": "new EventEmitter<string>()",
                    "line": 33,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "currentMode",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "metadataIcon",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "metadataSelected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "timelineIcon",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "timelineSelected",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methodsClass": [
                {
                    "name": "isMetadata",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 52
                },
                {
                    "name": "isTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 56
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "selectBeat",
                    "args": [
                        {
                            "name": "selectedBeatId",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "jsdoctags": [
                        {
                            "name": "selectedBeatId",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selectMetadata",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60
                },
                {
                    "name": "selectTimeline",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 65,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "updateButtons",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import {ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {TimelineBlock} from '../../timeline-chart/timeline-chart.component';\nimport {Beat, Tag} from '../../../protos';\nimport {BeatMetadataUpdate} from '../writing-metadata/writing-metadata.component';\n\nconst metadataMode = 'metadataMode';\nconst timelineMode = 'timelineMode';\n\n@Component({\n  selector: 'app-writing-subheader',\n  templateUrl: './writing-subheader.component.html',\n  styleUrls: ['./writing-subheader.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class WritingSubheaderComponent implements OnInit {\n\n  currentMode = '';\n\n  metadataSelected = false;\n  metadataIcon = '';\n  timelineSelected = false;\n  timelineIcon = '';\n\n  @Input()\n  editingBeat: Beat = new Beat();\n\n  @Input()\n  timelineView: TimelineBlock[] = [];\n\n  @Input()\n  relevantTags: Tag[] = [];\n\n  @Output() showPreview = new EventEmitter<string>();\n\n  @Output() beatMeatadataUpdates = new EventEmitter<BeatMetadataUpdate>();\n\n  constructor(private ref: ChangeDetectorRef) { }\n\n  ngOnInit(): void {\n    this.selectMetadata();\n  }\n\n  updateButtons(): void {\n    this.metadataSelected = this.isMetadata();\n    this.metadataIcon = this.isMetadata() ? 'file-text' : 'file-text-outline';\n    this.timelineSelected = this.isTimeline();\n    this.timelineIcon = this.isTimeline() ? 'map' : 'map-outline';\n\n    this.ref.markForCheck();\n  }\n\n  isMetadata(): boolean {\n    return this.currentMode === metadataMode;\n  }\n\n  isTimeline(): boolean {\n    return this.currentMode === timelineMode;\n  }\n\n  selectMetadata(): void {\n    this.currentMode = metadataMode;\n    this.updateButtons();\n  }\n\n  async selectTimeline(): Promise<void> {\n    this.currentMode = timelineMode;\n    this.updateButtons();\n  }\n\n  selectBeat(selectedBeatId: string): void {\n    this.showPreview.emit(selectedBeatId);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "\n.wrapper {\n  display: flex;\n\n\n  .mode-buttons {\n    display: flex;\n    flex-direction: column;\n    margin-right: 16px;\n    border-right: 1px solid black;\n    font-family: CourierPrime, monospace;\n  }\n\n  .content {\n    flex: 1;\n  }\n}\n\n\n",
                    "styleUrl": "./writing-subheader.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "ref",
                        "type": "ChangeDetectorRef",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"wrapper\">\n  <div class=\"mode-buttons\">\n    <button\n      title=\"Metadata\"\n      (click)=\"selectMetadata()\"\n      [class.isSelected]=\"metadataSelected\">\n        M\n    </button>\n    <button\n      title=\"Timeline\"\n      (click)=\"selectTimeline()\"\n      [class.isSelected]=\"timelineSelected\">\n      T\n    </button>\n  </div>\n  <div class=\"content\">\n    <app-writing-metadata\n      *ngIf=\"isMetadata()\"\n      [editingBeat]=\"editingBeat\"\n      (beatMeatadataUpdates)=\"beatMeatadataUpdates.emit($event)\"></app-writing-metadata>\n    <app-timeline-chart\n      *ngIf=\"isTimeline()\"\n      [timelineBlocks]=\"timelineView\"\n      [relevantTags]=\"relevantTags\"\n      (selectBeat)=\"selectBeat($event)\"></app-timeline-chart>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ApplyStructureNavComponent"
                        },
                        {
                            "name": "ApplyTagNavComponent"
                        },
                        {
                            "name": "BeatActionNavComponent"
                        },
                        {
                            "name": "BeatBrainstormTemplateNavComponent"
                        },
                        {
                            "name": "BeatNavComponent"
                        },
                        {
                            "name": "BeatPageComponent"
                        },
                        {
                            "name": "BeatProseEditComponent"
                        },
                        {
                            "name": "BeatRelatedBeatNavComponent"
                        },
                        {
                            "name": "BrainstormTemplateDetailsComponent"
                        },
                        {
                            "name": "BrainstormTemplateNavComponent"
                        },
                        {
                            "name": "BrainstormTemplatePageComponent"
                        },
                        {
                            "name": "HeaderTimerComponent"
                        },
                        {
                            "name": "ImportExportPageComponent"
                        },
                        {
                            "name": "LandingPageComponent"
                        },
                        {
                            "name": "ReadPageBeatComponent"
                        },
                        {
                            "name": "ReadPageComponent"
                        },
                        {
                            "name": "ShowSessionHistoryComponent"
                        },
                        {
                            "name": "StructureTemplateDetailsComponent"
                        },
                        {
                            "name": "StructureTemplateNavComponent"
                        },
                        {
                            "name": "StructureTemplatePageComponent"
                        },
                        {
                            "name": "TagDetailsComponent"
                        },
                        {
                            "name": "TagNavComponent"
                        },
                        {
                            "name": "TagPageComponent"
                        },
                        {
                            "name": "TimelineChartComponent"
                        },
                        {
                            "name": "WritingContentComponent"
                        },
                        {
                            "name": "WritingInputComponent"
                        },
                        {
                            "name": "WritingMetadataComponent"
                        },
                        {
                            "name": "WritingPageComponent"
                        },
                        {
                            "name": "WritingPageMirageComponent"
                        },
                        {
                            "name": "WritingSidebarComponent"
                        },
                        {
                            "name": "WritingSubheaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ALL_BEAT_MAP_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beats.service.ts",
                "type": "string",
                "defaultValue": "'allBeatMap'"
            },
            {
                "name": "ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template.service.ts",
                "type": "string",
                "defaultValue": "'allBrainstormTemplatesListView'"
            },
            {
                "name": "ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template.service.ts",
                "type": "string",
                "defaultValue": "'allStructureTemplatesListView'"
            },
            {
                "name": "ALL_TAG_LIST_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag.service.ts",
                "type": "string",
                "defaultValue": "'allTagList'"
            },
            {
                "name": "ALL_TAG_MAP_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag.service.ts",
                "type": "string",
                "defaultValue": "'allTagMap'"
            },
            {
                "name": "AllAvailableTagExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasicExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/timeline-chart/timeline-chart.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasicExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/writing-page/writing-metadata/writing-metadata.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BEAT_KEY_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beats.service.ts",
                "type": "string",
                "defaultValue": "'beat-'"
            },
            {
                "name": "BRAINSTORM_TEMPLATE_KEY_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template.service.ts",
                "type": "string",
                "defaultValue": "'brainstormTemplate-'"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CURRENT_SESSION_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "string",
                "defaultValue": "'currentSession'"
            },
            {
                "name": "DefaultExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/import-export-page/import-export-page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DefaultExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/landing-page/landing-page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-details/tag-details.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "EmptyExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Example1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Example2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "exampleBeatListView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'abc-123',\n    name: 'My first beat',\n    lastUpdated: Date.now(),\n  } as BeatMapView,\n  {\n    id: 'def-456',\n    name: 'My second beat',\n    lastUpdated: Date.now() - (1000 * 3400)\n  } as BeatMapView\n]"
            },
            {
                "name": "exampleBeatListView1",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'abc-123',\n    name: 'My first beat',\n    lastUpdated: Date.now(),\n  } as BeatMapView,\n  {\n    id: 'def-456',\n    name: 'My second beat',\n    lastUpdated: Date.now() - (1000 * 3400)\n  } as BeatMapView\n]"
            },
            {
                "name": "exampleBeatListView2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'ghi-789',\n    name: 'My third beat',\n    lastUpdated: Date.now() - (1000 * 12),\n  } as BeatMapView,\n  {\n    id: 'jkl-012',\n    name: 'My 4th beat with a really long title that will wrap at some point perhaps',\n    lastUpdated: Date.now() - (1000 * 9)\n  } as BeatMapView\n]"
            },
            {
                "name": "exampleBeatMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/writing-page/writing-page-mirage.component.ts",
                "type": "",
                "defaultValue": "new Map<string, Beat>()"
            },
            {
                "name": "exampleBrainstormTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "",
                "defaultValue": "{\n  id: 'def-456',\n  label: 'My second template',\n  template: 'Who is the main character here?',\n} as BrainstormTemplate"
            },
            {
                "name": "exampleBrainstormTemplateListView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'abc-123',\n    label: 'My first template',\n  } as BrainstormTemplateListView,\n  {\n    id: 'def-456',\n    label: 'My second template'\n  } as BrainstormTemplateListView\n]"
            },
            {
                "name": "exampleBrainstormTemplateListView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'abc-123',\n    label: 'My first template'\n  } as BrainstormTemplateListView,\n  {\n    id: 'def-456',\n    label: 'My second template'\n  } as BrainstormTemplateListView\n]"
            },
            {
                "name": "exampleStructureTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "",
                "defaultValue": "{\n  id: 'def-456',\n  name: 'My second template',\n  description: 'Kind of like 3-act structure, but... actually, just 3-act structure',\n  beats: [\n    {\n      description: 'First Act',\n      intendedDurationMs: 1000 * 60\n    } as IStructureTemplateBeat,\n    {\n      description: 'Second Act',\n      intendedDurationMs: 1000 * 95\n    } as IStructureTemplateBeat,\n    {\n      description: 'Final Act',\n      intendedDurationMs: 1000 * 70\n    } as IStructureTemplateBeat,\n  ]\n} as StructureTemplate"
            },
            {
                "name": "exampleStructureTemplateListView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'abc-123',\n    name: 'My first template',\n  } as StructureTemplateListView,\n  {\n    id: 'def-456',\n    name: 'My second template'\n  } as StructureTemplateListView\n]"
            },
            {
                "name": "exampleStructureTemplateListView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n    {\n      id: 'abc-123',\n      name: 'My first template'\n    } as StructureTemplateListView,\n    {\n      id: 'def-456',\n      name: 'My second template'\n    } as StructureTemplateListView\n  ]"
            },
            {
                "name": "exampleTagList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/timeline-chart/timeline-chart.stories.ts",
                "type": "",
                "defaultValue": "[\n  {\n    id: 'tag1',\n    name: 'Boolean tag',\n    hasNumericValue: false,\n    enumValues: []\n  },\n  {\n    id: 'tag2',\n    name: 'Enum tag',\n    hasNumericValue: false,\n    enumValues: [\n      {\n        label: 'First Value'\n      },\n      {\n        label: 'Second Value'\n      }\n    ]\n  },\n  {\n    id: 'tag3',\n    name: 'Numeric tag',\n    hasNumericValue: true,\n    enumValues: []\n  },\n] as Tag[]"
            },
            {
                "name": "exampleTagList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/writing-page/writing-page-mirage.component.ts",
                "type": "",
                "defaultValue": "[\n  {\n    id: 'tag1',\n    name: 'Boolean tag',\n    hasNumericValue: false,\n    enumValues: []\n  },\n  {\n    id: 'tag2',\n    name: 'Enum tag',\n    hasNumericValue: false,\n    enumValues: [\n      {\n        label: 'First Value'\n      },\n      {\n        label: 'Second Value'\n      }\n    ]\n  },\n  {\n    id: 'tag3',\n    name: 'Numeric tag',\n    hasNumericValue: true,\n    enumValues: []\n  },\n] as Tag[]"
            },
            {
                "name": "exampleTagListView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    id: 'abc-123',\n    name: 'My first tag'\n  } as TagListView,\n  {\n    id: 'def-456',\n    name: 'My second tag'\n  } as TagListView\n]"
            },
            {
                "name": "exampleTagMap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "Map<string, Tag>",
                "defaultValue": "new Map<string, Tag>()"
            },
            {
                "name": "exampleTagReferences",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "",
                "defaultValue": "[\n  {\n    tagId: 'abc123',\n    enumValue: 1\n  },\n  {\n    tagId: 'def456',\n  },\n  {\n    tagId: 'ghi789',\n    enumValue: -1,\n    numericValue: 11\n  }\n] as TagReference[]"
            },
            {
                "name": "exampleTimelineBlocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/timeline-chart/timeline-chart.stories.ts",
                "type": "",
                "defaultValue": "[\n  {\n    id: 'abc123',\n    startSec: 0,\n    endSec: 60 * 15,\n    label: 'First Act',\n    depth: 0,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'def456',\n    startSec: 60 * 15,\n    endSec: 60 * 30,\n    label: 'Second Act, oh wow is this a cool act, just the bestest',\n    depth: 0,\n    completeness: Completeness.FINAL,\n    tagReferences: [] as TagReference[]\n  },\n  {\n    id: 'ghi789',\n    startSec: 60 * 5,\n    endSec: 60 * 20,\n    label: 'More involved stuff',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'abc091',\n    startSec: 3600 + 60 * 5,\n    endSec: 3600 + 60 * 20,\n    label: 'One for the road',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      },\n      {\n        tagId: 'tag2',\n        enumValue: 1\n      },\n      {\n        tagId: 'tag3',\n        enumValue: 0,\n        numericValue: 14.5\n      }\n    ] as TagReference[]\n  }\n] as TimelineBlock[]"
            },
            {
                "name": "exampleTimelineBlocks",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/writing-page/writing-page-mirage.component.ts",
                "type": "",
                "defaultValue": "[\n  {\n    id: 'abc123',\n    startSec: 0,\n    endSec: 60 * 15,\n    label: 'First Act',\n    depth: 0,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'def456',\n    startSec: 60 * 15,\n    endSec: 60 * 30,\n    label: 'Second Act, oh wow is this a cool act, just the bestest',\n    depth: 0,\n    completeness: Completeness.FINAL,\n    tagReferences: [] as TagReference[]\n  },\n  {\n    id: 'ghi789',\n    startSec: 60 * 5,\n    endSec: 60 * 20,\n    label: 'More involved stuff',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'abc091',\n    startSec: 3600 + 60 * 5,\n    endSec: 3600 + 60 * 20,\n    label: 'One for the road',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      },\n      {\n        tagId: 'tag2',\n        enumValue: 1\n      },\n      {\n        tagId: 'tag3',\n        enumValue: 0,\n        numericValue: 14.5\n      }\n    ] as TagReference[]\n  }\n] as TimelineBlock[]"
            },
            {
                "name": "FullExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-details/tag-details.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleNothingSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleNothingSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleNothingSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleNothingSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleNothingSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleNothingSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleNothingSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleSecondSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleSecondSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleSecondSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleSecondSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleSecondSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleSecondSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "FullExampleSecondSelected",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LAST_ACTIVE_HEARTBEAT_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "string",
                "defaultValue": "'lastActiveHeartbeat'"
            },
            {
                "name": "LAST_HEARTBEAT_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "string",
                "defaultValue": "'lastHeartbeat'"
            },
            {
                "name": "MaterialModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "type": "[]",
                "defaultValue": "[\n  MatButtonModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatIconModule,\n  BrowserAnimationsModule,\n  MatCheckboxModule,\n  DragDropModule,\n  MatTabsModule,\n  MatSelectModule,\n  MatTooltipModule,\n  QuillModule.forRoot({\n    modules: {\n      toolbar: false\n    }\n  }),\n]"
            },
            {
                "name": "metadataMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/writing-page/writing-subheader/writing-subheader.component.ts",
                "type": "string",
                "defaultValue": "'metadataMode'"
            },
            {
                "name": "mockBeat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                "type": "",
                "defaultValue": "Beat.create({\n  id: 'abc-123',\n  synopsis: 'My Synopsis',\n})"
            },
            {
                "name": "mockClosedBeat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "",
                "defaultValue": "{\n  id: 'def456',\n  name: 'My 2nd Act',\n  prose: 'It was great\\nand\\n\\nalso good',\n  completeness: Completeness.FINAL,\n  showExpanded: false,\n} as BeatReadView"
            },
            {
                "name": "mockOpenBeat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "",
                "defaultValue": "{\n  id: 'abc123',\n  name: 'My First Act',\n  prose: '   It was great\\nand\\n\\nalso good?',\n  completeness: Completeness.BRAINSTORM,\n  showExpanded: true,\n} as BeatReadView"
            },
            {
                "name": "mockTag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                "type": "",
                "defaultValue": "BrainstormTemplate.create({\n  id: 'abc-123',\n  label: 'My Template',\n  template: 'Like a 3-act structure, but turned up to 4',\n})"
            },
            {
                "name": "mockTag",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-details/tag-details.stories.ts",
                "type": "",
                "defaultValue": "Tag.create({\n  id: 'abc-123',\n  name: 'My Template',\n  description: 'Like a 3-act structure, but turned up to 4',\n  hasNumericValue: true,\n})"
            },
            {
                "name": "mockTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "",
                "defaultValue": "StructureTemplate.create({\n  id: 'abc-123',\n  name: 'My Template',\n  description: 'Like a 3-act structure, but turned up to 4'\n})"
            },
            {
                "name": "NebularModules",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.module.ts",
                "type": "[]",
                "defaultValue": "[\n  BrowserAnimationsModule,\n  NbThemeModule.forRoot({ name: 'corporate' }),\n  NbLayoutModule,\n  NbEvaIconsModule,\n  NbButtonModule,\n  NbIconModule,\n  NbButtonGroupModule,\n]"
            },
            {
                "name": "NoAvailableTagExample",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "POLL_FREQUENCY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/storage.service.ts",
                "type": "number",
                "defaultValue": "250"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "SESSION_ACTIVE_TIMEOUT_MS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "number",
                "defaultValue": "5000"
            },
            {
                "name": "SESSION_TIMEOUT_MS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "",
                "defaultValue": "1000 *  60"
            },
            {
                "name": "STRUCTURE_TEMPLATE_KEY_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template.service.ts",
                "type": "string",
                "defaultValue": "'structureTemplate-'"
            },
            {
                "name": "TAG_KEY_PREFIX",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag.service.ts",
                "type": "string",
                "defaultValue": "'tag-'"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "Story<ApplyStructureNavComponent>",
                "defaultValue": "(args: ApplyStructureNavComponent) => ({\n  component: ApplyStructureNavComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "Story<ApplyTagNavComponent>",
                "defaultValue": "(args: ApplyTagNavComponent) => ({\n  component: ApplyTagNavComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "Story<BeatBrainstormTemplateNavComponent>",
                "defaultValue": "(args: BeatBrainstormTemplateNavComponent) => ({\n  component: BeatBrainstormTemplateNavComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "Story<BeatNavComponent>",
                "defaultValue": "(args: BeatNavComponent) => ({\n  component: BeatNavComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                "type": "Story<BeatProseEditComponent>",
                "defaultValue": "(args: BeatProseEditComponent) => ({\n  component: BeatProseEditComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "Story<BeatRelatedBeatNavComponent>",
                "defaultValue": "(args: BeatRelatedBeatNavComponent) => ({\n  component: BeatRelatedBeatNavComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/import-export-page/import-export-page.stories.ts",
                "type": "Story<ImportExportPageComponent>",
                "defaultValue": "(args: ImportExportPageComponent) => ({\n  component: ImportExportPageComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/landing-page/landing-page.stories.ts",
                "type": "Story<LandingPageComponent>",
                "defaultValue": "(args: LandingPageComponent) => ({\n  component: LandingPageComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "Story<ReadPageBeatComponent>",
                "defaultValue": "(args: ReadPageBeatComponent) => ({\n  component: ReadPageBeatComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/timeline-chart/timeline-chart.stories.ts",
                "type": "Story<TimelineChartComponent>",
                "defaultValue": "(args: TimelineChartComponent) => ({\n  component: TimelineChartComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                "type": "Story<BrainstormTemplateDetailsComponent>",
                "defaultValue": "(args: BrainstormTemplateDetailsComponent) => ({\n  component: BrainstormTemplateDetailsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "Story<BrainstormTemplateNavComponent>",
                "defaultValue": "(args: BrainstormTemplateNavComponent) => ({\n  component: BrainstormTemplateNavComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "Story<StructureTemplateDetailsComponent>",
                "defaultValue": "(args: StructureTemplateDetailsComponent) => ({\n  component: StructureTemplateDetailsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "Story<StructureTemplateNavComponent>",
                "defaultValue": "(args: StructureTemplateNavComponent) => ({\n  component: StructureTemplateNavComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-details/tag-details.stories.ts",
                "type": "Story<TagDetailsComponent>",
                "defaultValue": "(args: TagDetailsComponent) => ({\n  component: TagDetailsComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "Story<TagNavComponent>",
                "defaultValue": "(args: TagNavComponent) => ({\n  component: TagNavComponent,\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/writing-page/writing-metadata/writing-metadata.stories.ts",
                "type": "Story<WritingMetadataComponent>",
                "defaultValue": "(args: WritingMetadataComponent) => ({\n  component: WritingMetadataComponent,\n  props: args,\n})"
            },
            {
                "name": "timelineMode",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/writing-page/writing-subheader/writing-subheader.component.ts",
                "type": "string",
                "defaultValue": "'timelineMode'"
            },
            {
                "name": "WORKSPACE_NAME_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/monolithic-data.service.ts",
                "type": "string",
                "defaultValue": "'workspaceName'"
            },
            {
                "name": "WRITING_WORKSPACE_METADATA_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/workspace-metadata.service.ts",
                "type": "string",
                "defaultValue": "'workspaceMetadata'"
            }
        ],
        "functions": [
            {
                "name": "allStringsInBothArrays",
                "file": "src/app/beats.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "array1"
                    },
                    {
                        "name": "array2"
                    }
                ],
                "returnType": "boolean",
                "jsdoctags": [
                    {
                        "name": "array1",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "array2",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "epochMsToTimestamp",
                "file": "src/app/timestamp-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "epochMs"
                    }
                ],
                "returnType": "Timestamp",
                "jsdoctags": [
                    {
                        "name": "epochMs",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDurationBetweenTimestamps",
                "file": "src/app/workspace-metadata.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "start"
                    },
                    {
                        "name": "end"
                    }
                ],
                "returnType": "Duration",
                "jsdoctags": [
                    {
                        "name": "start",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "end",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getDurationStr",
                "file": "src/app/duration-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "durationMs"
                    }
                ],
                "returnType": "string",
                "jsdoctags": [
                    {
                        "name": "durationMs",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getQuillHeader",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "headerName"
                    }
                ],
                "returnType": "DeltaOperation",
                "jsdoctags": [
                    {
                        "name": "headerName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getQuillSeparator",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [],
                "returnType": "DeltaOperation"
            },
            {
                "name": "getQuillSubHeader",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "headerName"
                    }
                ],
                "returnType": "DeltaOperation",
                "jsdoctags": [
                    {
                        "name": "headerName",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getTimestampFromEpochMS",
                "file": "src/app/workspace-metadata.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "epochMS"
                    }
                ],
                "returnType": "Timestamp",
                "jsdoctags": [
                    {
                        "name": "epochMS",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "incrementDuration",
                "file": "src/app/workspace-metadata.service.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "duration"
                    },
                    {
                        "name": "deltaMs"
                    }
                ],
                "returnType": "IDuration",
                "jsdoctags": [
                    {
                        "name": "duration",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "deltaMs",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "parseFields",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "raw"
                    },
                    {
                        "name": "isSubfields",
                        "type": "boolean"
                    }
                ],
                "returnType": "Map<string, string>",
                "jsdoctags": [
                    {
                        "name": "raw",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "isSubfields",
                        "type": "boolean",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "splitRepeatedFields",
                "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "raw"
                    }
                ],
                "returnType": "string[]",
                "jsdoctags": [
                    {
                        "name": "raw",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "timestampToEpochMs",
                "file": "src/app/timestamp-helpers.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "timestampValue"
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "timestampValue",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [],
        "enumerations": [
            {
                "name": "BeatSubList",
                "childs": [
                    {
                        "name": "Brainstorm"
                    },
                    {
                        "name": "Structure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/beats.service.ts": [
                {
                    "name": "ALL_BEAT_MAP_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beats.service.ts",
                    "type": "string",
                    "defaultValue": "'allBeatMap'"
                },
                {
                    "name": "BEAT_KEY_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beats.service.ts",
                    "type": "string",
                    "defaultValue": "'beat-'"
                }
            ],
            "src/app/brainstorm-template.service.ts": [
                {
                    "name": "ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template.service.ts",
                    "type": "string",
                    "defaultValue": "'allBrainstormTemplatesListView'"
                },
                {
                    "name": "BRAINSTORM_TEMPLATE_KEY_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template.service.ts",
                    "type": "string",
                    "defaultValue": "'brainstormTemplate-'"
                }
            ],
            "src/app/structure-template.service.ts": [
                {
                    "name": "ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template.service.ts",
                    "type": "string",
                    "defaultValue": "'allStructureTemplatesListView'"
                },
                {
                    "name": "STRUCTURE_TEMPLATE_KEY_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template.service.ts",
                    "type": "string",
                    "defaultValue": "'structureTemplate-'"
                }
            ],
            "src/app/tag.service.ts": [
                {
                    "name": "ALL_TAG_LIST_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag.service.ts",
                    "type": "string",
                    "defaultValue": "'allTagList'"
                },
                {
                    "name": "ALL_TAG_MAP_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag.service.ts",
                    "type": "string",
                    "defaultValue": "'allTagMap'"
                },
                {
                    "name": "TAG_KEY_PREFIX",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag.service.ts",
                    "type": "string",
                    "defaultValue": "'tag-'"
                }
            ],
            "src/app/apply-tag-nav/apply-tag-nav.stories.ts": [
                {
                    "name": "AllAvailableTagExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleTagMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                    "type": "Map<string, Tag>",
                    "defaultValue": "new Map<string, Tag>()"
                },
                {
                    "name": "exampleTagReferences",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                    "type": "",
                    "defaultValue": "[\n  {\n    tagId: 'abc123',\n    enumValue: 1\n  },\n  {\n    tagId: 'def456',\n  },\n  {\n    tagId: 'ghi789',\n    enumValue: -1,\n    numericValue: 11\n  }\n] as TagReference[]"
                },
                {
                    "name": "NoAvailableTagExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                    "type": "Story<ApplyTagNavComponent>",
                    "defaultValue": "(args: ApplyTagNavComponent) => ({\n  component: ApplyTagNavComponent,\n  props: args,\n})"
                }
            ],
            "src/app/timeline-chart/timeline-chart.stories.ts": [
                {
                    "name": "BasicExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/timeline-chart/timeline-chart.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleTagList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/timeline-chart/timeline-chart.stories.ts",
                    "type": "",
                    "defaultValue": "[\n  {\n    id: 'tag1',\n    name: 'Boolean tag',\n    hasNumericValue: false,\n    enumValues: []\n  },\n  {\n    id: 'tag2',\n    name: 'Enum tag',\n    hasNumericValue: false,\n    enumValues: [\n      {\n        label: 'First Value'\n      },\n      {\n        label: 'Second Value'\n      }\n    ]\n  },\n  {\n    id: 'tag3',\n    name: 'Numeric tag',\n    hasNumericValue: true,\n    enumValues: []\n  },\n] as Tag[]"
                },
                {
                    "name": "exampleTimelineBlocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/timeline-chart/timeline-chart.stories.ts",
                    "type": "",
                    "defaultValue": "[\n  {\n    id: 'abc123',\n    startSec: 0,\n    endSec: 60 * 15,\n    label: 'First Act',\n    depth: 0,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'def456',\n    startSec: 60 * 15,\n    endSec: 60 * 30,\n    label: 'Second Act, oh wow is this a cool act, just the bestest',\n    depth: 0,\n    completeness: Completeness.FINAL,\n    tagReferences: [] as TagReference[]\n  },\n  {\n    id: 'ghi789',\n    startSec: 60 * 5,\n    endSec: 60 * 20,\n    label: 'More involved stuff',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'abc091',\n    startSec: 3600 + 60 * 5,\n    endSec: 3600 + 60 * 20,\n    label: 'One for the road',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      },\n      {\n        tagId: 'tag2',\n        enumValue: 1\n      },\n      {\n        tagId: 'tag3',\n        enumValue: 0,\n        numericValue: 14.5\n      }\n    ] as TagReference[]\n  }\n] as TimelineBlock[]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/timeline-chart/timeline-chart.stories.ts",
                    "type": "Story<TimelineChartComponent>",
                    "defaultValue": "(args: TimelineChartComponent) => ({\n  component: TimelineChartComponent,\n  props: args,\n})"
                }
            ],
            "src/app/writing-page/writing-metadata/writing-metadata.stories.ts": [
                {
                    "name": "BasicExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/writing-page/writing-metadata/writing-metadata.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/writing-page/writing-metadata/writing-metadata.stories.ts",
                    "type": "Story<WritingMetadataComponent>",
                    "defaultValue": "(args: WritingMetadataComponent) => ({\n  component: WritingMetadataComponent,\n  props: args,\n})"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "src/app/workspace-metadata.service.ts": [
                {
                    "name": "CURRENT_SESSION_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "string",
                    "defaultValue": "'currentSession'"
                },
                {
                    "name": "LAST_ACTIVE_HEARTBEAT_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "string",
                    "defaultValue": "'lastActiveHeartbeat'"
                },
                {
                    "name": "LAST_HEARTBEAT_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "string",
                    "defaultValue": "'lastHeartbeat'"
                },
                {
                    "name": "SESSION_ACTIVE_TIMEOUT_MS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "number",
                    "defaultValue": "5000"
                },
                {
                    "name": "SESSION_TIMEOUT_MS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "",
                    "defaultValue": "1000 *  60"
                },
                {
                    "name": "WRITING_WORKSPACE_METADATA_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/workspace-metadata.service.ts",
                    "type": "string",
                    "defaultValue": "'workspaceMetadata'"
                }
            ],
            "src/app/import-export-page/import-export-page.stories.ts": [
                {
                    "name": "DefaultExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/import-export-page/import-export-page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/import-export-page/import-export-page.stories.ts",
                    "type": "Story<ImportExportPageComponent>",
                    "defaultValue": "(args: ImportExportPageComponent) => ({\n  component: ImportExportPageComponent,\n  props: args,\n})"
                }
            ],
            "src/app/landing-page/landing-page.stories.ts": [
                {
                    "name": "DefaultExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/landing-page/landing-page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/landing-page/landing-page.stories.ts",
                    "type": "Story<LandingPageComponent>",
                    "defaultValue": "(args: LandingPageComponent) => ({\n  component: LandingPageComponent,\n  props: args,\n})"
                }
            ],
            "src/app/apply-structure-nav/apply-structure-nav.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleStructureTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                    "type": "",
                    "defaultValue": "{\n  id: 'def-456',\n  name: 'My second template',\n  description: 'Kind of like 3-act structure, but... actually, just 3-act structure',\n  beats: [\n    {\n      description: 'First Act',\n      intendedDurationMs: 1000 * 60\n    } as IStructureTemplateBeat,\n    {\n      description: 'Second Act',\n      intendedDurationMs: 1000 * 95\n    } as IStructureTemplateBeat,\n    {\n      description: 'Final Act',\n      intendedDurationMs: 1000 * 70\n    } as IStructureTemplateBeat,\n  ]\n} as StructureTemplate"
                },
                {
                    "name": "exampleStructureTemplateListView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'abc-123',\n    name: 'My first template',\n  } as StructureTemplateListView,\n  {\n    id: 'def-456',\n    name: 'My second template'\n  } as StructureTemplateListView\n]"
                },
                {
                    "name": "FullExampleNothingSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExampleSecondSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                    "type": "Story<ApplyStructureNavComponent>",
                    "defaultValue": "(args: ApplyStructureNavComponent) => ({\n  component: ApplyStructureNavComponent,\n  props: args,\n})"
                }
            ],
            "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleBrainstormTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "{\n  id: 'def-456',\n  label: 'My second template',\n  template: 'Who is the main character here?',\n} as BrainstormTemplate"
                },
                {
                    "name": "exampleBrainstormTemplateListView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'abc-123',\n    label: 'My first template',\n  } as BrainstormTemplateListView,\n  {\n    id: 'def-456',\n    label: 'My second template'\n  } as BrainstormTemplateListView\n]"
                },
                {
                    "name": "FullExampleNothingSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExampleSecondSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                    "type": "Story<BeatBrainstormTemplateNavComponent>",
                    "defaultValue": "(args: BeatBrainstormTemplateNavComponent) => ({\n  component: BeatBrainstormTemplateNavComponent,\n  props: args,\n})"
                }
            ],
            "src/app/beat-nav/beat-nav.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-nav/beat-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleBeatListView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-nav/beat-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'abc-123',\n    name: 'My first beat',\n    lastUpdated: Date.now(),\n  } as BeatMapView,\n  {\n    id: 'def-456',\n    name: 'My second beat',\n    lastUpdated: Date.now() - (1000 * 3400)\n  } as BeatMapView\n]"
                },
                {
                    "name": "FullExampleNothingSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-nav/beat-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExampleSecondSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-nav/beat-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-nav/beat-nav.stories.ts",
                    "type": "Story<BeatNavComponent>",
                    "defaultValue": "(args: BeatNavComponent) => ({\n  component: BeatNavComponent,\n  props: args,\n})"
                }
            ],
            "src/app/beat-prose-edit/beat-prose-edit.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mockBeat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                    "type": "",
                    "defaultValue": "Beat.create({\n  id: 'abc-123',\n  synopsis: 'My Synopsis',\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                    "type": "Story<BeatProseEditComponent>",
                    "defaultValue": "(args: BeatProseEditComponent) => ({\n  component: BeatProseEditComponent,\n  props: args,\n})"
                }
            ],
            "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleBeatListView1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'abc-123',\n    name: 'My first beat',\n    lastUpdated: Date.now(),\n  } as BeatMapView,\n  {\n    id: 'def-456',\n    name: 'My second beat',\n    lastUpdated: Date.now() - (1000 * 3400)\n  } as BeatMapView\n]"
                },
                {
                    "name": "exampleBeatListView2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'ghi-789',\n    name: 'My third beat',\n    lastUpdated: Date.now() - (1000 * 12),\n  } as BeatMapView,\n  {\n    id: 'jkl-012',\n    name: 'My 4th beat with a really long title that will wrap at some point perhaps',\n    lastUpdated: Date.now() - (1000 * 9)\n  } as BeatMapView\n]"
                },
                {
                    "name": "FullExampleNothingSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExampleSecondSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                    "type": "Story<BeatRelatedBeatNavComponent>",
                    "defaultValue": "(args: BeatRelatedBeatNavComponent) => ({\n  component: BeatRelatedBeatNavComponent,\n  props: args,\n})"
                }
            ],
            "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mockTag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "BrainstormTemplate.create({\n  id: 'abc-123',\n  label: 'My Template',\n  template: 'Like a 3-act structure, but turned up to 4',\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                    "type": "Story<BrainstormTemplateDetailsComponent>",
                    "defaultValue": "(args: BrainstormTemplateDetailsComponent) => ({\n  component: BrainstormTemplateDetailsComponent,\n  props: args,\n})"
                }
            ],
            "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleBrainstormTemplateListView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'abc-123',\n    label: 'My first template'\n  } as BrainstormTemplateListView,\n  {\n    id: 'def-456',\n    label: 'My second template'\n  } as BrainstormTemplateListView\n]"
                },
                {
                    "name": "FullExampleNothingSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExampleSecondSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                    "type": "Story<BrainstormTemplateNavComponent>",
                    "defaultValue": "(args: BrainstormTemplateNavComponent) => ({\n  component: BrainstormTemplateNavComponent,\n  props: args,\n})"
                }
            ],
            "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mockTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                    "type": "",
                    "defaultValue": "StructureTemplate.create({\n  id: 'abc-123',\n  name: 'My Template',\n  description: 'Like a 3-act structure, but turned up to 4'\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                    "type": "Story<StructureTemplateDetailsComponent>",
                    "defaultValue": "(args: StructureTemplateDetailsComponent) => ({\n  component: StructureTemplateDetailsComponent,\n  props: args,\n})"
                }
            ],
            "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleStructureTemplateListView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n    {\n      id: 'abc-123',\n      name: 'My first template'\n    } as StructureTemplateListView,\n    {\n      id: 'def-456',\n      name: 'My second template'\n    } as StructureTemplateListView\n  ]"
                },
                {
                    "name": "FullExampleNothingSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExampleSecondSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                    "type": "Story<StructureTemplateNavComponent>",
                    "defaultValue": "(args: StructureTemplateNavComponent) => ({\n  component: StructureTemplateNavComponent,\n  props: args,\n})"
                }
            ],
            "src/app/tag-page/tag-details/tag-details.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-details/tag-details.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-details/tag-details.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mockTag",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-details/tag-details.stories.ts",
                    "type": "",
                    "defaultValue": "Tag.create({\n  id: 'abc-123',\n  name: 'My Template',\n  description: 'Like a 3-act structure, but turned up to 4',\n  hasNumericValue: true,\n})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-details/tag-details.stories.ts",
                    "type": "Story<TagDetailsComponent>",
                    "defaultValue": "(args: TagDetailsComponent) => ({\n  component: TagDetailsComponent,\n  props: args,\n})"
                }
            ],
            "src/app/tag-page/tag-nav/tag-nav.stories.ts": [
                {
                    "name": "EmptyExample",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "exampleTagListView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    id: 'abc-123',\n    name: 'My first tag'\n  } as TagListView,\n  {\n    id: 'def-456',\n    name: 'My second tag'\n  } as TagListView\n]"
                },
                {
                    "name": "FullExampleNothingSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "FullExampleSecondSelected",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                    "type": "Story<TagNavComponent>",
                    "defaultValue": "(args: TagNavComponent) => ({\n  component: TagNavComponent,\n  props: args,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/app/read-page-beat/read-page-beat.stories.ts": [
                {
                    "name": "Example1",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Example2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "mockClosedBeat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                    "type": "",
                    "defaultValue": "{\n  id: 'def456',\n  name: 'My 2nd Act',\n  prose: 'It was great\\nand\\n\\nalso good',\n  completeness: Completeness.FINAL,\n  showExpanded: false,\n} as BeatReadView"
                },
                {
                    "name": "mockOpenBeat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                    "type": "",
                    "defaultValue": "{\n  id: 'abc123',\n  name: 'My First Act',\n  prose: '   It was great\\nand\\n\\nalso good?',\n  completeness: Completeness.BRAINSTORM,\n  showExpanded: true,\n} as BeatReadView"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/read-page-beat/read-page-beat.stories.ts",
                    "type": "Story<ReadPageBeatComponent>",
                    "defaultValue": "(args: ReadPageBeatComponent) => ({\n  component: ReadPageBeatComponent,\n  props: args,\n})"
                }
            ],
            "src/app/writing-page/writing-page-mirage.component.ts": [
                {
                    "name": "exampleBeatMap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/writing-page/writing-page-mirage.component.ts",
                    "type": "",
                    "defaultValue": "new Map<string, Beat>()"
                },
                {
                    "name": "exampleTagList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/writing-page/writing-page-mirage.component.ts",
                    "type": "",
                    "defaultValue": "[\n  {\n    id: 'tag1',\n    name: 'Boolean tag',\n    hasNumericValue: false,\n    enumValues: []\n  },\n  {\n    id: 'tag2',\n    name: 'Enum tag',\n    hasNumericValue: false,\n    enumValues: [\n      {\n        label: 'First Value'\n      },\n      {\n        label: 'Second Value'\n      }\n    ]\n  },\n  {\n    id: 'tag3',\n    name: 'Numeric tag',\n    hasNumericValue: true,\n    enumValues: []\n  },\n] as Tag[]"
                },
                {
                    "name": "exampleTimelineBlocks",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/writing-page/writing-page-mirage.component.ts",
                    "type": "",
                    "defaultValue": "[\n  {\n    id: 'abc123',\n    startSec: 0,\n    endSec: 60 * 15,\n    label: 'First Act',\n    depth: 0,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'def456',\n    startSec: 60 * 15,\n    endSec: 60 * 30,\n    label: 'Second Act, oh wow is this a cool act, just the bestest',\n    depth: 0,\n    completeness: Completeness.FINAL,\n    tagReferences: [] as TagReference[]\n  },\n  {\n    id: 'ghi789',\n    startSec: 60 * 5,\n    endSec: 60 * 20,\n    label: 'More involved stuff',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      }\n    ] as TagReference[]\n  },\n  {\n    id: 'abc091',\n    startSec: 3600 + 60 * 5,\n    endSec: 3600 + 60 * 20,\n    label: 'One for the road',\n    depth: 1,\n    tagReferences: [\n      {\n        tagId: 'tag1',\n      },\n      {\n        tagId: 'tag2',\n        enumValue: 1\n      },\n      {\n        tagId: 'tag3',\n        enumValue: 0,\n        numericValue: 14.5\n      }\n    ] as TagReference[]\n  }\n] as TimelineBlock[]"
                }
            ],
            "src/app/app.module.ts": [
                {
                    "name": "MaterialModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  MatButtonModule,\n  MatListModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatIconModule,\n  BrowserAnimationsModule,\n  MatCheckboxModule,\n  DragDropModule,\n  MatTabsModule,\n  MatSelectModule,\n  MatTooltipModule,\n  QuillModule.forRoot({\n    modules: {\n      toolbar: false\n    }\n  }),\n]"
                },
                {
                    "name": "NebularModules",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.module.ts",
                    "type": "[]",
                    "defaultValue": "[\n  BrowserAnimationsModule,\n  NbThemeModule.forRoot({ name: 'corporate' }),\n  NbLayoutModule,\n  NbEvaIconsModule,\n  NbButtonModule,\n  NbIconModule,\n  NbButtonGroupModule,\n]"
                }
            ],
            "src/app/writing-page/writing-subheader/writing-subheader.component.ts": [
                {
                    "name": "metadataMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/writing-page/writing-subheader/writing-subheader.component.ts",
                    "type": "string",
                    "defaultValue": "'metadataMode'"
                },
                {
                    "name": "timelineMode",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/writing-page/writing-subheader/writing-subheader.component.ts",
                    "type": "string",
                    "defaultValue": "'timelineMode'"
                }
            ],
            "src/app/storage.service.ts": [
                {
                    "name": "POLL_FREQUENCY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/storage.service.ts",
                    "type": "number",
                    "defaultValue": "250"
                }
            ],
            "src/app/monolithic-data.service.ts": [
                {
                    "name": "WORKSPACE_NAME_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/monolithic-data.service.ts",
                    "type": "string",
                    "defaultValue": "'workspaceName'"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/beats.service.ts": [
                {
                    "name": "allStringsInBothArrays",
                    "file": "src/app/beats.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "array1"
                        },
                        {
                            "name": "array2"
                        }
                    ],
                    "returnType": "boolean",
                    "jsdoctags": [
                        {
                            "name": "array1",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "array2",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/timestamp-helpers.ts": [
                {
                    "name": "epochMsToTimestamp",
                    "file": "src/app/timestamp-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "epochMs"
                        }
                    ],
                    "returnType": "Timestamp",
                    "jsdoctags": [
                        {
                            "name": "epochMs",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "timestampToEpochMs",
                    "file": "src/app/timestamp-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "timestampValue"
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "timestampValue",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/workspace-metadata.service.ts": [
                {
                    "name": "getDurationBetweenTimestamps",
                    "file": "src/app/workspace-metadata.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "start"
                        },
                        {
                            "name": "end"
                        }
                    ],
                    "returnType": "Duration",
                    "jsdoctags": [
                        {
                            "name": "start",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "end",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getTimestampFromEpochMS",
                    "file": "src/app/workspace-metadata.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "epochMS"
                        }
                    ],
                    "returnType": "Timestamp",
                    "jsdoctags": [
                        {
                            "name": "epochMS",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "incrementDuration",
                    "file": "src/app/workspace-metadata.service.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "duration"
                        },
                        {
                            "name": "deltaMs"
                        }
                    ],
                    "returnType": "IDuration",
                    "jsdoctags": [
                        {
                            "name": "duration",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "deltaMs",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/duration-helpers.ts": [
                {
                    "name": "getDurationStr",
                    "file": "src/app/duration-helpers.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "durationMs"
                        }
                    ],
                    "returnType": "string",
                    "jsdoctags": [
                        {
                            "name": "durationMs",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts": [
                {
                    "name": "getQuillHeader",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "headerName"
                        }
                    ],
                    "returnType": "DeltaOperation",
                    "jsdoctags": [
                        {
                            "name": "headerName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getQuillSeparator",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [],
                    "returnType": "DeltaOperation"
                },
                {
                    "name": "getQuillSubHeader",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "headerName"
                        }
                    ],
                    "returnType": "DeltaOperation",
                    "jsdoctags": [
                        {
                            "name": "headerName",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "parseFields",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "raw"
                        },
                        {
                            "name": "isSubfields",
                            "type": "boolean"
                        }
                    ],
                    "returnType": "Map<string, string>",
                    "jsdoctags": [
                        {
                            "name": "raw",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "isSubfields",
                            "type": "boolean",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "splitRepeatedFields",
                    "file": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "raw"
                        }
                    ],
                    "returnType": "string[]",
                    "jsdoctags": [
                        {
                            "name": "raw",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts": [
                {
                    "name": "BeatSubList",
                    "childs": [
                        {
                            "name": "Brainstorm"
                        },
                        {
                            "name": "Structure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "LandingPageComponent"
                    },
                    {
                        "path": "data",
                        "component": "ImportExportPageComponent"
                    },
                    {
                        "path": "structure-templates",
                        "component": "StructureTemplatePageComponent"
                    },
                    {
                        "path": "tags",
                        "component": "TagPageComponent"
                    },
                    {
                        "path": "beats",
                        "component": "BeatPageComponent"
                    },
                    {
                        "path": "read",
                        "component": "ReadPageComponent"
                    },
                    {
                        "path": "brainstorm-templates",
                        "component": "BrainstormTemplatePageComponent"
                    },
                    {
                        "path": "writing",
                        "component": "WritingPageComponent"
                    },
                    {
                        "path": "mirage/writing",
                        "component": "WritingPageMirageComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MaterialModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.module.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NebularModules",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-structure-nav/apply-structure-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplyStructureNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleStructureTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleStructureTemplateListView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleNothingSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleSecondSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-structure-nav/apply-structure-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-tag-nav/apply-tag-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ApplyTagNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-tag-nav/apply-tag-nav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "EnumOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AllAvailableTagExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleTagMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleTagReferences",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "NoAvailableTagExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/apply-tag-nav/apply-tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-action-nav/beat-action-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BeatActionNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BeatBrainstormTemplateNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleBrainstormTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleBrainstormTemplateListView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleNothingSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleSecondSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-brainstorm-template-nav/beat-brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-nav/beat-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BeatNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleBeatListView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleNothingSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleSecondSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-nav/beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-page/beat-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BeatPageComponent",
                "coveragePercent": 5,
                "coverageCount": "3/51",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-prose-edit/beat-prose-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BeatProseEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-prose-edit/beat-prose-edit.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BeatUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-prose-edit/beat-prose-edit.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CompletenessOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockBeat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-prose-edit/beat-prose-edit.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BeatRelatedBeatNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BeatDropEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BeatDropList",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleBeatListView1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleBeatListView2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleNothingSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleSecondSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beat-related-beat-nav/beat-related-beat-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beats.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BeatsService",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/beats.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BeatMapView",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/beats.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BeatReadView",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/beats.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "allStringsInBothArrays",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beats.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_BEAT_MAP_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/beats.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BEAT_KEY_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrainstormTemplateDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BrainstormTemplateUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-details/brainstorm-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrainstormTemplateNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleBrainstormTemplateListView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleNothingSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleSecondSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-nav/brainstorm-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template-page/brainstorm-template-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BrainstormTemplatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "BrainstormTemplateService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BrainstormTemplateListView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_BRAINSTORM_TEMPLATE_LIST_VIEW_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/brainstorm-template.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BRAINSTORM_TEMPLATE_KEY_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/duration-helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getDurationStr",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/header-timer/header-timer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderTimerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/import-export-page/import-export-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImportExportPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/import-export-page/import-export-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/import-export-page/import-export-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/landing-page/landing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LandingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/landing-page/landing-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/landing-page/landing-page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/monolithic-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MonolithicDataService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/monolithic-data.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WORKSPACE_NAME_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/read-page-beat/read-page-beat.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadPageBeatComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example1",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Example2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockClosedBeat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockOpenBeat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/read-page-beat/read-page-beat.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/read-page/read-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReadPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/show-session-history/show-session-history.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ShowSessionHistoryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StorageService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/storage.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StorageSubscription",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/storage.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "POLL_FREQUENCY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StructureTemplateDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StructureTemplateUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getQuillHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getQuillSeparator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getQuillSubHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "parseFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.component.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "splitRepeatedFields",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-details/structure-template-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StructureTemplateNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleStructureTemplateListView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleNothingSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleSecondSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-nav/structure-template-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template-page/structure-template-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StructureTemplatePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "StructureTemplateService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StructureTemplateListView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_STRUCTURE_TEMPLATE_LIST_VIEW_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/structure-template.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "STRUCTURE_TEMPLATE_KEY_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-details/tag-details.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagDetailsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-details/tag-details.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TagUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-details/tag-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-details/tag-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-details/tag-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "mockTag",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-details/tag-details.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-nav/tag-nav.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagNavComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "EmptyExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleTagListView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleNothingSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FullExampleSecondSelected",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-nav/tag-nav.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag-page/tag-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TagPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/tag.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TagService",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/tag.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TagListView",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/tag.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_TAG_LIST_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ALL_TAG_MAP_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/tag.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TAG_KEY_PREFIX",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/timeline-chart/timeline-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimelineChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/timeline-chart/timeline-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PreppedTimelineBlock",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/timeline-chart/timeline-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimelineBlock",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/timeline-chart/timeline-chart.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimelineMarker",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/timeline-chart/timeline-chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/timeline-chart/timeline-chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleTagList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/timeline-chart/timeline-chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleTimelineBlocks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/timeline-chart/timeline-chart.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/timestamp-helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "epochMsToTimestamp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/timestamp-helpers.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "timestampToEpochMs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "WorkspaceMetadataService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getDurationBetweenTimestamps",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "getTimestampFromEpochMS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "incrementDuration",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CURRENT_SESSION_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAST_ACTIVE_HEARTBEAT_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LAST_HEARTBEAT_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SESSION_ACTIVE_TIMEOUT_MS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SESSION_TIMEOUT_MS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/workspace-metadata.service.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WRITING_WORKSPACE_METADATA_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-content/writing-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritingContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-input/writing-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritingInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-metadata/writing-metadata.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritingMetadataComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-metadata/writing-metadata.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "BeatMetadataUpdate",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-metadata/writing-metadata.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicExample",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-metadata/writing-metadata.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-page-mirage.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritingPageMirageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-page-mirage.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleBeatMap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-page-mirage.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleTagList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-page-mirage.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "exampleTimelineBlocks",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritingPageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-sidebar/writing-sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritingSidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-subheader/writing-subheader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "WritingSubheaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-subheader/writing-subheader.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "metadataMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/writing-page/writing-subheader/writing-subheader.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "timelineMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}